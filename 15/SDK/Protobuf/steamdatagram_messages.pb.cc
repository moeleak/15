// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamdatagram_messages.proto

#include "steamdatagram_messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgSteamDatagramRouterPingReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterPingReply>
      _instance;
} _CMsgSteamDatagramRouterPingReply_default_instance_;
class CMsgSteamDatagramGameserverPingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverPing>
      _instance;
} _CMsgSteamDatagramGameserverPing_default_instance_;
class CMsgSteamDatagramGameServerAuthTicket_ExtraFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameServerAuthTicket_ExtraField>
      _instance;
} _CMsgSteamDatagramGameServerAuthTicket_ExtraField_default_instance_;
class CMsgSteamDatagramGameServerAuthTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameServerAuthTicket>
      _instance;
} _CMsgSteamDatagramGameServerAuthTicket_default_instance_;
class CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverSessionRequest>
      _instance;
} _CMsgSteamDatagramGameserverSessionRequest_default_instance_;
class CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramGameserverSessionEstablished>
      _instance;
} _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
class CMsgSteamDatagramNoSessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramNoSession>
      _instance;
} _CMsgSteamDatagramNoSession_default_instance_;
class CMsgSteamDatagramDiagnosticDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDiagnostic>
      _instance;
} _CMsgSteamDatagramDiagnostic_default_instance_;
class CMsgSteamDatagramDataCenterState_ServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState_Server>
      _instance;
} _CMsgSteamDatagramDataCenterState_Server_default_instance_;
class CMsgSteamDatagramDataCenterState_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState_DataCenter>
      _instance;
} _CMsgSteamDatagramDataCenterState_DataCenter_default_instance_;
class CMsgSteamDatagramDataCenterStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramDataCenterState>
      _instance;
} _CMsgSteamDatagramDataCenterState_default_instance_;
class CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkInstantaneousStats>
      _instance;
} _CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
class CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramLinkLifetimeStats>
      _instance;
} _CMsgSteamDatagramLinkLifetimeStats_default_instance_;
class CMsgSteamDatagramConnectionQualityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionQuality>
      _instance;
} _CMsgSteamDatagramConnectionQuality_default_instance_;
class CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsClientToRouter>
      _instance;
} _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsRouterToClient>
      _instance;
} _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
class CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsRouterToServer>
      _instance;
} _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
class CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramConnectionStatsServerToRouter>
      _instance;
} _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
class CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleRequest>
      _instance;
} _CMsgSteamDatagramClientPingSampleRequest_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_RoutingClusterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply_RoutingCluster>
      _instance;
} _CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_;
class CMsgSteamDatagramClientPingSampleReply_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply_DataCenter>
      _instance;
} _CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_;
class CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientPingSampleReply>
      _instance;
} _CMsgSteamDatagramClientPingSampleReply_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>
      _instance;
} _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
class CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramClientSwitchedPrimary>
      _instance;
} _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
class CMsgSteamDatagramRouterHealth_DataCenterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterHealth_DataCenter>
      _instance;
} _CMsgSteamDatagramRouterHealth_DataCenter_default_instance_;
class CMsgSteamDatagramRouterHealthDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSteamDatagramRouterHealth>
      _instance;
} _CMsgSteamDatagramRouterHealth_default_instance_;
namespace protobuf_steamdatagram_5fmessages_2eproto {
void InitDefaultsCMsgSteamDatagramRouterPingReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramRouterPingReply_default_instance_;
    new (ptr) ::CMsgSteamDatagramRouterPingReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramRouterPingReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramRouterPingReplyImpl);
}

void InitDefaultsCMsgSteamDatagramGameserverPingImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramGameserverPing_default_instance_;
    new (ptr) ::CMsgSteamDatagramGameserverPing();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramGameserverPing::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramGameserverPing() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramGameserverPingImpl);
}

void InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraFieldImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramGameServerAuthTicket_ExtraField_default_instance_;
    new (ptr) ::CMsgSteamDatagramGameServerAuthTicket_ExtraField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramGameServerAuthTicket_ExtraField::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraField() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraFieldImpl);
}

void InitDefaultsCMsgSteamDatagramGameServerAuthTicketImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraField();
  {
    void* ptr = &::_CMsgSteamDatagramGameServerAuthTicket_default_instance_;
    new (ptr) ::CMsgSteamDatagramGameServerAuthTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramGameServerAuthTicket::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramGameServerAuthTicket() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramGameServerAuthTicketImpl);
}

void InitDefaultsCMsgSteamDatagramGameserverSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket();
  {
    void* ptr = &::_CMsgSteamDatagramGameserverSessionRequest_default_instance_;
    new (ptr) ::CMsgSteamDatagramGameserverSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramGameserverSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramGameserverSessionRequestImpl);
}

void InitDefaultsCMsgSteamDatagramGameserverSessionEstablishedImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_;
    new (ptr) ::CMsgSteamDatagramGameserverSessionEstablished();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramGameserverSessionEstablished() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramGameserverSessionEstablishedImpl);
}

void InitDefaultsCMsgSteamDatagramNoSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramNoSession_default_instance_;
    new (ptr) ::CMsgSteamDatagramNoSession();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramNoSession::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramNoSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramNoSessionImpl);
}

void InitDefaultsCMsgSteamDatagramDiagnosticImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramDiagnostic_default_instance_;
    new (ptr) ::CMsgSteamDatagramDiagnostic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDiagnostic::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramDiagnostic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramDiagnosticImpl);
}

void InitDefaultsCMsgSteamDatagramDataCenterState_ServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramDataCenterState_Server_default_instance_;
    new (ptr) ::CMsgSteamDatagramDataCenterState_Server();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramDataCenterState_Server() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramDataCenterState_ServerImpl);
}

void InitDefaultsCMsgSteamDatagramDataCenterState_DataCenterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_Server();
  {
    void* ptr = &::_CMsgSteamDatagramDataCenterState_DataCenter_default_instance_;
    new (ptr) ::CMsgSteamDatagramDataCenterState_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramDataCenterState_DataCenterImpl);
}

void InitDefaultsCMsgSteamDatagramDataCenterStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter();
  {
    void* ptr = &::_CMsgSteamDatagramDataCenterState_default_instance_;
    new (ptr) ::CMsgSteamDatagramDataCenterState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramDataCenterState::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramDataCenterState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramDataCenterStateImpl);
}

void InitDefaultsCMsgSteamDatagramLinkInstantaneousStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkInstantaneousStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramLinkInstantaneousStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramLinkInstantaneousStatsImpl);
}

void InitDefaultsCMsgSteamDatagramLinkLifetimeStatsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramLinkLifetimeStats_default_instance_;
    new (ptr) ::CMsgSteamDatagramLinkLifetimeStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramLinkLifetimeStats() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramLinkLifetimeStatsImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionQualityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionQuality_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionQuality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionQuality() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionQualityImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionStatsClientToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouterImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClientImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionStatsRouterToClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClient() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClientImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionStatsRouterToServer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServerImpl);
}

void InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  {
    void* ptr = &::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;
    new (ptr) ::CMsgSteamDatagramConnectionStatsServerToRouter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouterImpl);
}

void InitDefaultsCMsgSteamDatagramClientPingSampleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramClientPingSampleRequest_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientPingSampleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientPingSampleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientPingSampleRequestImpl);
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingClusterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingClusterImpl);
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientPingSampleReply_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenterImpl);
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter();
  {
    void* ptr = &::_CMsgSteamDatagramClientPingSampleReply_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientPingSampleReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientPingSampleReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientPingSampleReplyImpl);
}

void InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQualityImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQualityImpl);
}

void InitDefaultsCMsgSteamDatagramClientSwitchedPrimaryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  {
    void* ptr = &::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_;
    new (ptr) ::CMsgSteamDatagramClientSwitchedPrimary();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramClientSwitchedPrimary() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramClientSwitchedPrimaryImpl);
}

void InitDefaultsCMsgSteamDatagramRouterHealth_DataCenterImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgSteamDatagramRouterHealth_DataCenter_default_instance_;
    new (ptr) ::CMsgSteamDatagramRouterHealth_DataCenter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramRouterHealth_DataCenterImpl);
}

void InitDefaultsCMsgSteamDatagramRouterHealthImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter();
  {
    void* ptr = &::_CMsgSteamDatagramRouterHealth_default_instance_;
    new (ptr) ::CMsgSteamDatagramRouterHealth();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramRouterHealth::InitAsDefaultInstance();
}

void InitDefaultsCMsgSteamDatagramRouterHealth() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgSteamDatagramRouterHealthImpl);
}

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, client_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_datacenter_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, latency_ping_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, your_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, seconds_until_shutdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, scoring_penalty_relay_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, scoring_penalty_datacenter_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, scoring_penalty_values_),
  0,
  ~0u,
  ~0u,
  1,
  3,
  2,
  4,
  5,
  6,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, client_session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, client_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, client_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, router_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, router_gameserver_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, seq_number_router_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverPing, seq_number_e2e_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, string_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, int32_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, fixed32_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket_ExtraField, fixed64_value_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, time_expiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, authorized_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, authorized_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, gameserver_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, gameserver_net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameServerAuthTicket, extra_fields_),
  2,
  1,
  3,
  4,
  5,
  0,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, challenge_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, network_config_version_),
  0,
  2,
  1,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, gameserver_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, seconds_until_shutdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, session_id_),
  0,
  2,
  1,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, your_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, server_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, challenge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramNoSession, seconds_until_shutdown_),
  4,
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, severity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDiagnostic, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_Server, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_Server, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_Server, ping_ms_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_DataCenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_DataCenter, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState_DataCenter, server_sample_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramDataCenterState, data_centers_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_packets_per_sec_x10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, out_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_packets_per_sec_x10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, in_bytes_per_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, ping_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_dropped_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, packets_weird_sequence_pct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkInstantaneousStats, peak_jitter_usec_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, kb_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_sequenced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_dropped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_out_of_order_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_duplicate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, packets_recv_lurch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_99_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_97_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_95_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_90_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_75_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_histogram_dead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_2nd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_25th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, quality_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_25_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_50_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_75_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_100_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_125_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_150_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_200_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_300_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_histogram_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_5th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_50th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_75th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_95th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, ping_ntile_98th_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_negligible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_10_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramLinkLifetimeStats, jitter_histogram_20_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, instantaneous_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionQuality, lifetime_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, c2r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, c2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, client_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, seq_num_c2s_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, r2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, s2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, client_timestamp_from_router_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, client_timestamp_from_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, router_gameserver_latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seconds_until_shutdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, migrate_request_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, scoring_penalty_relay_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_r2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, seq_num_s2c_),
  0,
  1,
  2,
  3,
  4,
  5,
  9,
  10,
  11,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, r2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, c2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, client_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, router_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_r2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, seq_num_c2s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, client_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, client_session_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, s2r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, s2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, seq_num_s2c_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, client_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, client_session_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, client_cookie_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, front_ping_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster, e2e_ping_ms_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_DataCenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_DataCenter, data_center_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_DataCenter, via_relay_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_DataCenter, e2e_ping_ms_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, routing_clusters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, data_centers_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, front_ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, back_ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, seconds_until_down_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, client_cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_router_cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_active_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_active_packets_recv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_dropped_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, gap_ms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_quality_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, to_quality_now_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, from_quality_then_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, to_quality_then_),
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth_DataCenter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth_DataCenter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth_DataCenter, datacenter_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth_DataCenter, state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, cpu_load_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, active_sessions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, data_pkts_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, other_pkts_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, seconds_until_shutdown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, cpu_cost_per_user_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, cpu_cost_per_packet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, data_centers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgSteamDatagramRouterHealth, magic_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  ~0u,
  6,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, sizeof(::CMsgSteamDatagramRouterPingReply)},
  { 27, 39, sizeof(::CMsgSteamDatagramGameserverPing)},
  { 46, 56, sizeof(::CMsgSteamDatagramGameServerAuthTicket_ExtraField)},
  { 61, 74, sizeof(::CMsgSteamDatagramGameServerAuthTicket)},
  { 82, 92, sizeof(::CMsgSteamDatagramGameserverSessionRequest)},
  { 97, 106, sizeof(::CMsgSteamDatagramGameserverSessionEstablished)},
  { 110, 120, sizeof(::CMsgSteamDatagramNoSession)},
  { 125, 132, sizeof(::CMsgSteamDatagramDiagnostic)},
  { 134, 141, sizeof(::CMsgSteamDatagramDataCenterState_Server)},
  { 143, 150, sizeof(::CMsgSteamDatagramDataCenterState_DataCenter)},
  { 152, 158, sizeof(::CMsgSteamDatagramDataCenterState)},
  { 159, 172, sizeof(::CMsgSteamDatagramLinkInstantaneousStats)},
  { 180, 227, sizeof(::CMsgSteamDatagramLinkLifetimeStats)},
  { 269, 276, sizeof(::CMsgSteamDatagramConnectionQuality)},
  { 278, 289, sizeof(::CMsgSteamDatagramConnectionStatsClientToRouter)},
  { 295, 312, sizeof(::CMsgSteamDatagramConnectionStatsRouterToClient)},
  { 324, 337, sizeof(::CMsgSteamDatagramConnectionStatsRouterToServer)},
  { 345, 356, sizeof(::CMsgSteamDatagramConnectionStatsServerToRouter)},
  { 362, 368, sizeof(::CMsgSteamDatagramClientPingSampleRequest)},
  { 369, 377, sizeof(::CMsgSteamDatagramClientPingSampleReply_RoutingCluster)},
  { 380, 388, sizeof(::CMsgSteamDatagramClientPingSampleReply_DataCenter)},
  { 391, 399, sizeof(::CMsgSteamDatagramClientPingSampleReply)},
  { 402, 411, sizeof(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)},
  { 415, 432, sizeof(::CMsgSteamDatagramClientSwitchedPrimary)},
  { 444, 451, sizeof(::CMsgSteamDatagramRouterHealth_DataCenter)},
  { 453, 467, sizeof(::CMsgSteamDatagramRouterHealth)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramRouterPingReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramGameserverPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramGameServerAuthTicket_ExtraField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramGameServerAuthTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramGameserverSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramNoSession_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramDiagnostic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramDataCenterState_Server_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramDataCenterState_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramDataCenterState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramLinkLifetimeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientPingSampleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_RoutingCluster_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientPingSampleReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramRouterHealth_DataCenter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgSteamDatagramRouterHealth_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steamdatagram_messages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034steamdatagram_messages.proto\"\353\002\n CMsgS"
      "teamDatagramRouterPingReply\022\030\n\020client_ti"
      "mestamp\030\001 \001(\007\022\"\n\026latency_datacenter_ids\030"
      "\002 \003(\007B\002\020\001\022\033\n\017latency_ping_ms\030\003 \003(\rB\002\020\001\022\026"
      "\n\016your_public_ip\030\004 \001(\007\022\023\n\013server_time\030\005 "
      "\001(\007\022\021\n\tchallenge\030\006 \001(\006\022\036\n\026seconds_until_"
      "shutdown\030\007 \001(\r\022\025\n\rclient_cookie\030\010 \001(\007\022%\n"
      "\035scoring_penalty_relay_cluster\030\t \001(\r\022*\n\036"
      "scoring_penalty_datacenter_ids\030\n \003(\007B\002\020\001"
      "\022\"\n\026scoring_penalty_values\030\013 \003(\rB\002\020\001\"\334\001\n"
      "\037CMsgSteamDatagramGameserverPing\022\026\n\016clie"
      "nt_session\030\001 \001(\r\022\027\n\017client_steam_id\030\002 \001("
      "\006\022\030\n\020client_timestamp\030\003 \001(\007\022\030\n\020router_ti"
      "mestamp\030\004 \001(\007\022!\n\031router_gameserver_laten"
      "cy\030\005 \001(\r\022\031\n\021seq_number_router\030\006 \001(\r\022\026\n\016s"
      "eq_number_e2e\030\007 \001(\r\"\220\003\n%CMsgSteamDatagra"
      "mGameServerAuthTicket\022\023\n\013time_expiry\030\001 \001"
      "(\007\022\033\n\023authorized_steam_id\030\002 \001(\006\022\034\n\024autho"
      "rized_public_ip\030\003 \001(\007\022\033\n\023gameserver_stea"
      "m_id\030\004 \001(\006\022\031\n\021gameserver_net_id\030\005 \001(\006\022\021\n"
      "\tsignature\030\006 \001(\014\022\016\n\006app_id\030\007 \001(\r\022G\n\014extr"
      "a_fields\030\010 \003(\01321.CMsgSteamDatagramGameSe"
      "rverAuthTicket.ExtraField\032s\n\nExtraField\022"
      "\014\n\004name\030\001 \001(\t\022\024\n\014string_value\030\002 \001(\t\022\023\n\013i"
      "nt32_value\030\003 \001(\021\022\025\n\rfixed32_value\030\004 \001(\007\022"
      "\025\n\rfixed64_value\030\005 \001(\006\"\305\001\n)CMsgSteamData"
      "gramGameserverSessionRequest\0226\n\006ticket\030\001"
      " \001(\0132&.CMsgSteamDatagramGameServerAuthTi"
      "cket\022\026\n\016challenge_time\030\003 \001(\007\022\021\n\tchalleng"
      "e\030\004 \001(\006\022\025\n\rclient_cookie\030\005 \001(\007\022\036\n\026networ"
      "k_config_version\030\006 \001(\r\"\227\001\n-CMsgSteamData"
      "gramGameserverSessionEstablished\022\025\n\rclie"
      "nt_cookie\030\001 \001(\007\022\033\n\023gameserver_steam_id\030\003"
      " \001(\006\022\036\n\026seconds_until_shutdown\030\004 \001(\r\022\022\n\n"
      "session_id\030\005 \001(\r\"\223\001\n\032CMsgSteamDatagramNo"
      "Session\022\025\n\rclient_cookie\030\007 \001(\007\022\026\n\016your_p"
      "ublic_ip\030\002 \001(\007\022\023\n\013server_time\030\003 \001(\007\022\021\n\tc"
      "hallenge\030\004 \001(\006\022\036\n\026seconds_until_shutdown"
      "\030\005 \001(\r\"=\n\033CMsgSteamDatagramDiagnostic\022\020\n"
      "\010severity\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\"\357\001\n CMsgSt"
      "eamDatagramDataCenterState\022B\n\014data_cente"
      "rs\030\001 \003(\0132,.CMsgSteamDatagramDataCenterSt"
      "ate.DataCenter\032*\n\006Server\022\017\n\007address\030\001 \001("
      "\t\022\017\n\007ping_ms\030\002 \001(\r\032[\n\nDataCenter\022\014\n\004code"
      "\030\001 \001(\t\022\?\n\rserver_sample\030\002 \003(\0132(.CMsgStea"
      "mDatagramDataCenterState.Server\"\213\002\n\'CMsg"
      "SteamDatagramLinkInstantaneousStats\022\037\n\027o"
      "ut_packets_per_sec_x10\030\001 \001(\r\022\031\n\021out_byte"
      "s_per_sec\030\002 \001(\r\022\036\n\026in_packets_per_sec_x1"
      "0\030\003 \001(\r\022\030\n\020in_bytes_per_sec\030\004 \001(\r\022\017\n\007pin"
      "g_ms\030\005 \001(\r\022\033\n\023packets_dropped_pct\030\006 \001(\r\022"
      "\"\n\032packets_weird_sequence_pct\030\007 \001(\r\022\030\n\020p"
      "eak_jitter_usec\030\010 \001(\r\"\265\t\n\"CMsgSteamDatag"
      "ramLinkLifetimeStats\022\024\n\014packets_sent\030\003 \001"
      "(\004\022\017\n\007kb_sent\030\004 \001(\004\022\024\n\014packets_recv\030\005 \001("
      "\004\022\017\n\007kb_recv\030\006 \001(\004\022\036\n\026packets_recv_seque"
      "nced\030\007 \001(\004\022\034\n\024packets_recv_dropped\030\010 \001(\004"
      "\022!\n\031packets_recv_out_of_order\030\t \001(\004\022\036\n\026p"
      "ackets_recv_duplicate\030\n \001(\004\022\032\n\022packets_r"
      "ecv_lurch\030\013 \001(\004\022\035\n\025quality_histogram_100"
      "\030\025 \001(\r\022\034\n\024quality_histogram_99\030\026 \001(\r\022\034\n\024"
      "quality_histogram_97\030\027 \001(\r\022\034\n\024quality_hi"
      "stogram_95\030\030 \001(\r\022\034\n\024quality_histogram_90"
      "\030\031 \001(\r\022\034\n\024quality_histogram_75\030\032 \001(\r\022\034\n\024"
      "quality_histogram_50\030\033 \001(\r\022\033\n\023quality_hi"
      "stogram_1\030\034 \001(\r\022\036\n\026quality_histogram_dea"
      "d\030\035 \001(\r\022\031\n\021quality_ntile_2nd\030\036 \001(\r\022\031\n\021qu"
      "ality_ntile_5th\030\037 \001(\r\022\032\n\022quality_ntile_2"
      "5th\030  \001(\r\022\032\n\022quality_ntile_50th\030! \001(\r\022\031\n"
      "\021ping_histogram_25\030) \001(\r\022\031\n\021ping_histogr"
      "am_50\030* \001(\r\022\031\n\021ping_histogram_75\030+ \001(\r\022\032"
      "\n\022ping_histogram_100\030, \001(\r\022\032\n\022ping_histo"
      "gram_125\030- \001(\r\022\032\n\022ping_histogram_150\030. \001"
      "(\r\022\032\n\022ping_histogram_200\030/ \001(\r\022\032\n\022ping_h"
      "istogram_300\0300 \001(\r\022\032\n\022ping_histogram_max"
      "\0301 \001(\r\022\026\n\016ping_ntile_5th\0302 \001(\r\022\027\n\017ping_n"
      "tile_50th\0303 \001(\r\022\027\n\017ping_ntile_75th\0304 \001(\r"
      "\022\027\n\017ping_ntile_95th\0305 \001(\r\022\027\n\017ping_ntile_"
      "98th\0306 \001(\r\022#\n\033jitter_histogram_negligibl"
      "e\030= \001(\r\022\032\n\022jitter_histogram_1\030> \001(\r\022\032\n\022j"
      "itter_histogram_2\030\? \001(\r\022\032\n\022jitter_histog"
      "ram_5\030@ \001(\r\022\033\n\023jitter_histogram_10\030A \001(\r"
      "\022\033\n\023jitter_histogram_20\030B \001(\r\"\234\001\n\"CMsgSt"
      "eamDatagramConnectionQuality\022\?\n\rinstanta"
      "neous\030\001 \001(\0132(.CMsgSteamDatagramLinkInsta"
      "ntaneousStats\0225\n\010lifetime\030\002 \001(\0132#.CMsgSt"
      "eamDatagramLinkLifetimeStats\"\357\001\n.CMsgSte"
      "amDatagramConnectionStatsClientToRouter\022"
      "0\n\003c2r\030\001 \001(\0132#.CMsgSteamDatagramConnecti"
      "onQuality\0220\n\003c2s\030\002 \001(\0132#.CMsgSteamDatagr"
      "amConnectionQuality\022\030\n\020client_timestamp\030"
      "\003 \001(\007\022\025\n\rclient_cookie\030\010 \001(\007\022\023\n\013seq_num_"
      "c2r\030\t \001(\r\022\023\n\013seq_num_c2s\030\n \001(\r\"\305\003\n.CMsgS"
      "teamDatagramConnectionStatsRouterToClien"
      "t\0220\n\003r2c\030\001 \001(\0132#.CMsgSteamDatagramConnec"
      "tionQuality\0220\n\003s2c\030\002 \001(\0132#.CMsgSteamData"
      "gramConnectionQuality\022$\n\034client_timestam"
      "p_from_router\030\003 \001(\007\022$\n\034client_timestamp_"
      "from_server\030\004 \001(\007\022!\n\031router_gameserver_l"
      "atency\030\005 \001(\r\022\036\n\026seconds_until_shutdown\030\006"
      " \001(\r\022\032\n\022migrate_request_ip\030\n \001(\007\022\034\n\024migr"
      "ate_request_port\030\013 \001(\r\022%\n\035scoring_penalt"
      "y_relay_cluster\030\014 \001(\r\022\025\n\rclient_cookie\030\007"
      " \001(\007\022\023\n\013seq_num_r2c\030\010 \001(\r\022\023\n\013seq_num_s2c"
      "\030\t \001(\r\"\246\002\n.CMsgSteamDatagramConnectionSt"
      "atsRouterToServer\0220\n\003r2s\030\001 \001(\0132#.CMsgSte"
      "amDatagramConnectionQuality\0220\n\003c2s\030\002 \001(\013"
      "2#.CMsgSteamDatagramConnectionQuality\022\030\n"
      "\020client_timestamp\030\003 \001(\007\022\030\n\020router_timest"
      "amp\030\004 \001(\007\022\023\n\013seq_num_r2s\030\005 \001(\r\022\023\n\013seq_nu"
      "m_c2s\030\006 \001(\r\022\027\n\017client_steam_id\030\007 \001(\006\022\031\n\021"
      "client_session_id\030\010 \001(\r\"\362\001\n.CMsgSteamDat"
      "agramConnectionStatsServerToRouter\0220\n\003s2"
      "r\030\001 \001(\0132#.CMsgSteamDatagramConnectionQua"
      "lity\0220\n\003s2c\030\002 \001(\0132#.CMsgSteamDatagramCon"
      "nectionQuality\022\023\n\013seq_num_s2r\030\003 \001(\r\022\023\n\013s"
      "eq_num_s2c\030\004 \001(\r\022\027\n\017client_steam_id\030\005 \001("
      "\006\022\031\n\021client_session_id\030\006 \001(\r\"A\n(CMsgStea"
      "mDatagramClientPingSampleRequest\022\025\n\rclie"
      "nt_cookie\030\001 \001(\007\"\366\002\n&CMsgSteamDatagramCli"
      "entPingSampleReply\022\025\n\rclient_cookie\030\001 \001("
      "\007\022P\n\020routing_clusters\030\002 \003(\01326.CMsgSteamD"
      "atagramClientPingSampleReply.RoutingClus"
      "ter\022H\n\014data_centers\030\003 \003(\01322.CMsgSteamDat"
      "agramClientPingSampleReply.DataCenter\032H\n"
      "\016RoutingCluster\022\n\n\002id\030\001 \001(\007\022\025\n\rfront_pin"
      "g_ms\030\002 \001(\r\022\023\n\013e2e_ping_ms\030\003 \001(\r\032O\n\nDataC"
      "enter\022\026\n\016data_center_id\030\001 \001(\007\022\024\n\014via_rel"
      "ay_id\030\002 \001(\007\022\023\n\013e2e_ping_ms\030\003 \001(\r\"\216\005\n&CMs"
      "gSteamDatagramClientSwitchedPrimary\022\025\n\rc"
      "lient_cookie\030\001 \001(\007\022\017\n\007from_ip\030\002 \001(\007\022\021\n\tf"
      "rom_port\030\003 \001(\r\022\033\n\023from_router_cluster\030\004 "
      "\001(\007\022\030\n\020from_active_time\030\005 \001(\r\022 \n\030from_ac"
      "tive_packets_recv\030\006 \001(\r\022\033\n\023from_dropped_"
      "reason\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r\022O\n\020from_qua"
      "lity_now\030\t \001(\01325.CMsgSteamDatagramClient"
      "SwitchedPrimary.RouterQuality\022M\n\016to_qual"
      "ity_now\030\n \001(\01325.CMsgSteamDatagramClientS"
      "witchedPrimary.RouterQuality\022P\n\021from_qua"
      "lity_then\030\013 \001(\01325.CMsgSteamDatagramClien"
      "tSwitchedPrimary.RouterQuality\022N\n\017to_qua"
      "lity_then\030\014 \001(\01325.CMsgSteamDatagramClien"
      "tSwitchedPrimary.RouterQuality\032a\n\rRouter"
      "Quality\022\r\n\005score\030\001 \001(\r\022\022\n\nfront_ping\030\002 \001"
      "(\r\022\021\n\tback_ping\030\003 \001(\r\022\032\n\022seconds_until_d"
      "own\030\004 \001(\r\"\325\002\n\035CMsgSteamDatagramRouterHea"
      "lth\022\020\n\010cpu_load\030\001 \001(\002\022\027\n\017active_sessions"
      "\030\002 \001(\r\022\025\n\rdata_pkts_sec\030\003 \001(\r\022\026\n\016other_p"
      "kts_sec\030\004 \001(\r\022\036\n\026seconds_until_shutdown\030"
      "\005 \001(\r\022\031\n\021cpu_cost_per_user\030\010 \001(\002\022\033\n\023cpu_"
      "cost_per_packet\030\t \001(\002\022\?\n\014data_centers\030\006 "
      "\003(\0132).CMsgSteamDatagramRouterHealth.Data"
      "Center\022\r\n\005magic\030\007 \001(\006\0322\n\nDataCenter\022\025\n\rd"
      "atacenter_id\030\001 \001(\007\022\r\n\005state\030\002 \001(\r*\240\006\n\023ES"
      "teamDatagramMsgID\022\037\n\033k_ESteamDatagramMsg"
      "_Invalid\020\000\022)\n%k_ESteamDatagramMsg_Router"
      "PingRequest\020\001\022\'\n#k_ESteamDatagramMsg_Rou"
      "terPingReply\020\002\022-\n)k_ESteamDatagramMsg_Ga"
      "meserverPingRequest\020\003\022+\n\'k_ESteamDatagra"
      "mMsg_GameserverPingReply\020\004\0220\n,k_ESteamDa"
      "tagramMsg_GameserverSessionRequest\020\005\0224\n0"
      "k_ESteamDatagramMsg_GameserverSessionEst"
      "ablished\020\006\022!\n\035k_ESteamDatagramMsg_NoSess"
      "ion\020\007\022\"\n\036k_ESteamDatagramMsg_Diagnostic\020"
      "\010\022*\n&k_ESteamDatagramMsg_DataClientToRou"
      "ter\020\t\022*\n&k_ESteamDatagramMsg_DataRouterT"
      "oServer\020\n\022*\n&k_ESteamDatagramMsg_DataSer"
      "verToRouter\020\013\022*\n&k_ESteamDatagramMsg_Dat"
      "aRouterToClient\020\014\022\035\n\031k_ESteamDatagramMsg"
      "_Stats\020\r\022/\n+k_ESteamDatagramMsg_ClientPi"
      "ngSampleRequest\020\016\022-\n)k_ESteamDatagramMsg"
      "_ClientPingSampleReply\020\017\0225\n1k_ESteamData"
      "gramMsg_ClientToRouterSwitchedPrimary\020\020\022"
      "#\n\037k_ESteamDatagramMsg_RelayHealth\020\021B\003\200\001"
      "\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steamdatagram_messages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_steamdatagram_5fmessages_2eproto
const ::google::protobuf::EnumDescriptor* ESteamDatagramMsgID_descriptor() {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steamdatagram_5fmessages_2eproto::file_level_enum_descriptors[0];
}
bool ESteamDatagramMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgSteamDatagramRouterPingReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterPingReply::kClientTimestampFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kLatencyPingMsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kServerTimeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kChallengeFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyDatacenterIdsFieldNumber;
const int CMsgSteamDatagramRouterPingReply::kScoringPenaltyValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterPingReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramRouterPingReply)
}
CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(const CMsgSteamDatagramRouterPingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      latency_datacenter_ids_(from.latency_datacenter_ids_),
      latency_ping_ms_(from.latency_ping_ms_),
      scoring_penalty_datacenter_ids_(from.scoring_penalty_datacenter_ids_),
      scoring_penalty_values_(from.scoring_penalty_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_timestamp_, &from.client_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply)
}

void CMsgSteamDatagramRouterPingReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
      reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
}

CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply)
  SharedDtor();
}

void CMsgSteamDatagramRouterPingReply::SharedDtor() {
}

void CMsgSteamDatagramRouterPingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterPingReply::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramRouterPingReply& CMsgSteamDatagramRouterPingReply::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterPingReply();
  return *internal_default_instance();
}

CMsgSteamDatagramRouterPingReply* CMsgSteamDatagramRouterPingReply::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramRouterPingReply* n = new CMsgSteamDatagramRouterPingReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramRouterPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latency_datacenter_ids_.Clear();
  latency_ping_ms_.Clear();
  scoring_penalty_datacenter_ids_.Clear();
  scoring_penalty_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&client_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
        reinterpret_cast<char*>(&client_timestamp_)) + sizeof(scoring_penalty_relay_cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramRouterPingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramRouterPingReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_latency_datacenter_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 18u, input, this->mutable_latency_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 latency_ping_ms = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latency_ping_ms())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_latency_ping_ms())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 your_public_ip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_your_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_seconds_until_shutdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_scoring_penalty_relay_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_scoring_penalty_datacenter_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 82u, input, this->mutable_scoring_penalty_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 scoring_penalty_values = 11 [packed = true];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_scoring_penalty_values())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_scoring_penalty_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramRouterPingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramRouterPingReply)
  return false;
#undef DO_
}

void CMsgSteamDatagramRouterPingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_timestamp(), output);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _latency_datacenter_ids_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->latency_datacenter_ids().data(), this->latency_datacenter_ids_size(), output);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _latency_ping_ms_cached_byte_size_));
  }
  for (int i = 0, n = this->latency_ping_ms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latency_ping_ms(i), output);
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->server_time(), output);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scoring_penalty_relay_cluster(), output);
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  if (this->scoring_penalty_datacenter_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _scoring_penalty_datacenter_ids_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->scoring_penalty_datacenter_ids().data(), this->scoring_penalty_datacenter_ids_size(), output);
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  if (this->scoring_penalty_values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _scoring_penalty_values_cached_byte_size_));
  }
  for (int i = 0, n = this->scoring_penalty_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->scoring_penalty_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramRouterPingReply)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterPingReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this->latency_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _latency_datacenter_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->latency_datacenter_ids_, target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  if (this->latency_ping_ms_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _latency_ping_ms_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latency_ping_ms_, target);
  }

  // optional fixed32 your_public_ip = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  if (this->scoring_penalty_datacenter_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _scoring_penalty_datacenter_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->scoring_penalty_datacenter_ids_, target);
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  if (this->scoring_penalty_values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _scoring_penalty_values_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->scoring_penalty_values_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply)
  return target;
}

size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->latency_datacenter_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_datacenter_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->latency_ping_ms_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latency_ping_ms_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed32 scoring_penalty_datacenter_ids = 10 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->scoring_penalty_datacenter_ids_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scoring_penalty_datacenter_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 scoring_penalty_values = 11 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->scoring_penalty_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scoring_penalty_values_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional fixed32 client_timestamp = 1;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 your_public_ip = 4;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 6;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 server_time = 5;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 7;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 8;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 scoring_penalty_relay_cluster = 9;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterPingReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramRouterPingReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterPingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterPingReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterPingReply::MergeFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  latency_datacenter_ids_.MergeFrom(from.latency_datacenter_ids_);
  latency_ping_ms_.MergeFrom(from.latency_ping_ms_);
  scoring_penalty_datacenter_ids_.MergeFrom(from.scoring_penalty_datacenter_ids_);
  scoring_penalty_values_.MergeFrom(from.scoring_penalty_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000040u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterPingReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterPingReply::Swap(CMsgSteamDatagramRouterPingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterPingReply::InternalSwap(CMsgSteamDatagramRouterPingReply* other) {
  using std::swap;
  latency_datacenter_ids_.InternalSwap(&other->latency_datacenter_ids_);
  latency_ping_ms_.InternalSwap(&other->latency_ping_ms_);
  scoring_penalty_datacenter_ids_.InternalSwap(&other->scoring_penalty_datacenter_ids_);
  scoring_penalty_values_.InternalSwap(&other->scoring_penalty_values_);
  swap(client_timestamp_, other->client_timestamp_);
  swap(your_public_ip_, other->your_public_ip_);
  swap(challenge_, other->challenge_);
  swap(server_time_, other->server_time_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(client_cookie_, other->client_cookie_);
  swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverPing::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverPing::kClientSessionFieldNumber;
const int CMsgSteamDatagramGameserverPing::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverPing::kClientTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramGameserverPing::kRouterGameserverLatencyFieldNumber;
const int CMsgSteamDatagramGameserverPing::kSeqNumberRouterFieldNumber;
const int CMsgSteamDatagramGameserverPing::kSeqNumberE2EFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverPing();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramGameserverPing)
}
CMsgSteamDatagramGameserverPing::CMsgSteamDatagramGameserverPing(const CMsgSteamDatagramGameserverPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_steam_id_, &from.client_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_number_e2e_) -
    reinterpret_cast<char*>(&client_steam_id_)) + sizeof(seq_number_e2e_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPing)
}

void CMsgSteamDatagramGameserverPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_number_e2e_) -
      reinterpret_cast<char*>(&client_steam_id_)) + sizeof(seq_number_e2e_));
}

CMsgSteamDatagramGameserverPing::~CMsgSteamDatagramGameserverPing() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPing)
  SharedDtor();
}

void CMsgSteamDatagramGameserverPing::SharedDtor() {
}

void CMsgSteamDatagramGameserverPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverPing::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramGameserverPing& CMsgSteamDatagramGameserverPing::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverPing();
  return *internal_default_instance();
}

CMsgSteamDatagramGameserverPing* CMsgSteamDatagramGameserverPing::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramGameserverPing* n = new CMsgSteamDatagramGameserverPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramGameserverPing::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&client_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_number_e2e_) -
        reinterpret_cast<char*>(&client_steam_id_)) + sizeof(seq_number_e2e_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramGameserverPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramGameserverPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_client_session();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_client_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_router_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 router_gameserver_latency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_router_gameserver_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_gameserver_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_number_router = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seq_number_router();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_number_router_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_number_e2e = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_seq_number_e2e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_number_e2e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramGameserverPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramGameserverPing)
  return false;
#undef DO_
}

void CMsgSteamDatagramGameserverPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_session = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_session(), output);
  }

  // optional fixed64 client_steam_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->client_steam_id(), output);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->router_gameserver_latency(), output);
  }

  // optional uint32 seq_number_router = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_number_router(), output);
  }

  // optional uint32 seq_number_e2e = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seq_number_e2e(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramGameserverPing)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_session = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_session(), target);
  }

  // optional fixed64 client_steam_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->client_steam_id(), target);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->router_gameserver_latency(), target);
  }

  // optional uint32 seq_number_router = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_number_router(), target);
  }

  // optional uint32 seq_number_e2e = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seq_number_e2e(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPing)
  return target;
}

size_t CMsgSteamDatagramGameserverPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional fixed64 client_steam_id = 2;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_session = 1;
    if (has_client_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session());
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 router_timestamp = 4;
    if (has_router_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 router_gameserver_latency = 5;
    if (has_router_gameserver_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->router_gameserver_latency());
    }

    // optional uint32 seq_number_router = 6;
    if (has_seq_number_router()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_number_router());
    }

    // optional uint32 seq_number_e2e = 7;
    if (has_seq_number_e2e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_number_e2e());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramGameserverPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverPing)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverPing::MergeFrom(const CMsgSteamDatagramGameserverPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_session_ = from.client_session_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      router_gameserver_latency_ = from.router_gameserver_latency_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_number_router_ = from.seq_number_router_;
    }
    if (cached_has_bits & 0x00000040u) {
      seq_number_e2e_ = from.seq_number_e2e_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverPing::CopyFrom(const CMsgSteamDatagramGameserverPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverPing::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverPing::Swap(CMsgSteamDatagramGameserverPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverPing::InternalSwap(CMsgSteamDatagramGameserverPing* other) {
  using std::swap;
  swap(client_steam_id_, other->client_steam_id_);
  swap(client_session_, other->client_session_);
  swap(client_timestamp_, other->client_timestamp_);
  swap(router_timestamp_, other->router_timestamp_);
  swap(router_gameserver_latency_, other->router_gameserver_latency_);
  swap(seq_number_router_, other->seq_number_router_);
  swap(seq_number_e2e_, other->seq_number_e2e_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPing::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kNameFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kStringValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kInt32ValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kFixed32ValueFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket_ExtraField::kFixed64ValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameServerAuthTicket_ExtraField::CMsgSteamDatagramGameServerAuthTicket_ExtraField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraField();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
}
CMsgSteamDatagramGameServerAuthTicket_ExtraField::CMsgSteamDatagramGameServerAuthTicket_ExtraField(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&int32_value_, &from.int32_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixed64_value_) -
    reinterpret_cast<char*>(&int32_value_)) + sizeof(fixed64_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&int32_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixed64_value_) -
      reinterpret_cast<char*>(&int32_value_)) + sizeof(fixed64_value_));
}

CMsgSteamDatagramGameServerAuthTicket_ExtraField::~CMsgSteamDatagramGameServerAuthTicket_ExtraField() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  SharedDtor();
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket_ExtraField::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramGameServerAuthTicket_ExtraField& CMsgSteamDatagramGameServerAuthTicket_ExtraField::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket_ExtraField();
  return *internal_default_instance();
}

CMsgSteamDatagramGameServerAuthTicket_ExtraField* CMsgSteamDatagramGameServerAuthTicket_ExtraField::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramGameServerAuthTicket_ExtraField* n = new CMsgSteamDatagramGameServerAuthTicket_ExtraField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!string_value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*string_value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&int32_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixed64_value_) -
        reinterpret_cast<char*>(&int32_value_)) + sizeof(fixed64_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramGameServerAuthTicket.ExtraField.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramGameServerAuthTicket.ExtraField.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 int32_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_int32_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &int32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 fixed32_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_fixed32_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &fixed32_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 fixed64_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_fixed64_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &fixed64_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  return false;
#undef DO_
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameServerAuthTicket.ExtraField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameServerAuthTicket.ExtraField.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->string_value(), output);
  }

  // optional sint32 int32_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->int32_value(), output);
  }

  // optional fixed32 fixed32_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->fixed32_value(), output);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->fixed64_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
}

::google::protobuf::uint8* CMsgSteamDatagramGameServerAuthTicket_ExtraField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameServerAuthTicket.ExtraField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string string_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramGameServerAuthTicket.ExtraField.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->string_value(), target);
  }

  // optional sint32 int32_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->int32_value(), target);
  }

  // optional fixed32 fixed32_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->fixed32_value(), target);
  }

  // optional fixed64 fixed64_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->fixed64_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  return target;
}

size_t CMsgSteamDatagramGameServerAuthTicket_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional sint32 int32_value = 3;
    if (has_int32_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->int32_value());
    }

    // optional fixed32 fixed32_value = 4;
    if (has_fixed32_value()) {
      total_size += 1 + 4;
    }

    // optional fixed64 fixed64_value = 5;
    if (has_fixed64_value()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameServerAuthTicket_ExtraField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramGameServerAuthTicket_ExtraField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::MergeFrom(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_string_value();
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      int32_value_ = from.int32_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      fixed32_value_ = from.fixed32_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      fixed64_value_ = from.fixed64_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::CopyFrom(const CMsgSteamDatagramGameServerAuthTicket_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameServerAuthTicket.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameServerAuthTicket_ExtraField::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameServerAuthTicket_ExtraField::Swap(CMsgSteamDatagramGameServerAuthTicket_ExtraField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameServerAuthTicket_ExtraField::InternalSwap(CMsgSteamDatagramGameServerAuthTicket_ExtraField* other) {
  using std::swap;
  name_.Swap(&other->name_);
  string_value_.Swap(&other->string_value_);
  swap(int32_value_, other->int32_value_);
  swap(fixed32_value_, other->fixed32_value_);
  swap(fixed64_value_, other->fixed64_value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameServerAuthTicket_ExtraField::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameServerAuthTicket::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameServerAuthTicket::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAuthorizedSteamIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAuthorizedPublicIpFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kGameserverNetIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kSignatureFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kAppIdFieldNumber;
const int CMsgSteamDatagramGameServerAuthTicket::kExtraFieldsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameServerAuthTicket::CMsgSteamDatagramGameServerAuthTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramGameServerAuthTicket)
}
CMsgSteamDatagramGameServerAuthTicket::CMsgSteamDatagramGameServerAuthTicket(const CMsgSteamDatagramGameServerAuthTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      extra_fields_(from.extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&authorized_steam_id_, &from.authorized_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&app_id_) -
    reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameServerAuthTicket)
}

void CMsgSteamDatagramGameServerAuthTicket::SharedCtor() {
  _cached_size_ = 0;
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&app_id_) -
      reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(app_id_));
}

CMsgSteamDatagramGameServerAuthTicket::~CMsgSteamDatagramGameServerAuthTicket() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameServerAuthTicket)
  SharedDtor();
}

void CMsgSteamDatagramGameServerAuthTicket::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramGameServerAuthTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameServerAuthTicket::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramGameServerAuthTicket& CMsgSteamDatagramGameServerAuthTicket::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameServerAuthTicket();
  return *internal_default_instance();
}

CMsgSteamDatagramGameServerAuthTicket* CMsgSteamDatagramGameServerAuthTicket::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramGameServerAuthTicket* n = new CMsgSteamDatagramGameServerAuthTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramGameServerAuthTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameServerAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*signature_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&authorized_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&app_id_) -
        reinterpret_cast<char*>(&authorized_steam_id_)) + sizeof(app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramGameServerAuthTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramGameServerAuthTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 time_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_time_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 authorized_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_authorized_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 authorized_public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_authorized_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_gameserver_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_net_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_gameserver_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramGameServerAuthTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramGameServerAuthTicket)
  return false;
#undef DO_
}

void CMsgSteamDatagramGameServerAuthTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramGameServerAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->time_expiry(), output);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->authorized_steam_id(), output);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->authorized_public_ip(), output);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->gameserver_steam_id(), output);
  }

  // optional fixed64 gameserver_net_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->gameserver_net_id(), output);
  }

  // optional bytes signature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->signature(), output);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->app_id(), output);
  }

  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extra_fields(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramGameServerAuthTicket)
}

::google::protobuf::uint8* CMsgSteamDatagramGameServerAuthTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameServerAuthTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 time_expiry = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->time_expiry(), target);
  }

  // optional fixed64 authorized_steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->authorized_steam_id(), target);
  }

  // optional fixed32 authorized_public_ip = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->authorized_public_ip(), target);
  }

  // optional fixed64 gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->gameserver_steam_id(), target);
  }

  // optional fixed64 gameserver_net_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->gameserver_net_id(), target);
  }

  // optional bytes signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->signature(), target);
  }

  // optional uint32 app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->app_id(), target);
  }

  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->extra_fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->extra_fields(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameServerAuthTicket)
  return target;
}

size_t CMsgSteamDatagramGameServerAuthTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameServerAuthTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramGameServerAuthTicket.ExtraField extra_fields = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->extra_fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->extra_fields(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes signature = 6;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional fixed64 authorized_steam_id = 2;
    if (has_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 time_expiry = 1;
    if (has_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional fixed32 authorized_public_ip = 3;
    if (has_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 gameserver_steam_id = 4;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 gameserver_net_id = 5;
    if (has_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 7;
    if (has_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameServerAuthTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameServerAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameServerAuthTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramGameServerAuthTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameServerAuthTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameServerAuthTicket)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameServerAuthTicket::MergeFrom(const CMsgSteamDatagramGameServerAuthTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameServerAuthTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      authorized_steam_id_ = from.authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_expiry_ = from.time_expiry_;
    }
    if (cached_has_bits & 0x00000008u) {
      authorized_public_ip_ = from.authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gameserver_net_id_ = from.gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameServerAuthTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameServerAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameServerAuthTicket::CopyFrom(const CMsgSteamDatagramGameServerAuthTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameServerAuthTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameServerAuthTicket::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameServerAuthTicket::Swap(CMsgSteamDatagramGameServerAuthTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameServerAuthTicket::InternalSwap(CMsgSteamDatagramGameServerAuthTicket* other) {
  using std::swap;
  extra_fields_.InternalSwap(&other->extra_fields_);
  signature_.Swap(&other->signature_);
  swap(authorized_steam_id_, other->authorized_steam_id_);
  swap(time_expiry_, other->time_expiry_);
  swap(authorized_public_ip_, other->authorized_public_ip_);
  swap(gameserver_steam_id_, other->gameserver_steam_id_);
  swap(gameserver_net_id_, other->gameserver_net_id_);
  swap(app_id_, other->app_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameServerAuthTicket::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverSessionRequest::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramGameserverSessionRequest_default_instance_._instance.get_mutable()->ticket_ = const_cast< ::CMsgSteamDatagramGameServerAuthTicket*>(
      ::CMsgSteamDatagramGameServerAuthTicket::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverSessionRequest::kTicketFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeTimeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kChallengeFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kClientCookieFieldNumber;
const int CMsgSteamDatagramGameserverSessionRequest::kNetworkConfigVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramGameserverSessionRequest)
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(const CMsgSteamDatagramGameserverSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ticket()) {
    ticket_ = new ::CMsgSteamDatagramGameServerAuthTicket(*from.ticket_);
  } else {
    ticket_ = NULL;
  }
  ::memcpy(&challenge_, &from.challenge_,
    static_cast<size_t>(reinterpret_cast<char*>(&network_config_version_) -
    reinterpret_cast<char*>(&challenge_)) + sizeof(network_config_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionRequest)
}

void CMsgSteamDatagramGameserverSessionRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ticket_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&network_config_version_) -
      reinterpret_cast<char*>(&ticket_)) + sizeof(network_config_version_));
}

CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionRequest)
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete ticket_;
}

void CMsgSteamDatagramGameserverSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionRequest::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramGameserverSessionRequest& CMsgSteamDatagramGameserverSessionRequest::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverSessionRequest();
  return *internal_default_instance();
}

CMsgSteamDatagramGameserverSessionRequest* CMsgSteamDatagramGameserverSessionRequest::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramGameserverSessionRequest* n = new CMsgSteamDatagramGameserverSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramGameserverSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ticket_ != NULL);
    ticket_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&challenge_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&network_config_version_) -
        reinterpret_cast<char*>(&challenge_)) + sizeof(network_config_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramGameserverSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramGameserverSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 challenge_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_challenge_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &challenge_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 network_config_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_network_config_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &network_config_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramGameserverSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramGameserverSessionRequest)
  return false;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->ticket_, output);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->challenge_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional fixed32 client_cookie = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->client_cookie(), output);
  }

  // optional uint32 network_config_version = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->network_config_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramGameserverSessionRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->ticket_, deterministic, target);
  }

  // optional fixed32 challenge_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional fixed32 client_cookie = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->client_cookie(), target);
  }

  // optional uint32 network_config_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->network_config_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionRequest)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgSteamDatagramGameServerAuthTicket ticket = 1;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->ticket_);
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional fixed32 challenge_time = 3;
    if (has_challenge_time()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_cookie = 5;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 network_config_version = 6;
    if (has_network_config_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->network_config_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramGameserverSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverSessionRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionRequest::MergeFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ticket()->::CMsgSteamDatagramGameServerAuthTicket::MergeFrom(from.ticket());
    }
    if (cached_has_bits & 0x00000002u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_time_ = from.challenge_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000010u) {
      network_config_version_ = from.network_config_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionRequest::Swap(CMsgSteamDatagramGameserverSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverSessionRequest::InternalSwap(CMsgSteamDatagramGameserverSessionRequest* other) {
  using std::swap;
  swap(ticket_, other->ticket_);
  swap(challenge_, other->challenge_);
  swap(challenge_time_, other->challenge_time_);
  swap(client_cookie_, other->client_cookie_);
  swap(network_config_version_, other->network_config_version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramGameserverSessionEstablished::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramGameserverSessionEstablished::kClientCookieFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kGameserverSteamIdFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramGameserverSessionEstablished::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverSessionEstablished();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(const CMsgSteamDatagramGameserverSessionEstablished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_cookie_, &from.client_cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&session_id_) -
    reinterpret_cast<char*>(&client_cookie_)) + sizeof(session_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&client_cookie_)) + sizeof(session_id_));
}

CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionEstablished)
  SharedDtor();
}

void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor() {
}

void CMsgSteamDatagramGameserverSessionEstablished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramGameserverSessionEstablished::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramGameserverSessionEstablished& CMsgSteamDatagramGameserverSessionEstablished::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramGameserverSessionEstablished();
  return *internal_default_instance();
}

CMsgSteamDatagramGameserverSessionEstablished* CMsgSteamDatagramGameserverSessionEstablished::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramGameserverSessionEstablished* n = new CMsgSteamDatagramGameserverSessionEstablished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&client_cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&client_cookie_)) + sizeof(session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramGameserverSessionEstablished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramGameserverSessionEstablished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 gameserver_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_gameserver_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_seconds_until_shutdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 session_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramGameserverSessionEstablished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramGameserverSessionEstablished)
  return false;
#undef DO_
}

void CMsgSteamDatagramGameserverSessionEstablished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->gameserver_steam_id(), output);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_shutdown(), output);
  }

  // optional uint32 session_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramGameserverSessionEstablished)
}

::google::protobuf::uint8* CMsgSteamDatagramGameserverSessionEstablished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // optional fixed64 gameserver_steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->gameserver_steam_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_shutdown(), target);
  }

  // optional uint32 session_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionEstablished)
  return target;
}

size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionEstablished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 seconds_until_shutdown = 4;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed64 gameserver_steam_id = 3;
    if (has_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->session_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramGameserverSessionEstablished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramGameserverSessionEstablished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramGameserverSessionEstablished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramGameserverSessionEstablished)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000002u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000004u) {
      gameserver_steam_id_ = from.gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      session_id_ = from.session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramGameserverSessionEstablished::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramGameserverSessionEstablished::Swap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramGameserverSessionEstablished::InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* other) {
  using std::swap;
  swap(client_cookie_, other->client_cookie_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(gameserver_steam_id_, other->gameserver_steam_id_);
  swap(session_id_, other->session_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramNoSession::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramNoSession::kClientCookieFieldNumber;
const int CMsgSteamDatagramNoSession::kYourPublicIpFieldNumber;
const int CMsgSteamDatagramNoSession::kServerTimeFieldNumber;
const int CMsgSteamDatagramNoSession::kChallengeFieldNumber;
const int CMsgSteamDatagramNoSession::kSecondsUntilShutdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramNoSession::CMsgSteamDatagramNoSession()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramNoSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramNoSession)
}
CMsgSteamDatagramNoSession::CMsgSteamDatagramNoSession(const CMsgSteamDatagramNoSession& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&your_public_ip_, &from.your_public_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_cookie_) -
    reinterpret_cast<char*>(&your_public_ip_)) + sizeof(client_cookie_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoSession)
}

void CMsgSteamDatagramNoSession::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&your_public_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_cookie_) -
      reinterpret_cast<char*>(&your_public_ip_)) + sizeof(client_cookie_));
}

CMsgSteamDatagramNoSession::~CMsgSteamDatagramNoSession() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSession)
  SharedDtor();
}

void CMsgSteamDatagramNoSession::SharedDtor() {
}

void CMsgSteamDatagramNoSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramNoSession::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramNoSession& CMsgSteamDatagramNoSession::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramNoSession();
  return *internal_default_instance();
}

CMsgSteamDatagramNoSession* CMsgSteamDatagramNoSession::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramNoSession* n = new CMsgSteamDatagramNoSession;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramNoSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&your_public_ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_cookie_) -
        reinterpret_cast<char*>(&your_public_ip_)) + sizeof(client_cookie_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramNoSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramNoSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 your_public_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_your_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &your_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_server_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 challenge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_challenge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &challenge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_seconds_until_shutdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramNoSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramNoSession)
  return false;
#undef DO_
}

void CMsgSteamDatagramNoSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramNoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->your_public_ip(), output);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->server_time(), output);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->challenge(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_cookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramNoSession)
}

::google::protobuf::uint8* CMsgSteamDatagramNoSession::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSession)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_cookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSession)
  return target;
}

size_t CMsgSteamDatagramNoSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSession)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional fixed32 your_public_ip = 2;
    if (has_your_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_time = 3;
    if (has_server_time()) {
      total_size += 1 + 4;
    }

    // optional fixed64 challenge = 4;
    if (has_challenge()) {
      total_size += 1 + 8;
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 7;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramNoSession::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramNoSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramNoSession* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramNoSession>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramNoSession)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramNoSession)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramNoSession::MergeFrom(const CMsgSteamDatagramNoSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      your_public_ip_ = from.your_public_ip_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_time_ = from.server_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_ = from.challenge_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_cookie_ = from.client_cookie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramNoSession::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramNoSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramNoSession::CopyFrom(const CMsgSteamDatagramNoSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramNoSession::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramNoSession::Swap(CMsgSteamDatagramNoSession* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramNoSession::InternalSwap(CMsgSteamDatagramNoSession* other) {
  using std::swap;
  swap(your_public_ip_, other->your_public_ip_);
  swap(server_time_, other->server_time_);
  swap(challenge_, other->challenge_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(client_cookie_, other->client_cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramNoSession::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDiagnostic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDiagnostic::kSeverityFieldNumber;
const int CMsgSteamDatagramDiagnostic::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDiagnostic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramDiagnostic)
}
CMsgSteamDatagramDiagnostic::CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  severity_ = from.severity_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDiagnostic)
}

void CMsgSteamDatagramDiagnostic::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  severity_ = 0u;
}

CMsgSteamDatagramDiagnostic::~CMsgSteamDatagramDiagnostic() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDiagnostic)
  SharedDtor();
}

void CMsgSteamDatagramDiagnostic::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDiagnostic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDiagnostic::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramDiagnostic& CMsgSteamDatagramDiagnostic::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDiagnostic();
  return *internal_default_instance();
}

CMsgSteamDatagramDiagnostic* CMsgSteamDatagramDiagnostic::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramDiagnostic* n = new CMsgSteamDatagramDiagnostic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramDiagnostic::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  severity_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramDiagnostic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramDiagnostic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 severity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_severity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &severity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramDiagnostic.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramDiagnostic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramDiagnostic)
  return false;
#undef DO_
}

void CMsgSteamDatagramDiagnostic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->severity(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDiagnostic.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramDiagnostic)
}

::google::protobuf::uint8* CMsgSteamDatagramDiagnostic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDiagnostic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 severity = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->severity(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDiagnostic.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDiagnostic)
  return target;
}

size_t CMsgSteamDatagramDiagnostic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDiagnostic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 severity = 1;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->severity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDiagnostic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramDiagnostic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDiagnostic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDiagnostic)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDiagnostic::MergeFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDiagnostic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      severity_ = from.severity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDiagnostic::CopyFrom(const CMsgSteamDatagramDiagnostic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDiagnostic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDiagnostic::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDiagnostic::Swap(CMsgSteamDatagramDiagnostic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDiagnostic::InternalSwap(CMsgSteamDatagramDiagnostic* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(severity_, other->severity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramDiagnostic::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState_Server::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState_Server::kAddressFieldNumber;
const int CMsgSteamDatagramDataCenterState_Server::kPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_Server();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramDataCenterState.Server)
}
CMsgSteamDatagramDataCenterState_Server::CMsgSteamDatagramDataCenterState_Server(const CMsgSteamDatagramDataCenterState_Server& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ping_ms_ = from.ping_ms_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDataCenterState.Server)
}

void CMsgSteamDatagramDataCenterState_Server::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ping_ms_ = 0u;
}

CMsgSteamDatagramDataCenterState_Server::~CMsgSteamDatagramDataCenterState_Server() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDataCenterState.Server)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_Server::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDataCenterState_Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_Server::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramDataCenterState_Server& CMsgSteamDatagramDataCenterState_Server::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_Server();
  return *internal_default_instance();
}

CMsgSteamDatagramDataCenterState_Server* CMsgSteamDatagramDataCenterState_Server::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramDataCenterState_Server* n = new CMsgSteamDatagramDataCenterState_Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramDataCenterState_Server::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  ping_ms_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramDataCenterState_Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramDataCenterState.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramDataCenterState.Server.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramDataCenterState.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramDataCenterState.Server)
  return false;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDataCenterState.Server.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramDataCenterState.Server)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDataCenterState.Server)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDataCenterState.Server.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional uint32 ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDataCenterState.Server)
  return target;
}

size_t CMsgSteamDatagramDataCenterState_Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDataCenterState.Server)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 ping_ms = 2;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDataCenterState.Server)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_Server* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramDataCenterState_Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDataCenterState.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDataCenterState.Server)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_Server::MergeFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDataCenterState.Server)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ms_ = from.ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDataCenterState.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_Server::CopyFrom(const CMsgSteamDatagramDataCenterState_Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDataCenterState.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_Server::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState_Server::Swap(CMsgSteamDatagramDataCenterState_Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState_Server::InternalSwap(CMsgSteamDatagramDataCenterState_Server* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(ping_ms_, other->ping_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_Server::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState_DataCenter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState_DataCenter::kCodeFieldNumber;
const int CMsgSteamDatagramDataCenterState_DataCenter::kServerSampleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramDataCenterState.DataCenter)
}
CMsgSteamDatagramDataCenterState_DataCenter::CMsgSteamDatagramDataCenterState_DataCenter(const CMsgSteamDatagramDataCenterState_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      server_sample_(from.server_sample_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDataCenterState.DataCenter)
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSteamDatagramDataCenterState_DataCenter::~CMsgSteamDatagramDataCenterState_DataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDataCenterState.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState_DataCenter::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramDataCenterState_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState_DataCenter::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramDataCenterState_DataCenter& CMsgSteamDatagramDataCenterState_DataCenter::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState_DataCenter();
  return *internal_default_instance();
}

CMsgSteamDatagramDataCenterState_DataCenter* CMsgSteamDatagramDataCenterState_DataCenter::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramDataCenterState_DataCenter* n = new CMsgSteamDatagramDataCenterState_DataCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_sample_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*code_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramDataCenterState_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramDataCenterState.DataCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramDataCenterState.DataCenter.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_server_sample()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramDataCenterState.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramDataCenterState.DataCenter)
  return false;
#undef DO_
}

void CMsgSteamDatagramDataCenterState_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDataCenterState.DataCenter.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code(), output);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_sample_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server_sample(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramDataCenterState.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState_DataCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDataCenterState.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramDataCenterState.DataCenter.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->server_sample_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->server_sample(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDataCenterState.DataCenter)
  return target;
}

size_t CMsgSteamDatagramDataCenterState_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDataCenterState.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramDataCenterState.Server server_sample = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->server_sample_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->server_sample(static_cast<int>(i)));
    }
  }

  // optional string code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDataCenterState.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState_DataCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramDataCenterState_DataCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDataCenterState.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDataCenterState.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::MergeFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDataCenterState.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  server_sample_.MergeFrom(from.server_sample_);
  if (from.has_code()) {
    set_has_code();
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDataCenterState.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState_DataCenter::CopyFrom(const CMsgSteamDatagramDataCenterState_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDataCenterState.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState_DataCenter::Swap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState_DataCenter::InternalSwap(CMsgSteamDatagramDataCenterState_DataCenter* other) {
  using std::swap;
  server_sample_.InternalSwap(&other->server_sample_);
  code_.Swap(&other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState_DataCenter::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramDataCenterState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramDataCenterState::kDataCentersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramDataCenterState)
}
CMsgSteamDatagramDataCenterState::CMsgSteamDatagramDataCenterState(const CMsgSteamDatagramDataCenterState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramDataCenterState)
}

void CMsgSteamDatagramDataCenterState::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSteamDatagramDataCenterState::~CMsgSteamDatagramDataCenterState() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramDataCenterState)
  SharedDtor();
}

void CMsgSteamDatagramDataCenterState::SharedDtor() {
}

void CMsgSteamDatagramDataCenterState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramDataCenterState::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramDataCenterState& CMsgSteamDatagramDataCenterState::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramDataCenterState();
  return *internal_default_instance();
}

CMsgSteamDatagramDataCenterState* CMsgSteamDatagramDataCenterState::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramDataCenterState* n = new CMsgSteamDatagramDataCenterState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramDataCenterState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_centers_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramDataCenterState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramDataCenterState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramDataCenterState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramDataCenterState)
  return false;
#undef DO_
}

void CMsgSteamDatagramDataCenterState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_centers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramDataCenterState)
}

::google::protobuf::uint8* CMsgSteamDatagramDataCenterState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramDataCenterState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data_centers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramDataCenterState)
  return target;
}

size_t CMsgSteamDatagramDataCenterState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramDataCenterState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramDataCenterState.DataCenter data_centers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramDataCenterState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramDataCenterState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramDataCenterState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramDataCenterState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramDataCenterState)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramDataCenterState::MergeFrom(const CMsgSteamDatagramDataCenterState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramDataCenterState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_centers_.MergeFrom(from.data_centers_);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramDataCenterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramDataCenterState::CopyFrom(const CMsgSteamDatagramDataCenterState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramDataCenterState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramDataCenterState::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramDataCenterState::Swap(CMsgSteamDatagramDataCenterState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramDataCenterState::InternalSwap(CMsgSteamDatagramDataCenterState* other) {
  using std::swap;
  data_centers_.InternalSwap(&other->data_centers_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramDataCenterState::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkInstantaneousStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkInstantaneousStats::kOutPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kOutBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInPacketsPerSecX10FieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kInBytesPerSecFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPingMsFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsDroppedPctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPacketsWeirdSequencePctFieldNumber;
const int CMsgSteamDatagramLinkInstantaneousStats::kPeakJitterUsecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramLinkInstantaneousStats)
}
CMsgSteamDatagramLinkInstantaneousStats::CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&out_packets_per_sec_x10_, &from.out_packets_per_sec_x10_,
    static_cast<size_t>(reinterpret_cast<char*>(&peak_jitter_usec_) -
    reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkInstantaneousStats)
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peak_jitter_usec_) -
      reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
}

CMsgSteamDatagramLinkInstantaneousStats::~CMsgSteamDatagramLinkInstantaneousStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkInstantaneousStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkInstantaneousStats::SharedDtor() {
}

void CMsgSteamDatagramLinkInstantaneousStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkInstantaneousStats::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramLinkInstantaneousStats::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkInstantaneousStats();
  return *internal_default_instance();
}

CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramLinkInstantaneousStats::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramLinkInstantaneousStats* n = new CMsgSteamDatagramLinkInstantaneousStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramLinkInstantaneousStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&out_packets_per_sec_x10_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&peak_jitter_usec_) -
        reinterpret_cast<char*>(&out_packets_per_sec_x10_)) + sizeof(peak_jitter_usec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramLinkInstantaneousStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramLinkInstantaneousStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 out_packets_per_sec_x10 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_out_packets_per_sec_x10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 out_bytes_per_sec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_out_bytes_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &out_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_packets_per_sec_x10 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_in_packets_per_sec_x10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_packets_per_sec_x10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_bytes_per_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_in_bytes_per_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_bytes_per_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ms = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_dropped_pct = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_packets_dropped_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_dropped_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 packets_weird_sequence_pct = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_packets_weird_sequence_pct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packets_weird_sequence_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 peak_jitter_usec = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_peak_jitter_usec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peak_jitter_usec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramLinkInstantaneousStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramLinkInstantaneousStats)
  return false;
#undef DO_
}

void CMsgSteamDatagramLinkInstantaneousStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->out_packets_per_sec_x10(), output);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->out_bytes_per_sec(), output);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_packets_per_sec_x10(), output);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_bytes_per_sec(), output);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ping_ms(), output);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->packets_dropped_pct(), output);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->packets_weird_sequence_pct(), output);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->peak_jitter_usec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramLinkInstantaneousStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkInstantaneousStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkInstantaneousStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 out_packets_per_sec_x10 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->out_packets_per_sec_x10(), target);
  }

  // optional uint32 out_bytes_per_sec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->out_bytes_per_sec(), target);
  }

  // optional uint32 in_packets_per_sec_x10 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_packets_per_sec_x10(), target);
  }

  // optional uint32 in_bytes_per_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_bytes_per_sec(), target);
  }

  // optional uint32 ping_ms = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ping_ms(), target);
  }

  // optional uint32 packets_dropped_pct = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->packets_dropped_pct(), target);
  }

  // optional uint32 packets_weird_sequence_pct = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->packets_weird_sequence_pct(), target);
  }

  // optional uint32 peak_jitter_usec = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->peak_jitter_usec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkInstantaneousStats)
  return target;
}

size_t CMsgSteamDatagramLinkInstantaneousStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkInstantaneousStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 out_packets_per_sec_x10 = 1;
    if (has_out_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_packets_per_sec_x10());
    }

    // optional uint32 out_bytes_per_sec = 2;
    if (has_out_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->out_bytes_per_sec());
    }

    // optional uint32 in_packets_per_sec_x10 = 3;
    if (has_in_packets_per_sec_x10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_packets_per_sec_x10());
    }

    // optional uint32 in_bytes_per_sec = 4;
    if (has_in_bytes_per_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_bytes_per_sec());
    }

    // optional uint32 ping_ms = 5;
    if (has_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ms());
    }

    // optional uint32 packets_dropped_pct = 6;
    if (has_packets_dropped_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_dropped_pct());
    }

    // optional uint32 packets_weird_sequence_pct = 7;
    if (has_packets_weird_sequence_pct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packets_weird_sequence_pct());
    }

    // optional uint32 peak_jitter_usec = 8;
    if (has_peak_jitter_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peak_jitter_usec());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkInstantaneousStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramLinkInstantaneousStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkInstantaneousStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkInstantaneousStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      out_packets_per_sec_x10_ = from.out_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000002u) {
      out_bytes_per_sec_ = from.out_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000004u) {
      in_packets_per_sec_x10_ = from.in_packets_per_sec_x10_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_bytes_per_sec_ = from.in_bytes_per_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ms_ = from.ping_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_dropped_pct_ = from.packets_dropped_pct_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_weird_sequence_pct_ = from.packets_weird_sequence_pct_;
    }
    if (cached_has_bits & 0x00000080u) {
      peak_jitter_usec_ = from.peak_jitter_usec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkInstantaneousStats::CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkInstantaneousStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkInstantaneousStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkInstantaneousStats::Swap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkInstantaneousStats::InternalSwap(CMsgSteamDatagramLinkInstantaneousStats* other) {
  using std::swap;
  swap(out_packets_per_sec_x10_, other->out_packets_per_sec_x10_);
  swap(out_bytes_per_sec_, other->out_bytes_per_sec_);
  swap(in_packets_per_sec_x10_, other->in_packets_per_sec_x10_);
  swap(in_bytes_per_sec_, other->in_bytes_per_sec_);
  swap(ping_ms_, other->ping_ms_);
  swap(packets_dropped_pct_, other->packets_dropped_pct_);
  swap(packets_weird_sequence_pct_, other->packets_weird_sequence_pct_);
  swap(peak_jitter_usec_, other->peak_jitter_usec_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkInstantaneousStats::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramLinkLifetimeStats::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbSentFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kKbRecvFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvSequencedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDroppedFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvOutOfOrderFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvDuplicateFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPacketsRecvLurchFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram99FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram97FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram95FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram90FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityHistogramDeadFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile2NdFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile25ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kQualityNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram25FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram50FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram75FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram100FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram125FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram150FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram200FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogram300FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingHistogramMaxFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile5ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile50ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile75ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile95ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kPingNtile98ThFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogramNegligibleFieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram1FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram2FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram5FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram10FieldNumber;
const int CMsgSteamDatagramLinkLifetimeStats::kJitterHistogram20FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramLinkLifetimeStats)
}
CMsgSteamDatagramLinkLifetimeStats::CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&packets_sent_, &from.packets_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&jitter_histogram_10_) -
    reinterpret_cast<char*>(&packets_sent_)) + sizeof(jitter_histogram_10_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramLinkLifetimeStats)
}

void CMsgSteamDatagramLinkLifetimeStats::SharedCtor() {
  ::memset(&packets_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jitter_histogram_10_) -
      reinterpret_cast<char*>(&packets_sent_)) + sizeof(jitter_histogram_10_));
  _cached_size_ = 0;
}

CMsgSteamDatagramLinkLifetimeStats::~CMsgSteamDatagramLinkLifetimeStats() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramLinkLifetimeStats)
  SharedDtor();
}

void CMsgSteamDatagramLinkLifetimeStats::SharedDtor() {
}

void CMsgSteamDatagramLinkLifetimeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramLinkLifetimeStats::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramLinkLifetimeStats::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramLinkLifetimeStats();
  return *internal_default_instance();
}

CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramLinkLifetimeStats::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramLinkLifetimeStats* n = new CMsgSteamDatagramLinkLifetimeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramLinkLifetimeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&packets_sent_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packets_recv_duplicate_) -
        reinterpret_cast<char*>(&packets_sent_)) + sizeof(packets_recv_duplicate_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&packets_recv_lurch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_histogram_50_) -
        reinterpret_cast<char*>(&packets_recv_lurch_)) + sizeof(quality_histogram_50_));
  }
  if (cached_has_bits & 16711680u) {
    ::memset(&quality_histogram_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_50_) -
        reinterpret_cast<char*>(&quality_histogram_1_)) + sizeof(ping_histogram_50_));
  }
  if (cached_has_bits & 4278190080u) {
    ::memset(&ping_histogram_75_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ping_histogram_max_) -
        reinterpret_cast<char*>(&ping_histogram_75_)) + sizeof(ping_histogram_max_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 255u) {
    ::memset(&ping_ntile_5th_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_histogram_2_) -
        reinterpret_cast<char*>(&ping_ntile_5th_)) + sizeof(jitter_histogram_2_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&jitter_histogram_5_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&jitter_histogram_10_) -
        reinterpret_cast<char*>(&jitter_histogram_5_)) + sizeof(jitter_histogram_10_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramLinkLifetimeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramLinkLifetimeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 packets_sent = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_packets_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_sent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_kb_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_packets_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 kb_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_kb_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kb_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_sequenced = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_packets_recv_sequenced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_sequenced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_dropped = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_packets_recv_dropped();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_dropped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_out_of_order = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_packets_recv_out_of_order();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_out_of_order_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_duplicate = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_packets_recv_duplicate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_duplicate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packets_recv_lurch = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_packets_recv_lurch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_recv_lurch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_100 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_quality_histogram_100();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_99 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_quality_histogram_99();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_99_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_97 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_quality_histogram_97();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_97_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_95 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {
          set_has_quality_histogram_95();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_95_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_90 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {
          set_has_quality_histogram_90();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_90_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_75 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {
          set_has_quality_histogram_75();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_50 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u /* 216 & 0xFF */)) {
          set_has_quality_histogram_50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_1 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u /* 224 & 0xFF */)) {
          set_has_quality_histogram_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_histogram_dead = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          set_has_quality_histogram_dead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_histogram_dead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_2nd = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {
          set_has_quality_ntile_2nd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_2nd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_5th = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {
          set_has_quality_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_25th = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {
          set_has_quality_ntile_25th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_25th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality_ntile_50th = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {
          set_has_quality_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_25 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 328 & 0xFF */)) {
          set_has_ping_histogram_25();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_25_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_50 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 336 & 0xFF */)) {
          set_has_ping_histogram_50();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_50_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_75 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 344 & 0xFF */)) {
          set_has_ping_histogram_75();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_75_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_100 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 352 & 0xFF */)) {
          set_has_ping_histogram_100();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_100_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_125 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 360 & 0xFF */)) {
          set_has_ping_histogram_125();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_125_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_150 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 368 & 0xFF */)) {
          set_has_ping_histogram_150();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_150_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_200 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 376 & 0xFF */)) {
          set_has_ping_histogram_200();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_200_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_300 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 384 & 0xFF */)) {
          set_has_ping_histogram_300();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_300_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_histogram_max = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 392 & 0xFF */)) {
          set_has_ping_histogram_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_histogram_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_5th = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 400 & 0xFF */)) {
          set_has_ping_ntile_5th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_5th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_50th = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 408 & 0xFF */)) {
          set_has_ping_ntile_50th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_50th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_75th = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 416 & 0xFF */)) {
          set_has_ping_ntile_75th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_75th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_95th = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 424 & 0xFF */)) {
          set_has_ping_ntile_95th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_95th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping_ntile_98th = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 432 & 0xFF */)) {
          set_has_ping_ntile_98th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_ntile_98th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_negligible = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 488 & 0xFF */)) {
          set_has_jitter_histogram_negligible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_negligible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_1 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 496 & 0xFF */)) {
          set_has_jitter_histogram_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_2 = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 504 & 0xFF */)) {
          set_has_jitter_histogram_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_5 = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 512 & 0xFF */)) {
          set_has_jitter_histogram_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_10 = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 520 & 0xFF */)) {
          set_has_jitter_histogram_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 jitter_histogram_20 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 528 & 0xFF */)) {
          set_has_jitter_histogram_20();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jitter_histogram_20_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramLinkLifetimeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramLinkLifetimeStats)
  return false;
#undef DO_
}

void CMsgSteamDatagramLinkLifetimeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packets_sent(), output);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->kb_sent(), output);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->packets_recv(), output);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->kb_recv(), output);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->packets_recv_sequenced(), output);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->packets_recv_dropped(), output);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->packets_recv_out_of_order(), output);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets_recv_duplicate(), output);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->packets_recv_lurch(), output);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->quality_histogram_100(), output);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->quality_histogram_99(), output);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->quality_histogram_97(), output);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->quality_histogram_95(), output);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->quality_histogram_90(), output);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->quality_histogram_75(), output);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->quality_histogram_50(), output);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->quality_histogram_1(), output);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->quality_histogram_dead(), output);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->quality_ntile_2nd(), output);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->quality_ntile_5th(), output);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->quality_ntile_25th(), output);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->quality_ntile_50th(), output);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ping_histogram_25(), output);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->ping_histogram_50(), output);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ping_histogram_75(), output);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->ping_histogram_100(), output);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->ping_histogram_125(), output);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->ping_histogram_150(), output);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->ping_histogram_200(), output);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->ping_histogram_300(), output);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->ping_histogram_max(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->ping_ntile_5th(), output);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->ping_ntile_50th(), output);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->ping_ntile_75th(), output);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->ping_ntile_95th(), output);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->ping_ntile_98th(), output);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->jitter_histogram_negligible(), output);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->jitter_histogram_1(), output);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->jitter_histogram_2(), output);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->jitter_histogram_5(), output);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->jitter_histogram_10(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->jitter_histogram_20(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramLinkLifetimeStats)
}

::google::protobuf::uint8* CMsgSteamDatagramLinkLifetimeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramLinkLifetimeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 packets_sent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packets_sent(), target);
  }

  // optional uint64 kb_sent = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->kb_sent(), target);
  }

  // optional uint64 packets_recv = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->packets_recv(), target);
  }

  // optional uint64 kb_recv = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->kb_recv(), target);
  }

  // optional uint64 packets_recv_sequenced = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->packets_recv_sequenced(), target);
  }

  // optional uint64 packets_recv_dropped = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->packets_recv_dropped(), target);
  }

  // optional uint64 packets_recv_out_of_order = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->packets_recv_out_of_order(), target);
  }

  // optional uint64 packets_recv_duplicate = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets_recv_duplicate(), target);
  }

  // optional uint64 packets_recv_lurch = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->packets_recv_lurch(), target);
  }

  // optional uint32 quality_histogram_100 = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->quality_histogram_100(), target);
  }

  // optional uint32 quality_histogram_99 = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->quality_histogram_99(), target);
  }

  // optional uint32 quality_histogram_97 = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->quality_histogram_97(), target);
  }

  // optional uint32 quality_histogram_95 = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->quality_histogram_95(), target);
  }

  // optional uint32 quality_histogram_90 = 25;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->quality_histogram_90(), target);
  }

  // optional uint32 quality_histogram_75 = 26;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->quality_histogram_75(), target);
  }

  // optional uint32 quality_histogram_50 = 27;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->quality_histogram_50(), target);
  }

  // optional uint32 quality_histogram_1 = 28;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->quality_histogram_1(), target);
  }

  // optional uint32 quality_histogram_dead = 29;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->quality_histogram_dead(), target);
  }

  // optional uint32 quality_ntile_2nd = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->quality_ntile_2nd(), target);
  }

  // optional uint32 quality_ntile_5th = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->quality_ntile_5th(), target);
  }

  // optional uint32 quality_ntile_25th = 32;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->quality_ntile_25th(), target);
  }

  // optional uint32 quality_ntile_50th = 33;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->quality_ntile_50th(), target);
  }

  // optional uint32 ping_histogram_25 = 41;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ping_histogram_25(), target);
  }

  // optional uint32 ping_histogram_50 = 42;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->ping_histogram_50(), target);
  }

  // optional uint32 ping_histogram_75 = 43;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ping_histogram_75(), target);
  }

  // optional uint32 ping_histogram_100 = 44;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->ping_histogram_100(), target);
  }

  // optional uint32 ping_histogram_125 = 45;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->ping_histogram_125(), target);
  }

  // optional uint32 ping_histogram_150 = 46;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->ping_histogram_150(), target);
  }

  // optional uint32 ping_histogram_200 = 47;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->ping_histogram_200(), target);
  }

  // optional uint32 ping_histogram_300 = 48;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->ping_histogram_300(), target);
  }

  // optional uint32 ping_histogram_max = 49;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->ping_histogram_max(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 ping_ntile_5th = 50;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->ping_ntile_5th(), target);
  }

  // optional uint32 ping_ntile_50th = 51;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->ping_ntile_50th(), target);
  }

  // optional uint32 ping_ntile_75th = 52;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->ping_ntile_75th(), target);
  }

  // optional uint32 ping_ntile_95th = 53;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->ping_ntile_95th(), target);
  }

  // optional uint32 ping_ntile_98th = 54;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->ping_ntile_98th(), target);
  }

  // optional uint32 jitter_histogram_negligible = 61;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->jitter_histogram_negligible(), target);
  }

  // optional uint32 jitter_histogram_1 = 62;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->jitter_histogram_1(), target);
  }

  // optional uint32 jitter_histogram_2 = 63;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->jitter_histogram_2(), target);
  }

  // optional uint32 jitter_histogram_5 = 64;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->jitter_histogram_5(), target);
  }

  // optional uint32 jitter_histogram_10 = 65;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->jitter_histogram_10(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 jitter_histogram_20 = 66;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->jitter_histogram_20(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramLinkLifetimeStats)
  return target;
}

size_t CMsgSteamDatagramLinkLifetimeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramLinkLifetimeStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 packets_sent = 3;
    if (has_packets_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_sent());
    }

    // optional uint64 kb_sent = 4;
    if (has_kb_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_sent());
    }

    // optional uint64 packets_recv = 5;
    if (has_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv());
    }

    // optional uint64 kb_recv = 6;
    if (has_kb_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kb_recv());
    }

    // optional uint64 packets_recv_sequenced = 7;
    if (has_packets_recv_sequenced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_sequenced());
    }

    // optional uint64 packets_recv_dropped = 8;
    if (has_packets_recv_dropped()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_dropped());
    }

    // optional uint64 packets_recv_out_of_order = 9;
    if (has_packets_recv_out_of_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_out_of_order());
    }

    // optional uint64 packets_recv_duplicate = 10;
    if (has_packets_recv_duplicate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_duplicate());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 packets_recv_lurch = 11;
    if (has_packets_recv_lurch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packets_recv_lurch());
    }

    // optional uint32 quality_histogram_100 = 21;
    if (has_quality_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_100());
    }

    // optional uint32 quality_histogram_99 = 22;
    if (has_quality_histogram_99()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_99());
    }

    // optional uint32 quality_histogram_97 = 23;
    if (has_quality_histogram_97()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_97());
    }

    // optional uint32 quality_histogram_95 = 24;
    if (has_quality_histogram_95()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_95());
    }

    // optional uint32 quality_histogram_90 = 25;
    if (has_quality_histogram_90()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_90());
    }

    // optional uint32 quality_histogram_75 = 26;
    if (has_quality_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_75());
    }

    // optional uint32 quality_histogram_50 = 27;
    if (has_quality_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_50());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 quality_histogram_1 = 28;
    if (has_quality_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_1());
    }

    // optional uint32 quality_histogram_dead = 29;
    if (has_quality_histogram_dead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_histogram_dead());
    }

    // optional uint32 quality_ntile_2nd = 30;
    if (has_quality_ntile_2nd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_2nd());
    }

    // optional uint32 quality_ntile_5th = 31;
    if (has_quality_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_5th());
    }

    // optional uint32 quality_ntile_25th = 32;
    if (has_quality_ntile_25th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_25th());
    }

    // optional uint32 quality_ntile_50th = 33;
    if (has_quality_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_ntile_50th());
    }

    // optional uint32 ping_histogram_25 = 41;
    if (has_ping_histogram_25()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_25());
    }

    // optional uint32 ping_histogram_50 = 42;
    if (has_ping_histogram_50()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_50());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 ping_histogram_75 = 43;
    if (has_ping_histogram_75()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_75());
    }

    // optional uint32 jitter_histogram_20 = 66;
    if (has_jitter_histogram_20()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_20());
    }

    // optional uint32 ping_histogram_100 = 44;
    if (has_ping_histogram_100()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_100());
    }

    // optional uint32 ping_histogram_125 = 45;
    if (has_ping_histogram_125()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_125());
    }

    // optional uint32 ping_histogram_150 = 46;
    if (has_ping_histogram_150()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_150());
    }

    // optional uint32 ping_histogram_200 = 47;
    if (has_ping_histogram_200()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_200());
    }

    // optional uint32 ping_histogram_300 = 48;
    if (has_ping_histogram_300()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_300());
    }

    // optional uint32 ping_histogram_max = 49;
    if (has_ping_histogram_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_histogram_max());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 ping_ntile_5th = 50;
    if (has_ping_ntile_5th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_5th());
    }

    // optional uint32 ping_ntile_50th = 51;
    if (has_ping_ntile_50th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_50th());
    }

    // optional uint32 ping_ntile_75th = 52;
    if (has_ping_ntile_75th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_75th());
    }

    // optional uint32 ping_ntile_95th = 53;
    if (has_ping_ntile_95th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_95th());
    }

    // optional uint32 ping_ntile_98th = 54;
    if (has_ping_ntile_98th()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_ntile_98th());
    }

    // optional uint32 jitter_histogram_negligible = 61;
    if (has_jitter_histogram_negligible()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_negligible());
    }

    // optional uint32 jitter_histogram_1 = 62;
    if (has_jitter_histogram_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_1());
    }

    // optional uint32 jitter_histogram_2 = 63;
    if (has_jitter_histogram_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_2());
    }

  }
  if (_has_bits_[40 / 32] & 768u) {
    // optional uint32 jitter_histogram_5 = 64;
    if (has_jitter_histogram_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_5());
    }

    // optional uint32 jitter_histogram_10 = 65;
    if (has_jitter_histogram_10()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jitter_histogram_10());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramLinkLifetimeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramLinkLifetimeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramLinkLifetimeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramLinkLifetimeStats)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramLinkLifetimeStats::MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramLinkLifetimeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      packets_sent_ = from.packets_sent_;
    }
    if (cached_has_bits & 0x00000002u) {
      kb_sent_ = from.kb_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      packets_recv_ = from.packets_recv_;
    }
    if (cached_has_bits & 0x00000008u) {
      kb_recv_ = from.kb_recv_;
    }
    if (cached_has_bits & 0x00000010u) {
      packets_recv_sequenced_ = from.packets_recv_sequenced_;
    }
    if (cached_has_bits & 0x00000020u) {
      packets_recv_dropped_ = from.packets_recv_dropped_;
    }
    if (cached_has_bits & 0x00000040u) {
      packets_recv_out_of_order_ = from.packets_recv_out_of_order_;
    }
    if (cached_has_bits & 0x00000080u) {
      packets_recv_duplicate_ = from.packets_recv_duplicate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      packets_recv_lurch_ = from.packets_recv_lurch_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_histogram_100_ = from.quality_histogram_100_;
    }
    if (cached_has_bits & 0x00000400u) {
      quality_histogram_99_ = from.quality_histogram_99_;
    }
    if (cached_has_bits & 0x00000800u) {
      quality_histogram_97_ = from.quality_histogram_97_;
    }
    if (cached_has_bits & 0x00001000u) {
      quality_histogram_95_ = from.quality_histogram_95_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_histogram_90_ = from.quality_histogram_90_;
    }
    if (cached_has_bits & 0x00004000u) {
      quality_histogram_75_ = from.quality_histogram_75_;
    }
    if (cached_has_bits & 0x00008000u) {
      quality_histogram_50_ = from.quality_histogram_50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      quality_histogram_1_ = from.quality_histogram_1_;
    }
    if (cached_has_bits & 0x00020000u) {
      quality_histogram_dead_ = from.quality_histogram_dead_;
    }
    if (cached_has_bits & 0x00040000u) {
      quality_ntile_2nd_ = from.quality_ntile_2nd_;
    }
    if (cached_has_bits & 0x00080000u) {
      quality_ntile_5th_ = from.quality_ntile_5th_;
    }
    if (cached_has_bits & 0x00100000u) {
      quality_ntile_25th_ = from.quality_ntile_25th_;
    }
    if (cached_has_bits & 0x00200000u) {
      quality_ntile_50th_ = from.quality_ntile_50th_;
    }
    if (cached_has_bits & 0x00400000u) {
      ping_histogram_25_ = from.ping_histogram_25_;
    }
    if (cached_has_bits & 0x00800000u) {
      ping_histogram_50_ = from.ping_histogram_50_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      ping_histogram_75_ = from.ping_histogram_75_;
    }
    if (cached_has_bits & 0x02000000u) {
      jitter_histogram_20_ = from.jitter_histogram_20_;
    }
    if (cached_has_bits & 0x04000000u) {
      ping_histogram_100_ = from.ping_histogram_100_;
    }
    if (cached_has_bits & 0x08000000u) {
      ping_histogram_125_ = from.ping_histogram_125_;
    }
    if (cached_has_bits & 0x10000000u) {
      ping_histogram_150_ = from.ping_histogram_150_;
    }
    if (cached_has_bits & 0x20000000u) {
      ping_histogram_200_ = from.ping_histogram_200_;
    }
    if (cached_has_bits & 0x40000000u) {
      ping_histogram_300_ = from.ping_histogram_300_;
    }
    if (cached_has_bits & 0x80000000u) {
      ping_histogram_max_ = from.ping_histogram_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ping_ntile_5th_ = from.ping_ntile_5th_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ntile_50th_ = from.ping_ntile_50th_;
    }
    if (cached_has_bits & 0x00000004u) {
      ping_ntile_75th_ = from.ping_ntile_75th_;
    }
    if (cached_has_bits & 0x00000008u) {
      ping_ntile_95th_ = from.ping_ntile_95th_;
    }
    if (cached_has_bits & 0x00000010u) {
      ping_ntile_98th_ = from.ping_ntile_98th_;
    }
    if (cached_has_bits & 0x00000020u) {
      jitter_histogram_negligible_ = from.jitter_histogram_negligible_;
    }
    if (cached_has_bits & 0x00000040u) {
      jitter_histogram_1_ = from.jitter_histogram_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      jitter_histogram_2_ = from.jitter_histogram_2_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      jitter_histogram_5_ = from.jitter_histogram_5_;
    }
    if (cached_has_bits & 0x00000200u) {
      jitter_histogram_10_ = from.jitter_histogram_10_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramLinkLifetimeStats::CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramLinkLifetimeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramLinkLifetimeStats::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramLinkLifetimeStats::Swap(CMsgSteamDatagramLinkLifetimeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramLinkLifetimeStats::InternalSwap(CMsgSteamDatagramLinkLifetimeStats* other) {
  using std::swap;
  swap(packets_sent_, other->packets_sent_);
  swap(kb_sent_, other->kb_sent_);
  swap(packets_recv_, other->packets_recv_);
  swap(kb_recv_, other->kb_recv_);
  swap(packets_recv_sequenced_, other->packets_recv_sequenced_);
  swap(packets_recv_dropped_, other->packets_recv_dropped_);
  swap(packets_recv_out_of_order_, other->packets_recv_out_of_order_);
  swap(packets_recv_duplicate_, other->packets_recv_duplicate_);
  swap(packets_recv_lurch_, other->packets_recv_lurch_);
  swap(quality_histogram_100_, other->quality_histogram_100_);
  swap(quality_histogram_99_, other->quality_histogram_99_);
  swap(quality_histogram_97_, other->quality_histogram_97_);
  swap(quality_histogram_95_, other->quality_histogram_95_);
  swap(quality_histogram_90_, other->quality_histogram_90_);
  swap(quality_histogram_75_, other->quality_histogram_75_);
  swap(quality_histogram_50_, other->quality_histogram_50_);
  swap(quality_histogram_1_, other->quality_histogram_1_);
  swap(quality_histogram_dead_, other->quality_histogram_dead_);
  swap(quality_ntile_2nd_, other->quality_ntile_2nd_);
  swap(quality_ntile_5th_, other->quality_ntile_5th_);
  swap(quality_ntile_25th_, other->quality_ntile_25th_);
  swap(quality_ntile_50th_, other->quality_ntile_50th_);
  swap(ping_histogram_25_, other->ping_histogram_25_);
  swap(ping_histogram_50_, other->ping_histogram_50_);
  swap(ping_histogram_75_, other->ping_histogram_75_);
  swap(jitter_histogram_20_, other->jitter_histogram_20_);
  swap(ping_histogram_100_, other->ping_histogram_100_);
  swap(ping_histogram_125_, other->ping_histogram_125_);
  swap(ping_histogram_150_, other->ping_histogram_150_);
  swap(ping_histogram_200_, other->ping_histogram_200_);
  swap(ping_histogram_300_, other->ping_histogram_300_);
  swap(ping_histogram_max_, other->ping_histogram_max_);
  swap(ping_ntile_5th_, other->ping_ntile_5th_);
  swap(ping_ntile_50th_, other->ping_ntile_50th_);
  swap(ping_ntile_75th_, other->ping_ntile_75th_);
  swap(ping_ntile_95th_, other->ping_ntile_95th_);
  swap(ping_ntile_98th_, other->ping_ntile_98th_);
  swap(jitter_histogram_negligible_, other->jitter_histogram_negligible_);
  swap(jitter_histogram_1_, other->jitter_histogram_1_);
  swap(jitter_histogram_2_, other->jitter_histogram_2_);
  swap(jitter_histogram_5_, other->jitter_histogram_5_);
  swap(jitter_histogram_10_, other->jitter_histogram_10_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramLinkLifetimeStats::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionQuality::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->instantaneous_ = const_cast< ::CMsgSteamDatagramLinkInstantaneousStats*>(
      ::CMsgSteamDatagramLinkInstantaneousStats::internal_default_instance());
  ::_CMsgSteamDatagramConnectionQuality_default_instance_._instance.get_mutable()->lifetime_ = const_cast< ::CMsgSteamDatagramLinkLifetimeStats*>(
      ::CMsgSteamDatagramLinkLifetimeStats::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionQuality::kInstantaneousFieldNumber;
const int CMsgSteamDatagramConnectionQuality::kLifetimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionQuality)
}
CMsgSteamDatagramConnectionQuality::CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_instantaneous()) {
    instantaneous_ = new ::CMsgSteamDatagramLinkInstantaneousStats(*from.instantaneous_);
  } else {
    instantaneous_ = NULL;
  }
  if (from.has_lifetime()) {
    lifetime_ = new ::CMsgSteamDatagramLinkLifetimeStats(*from.lifetime_);
  } else {
    lifetime_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionQuality)
}

void CMsgSteamDatagramConnectionQuality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&instantaneous_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetime_) -
      reinterpret_cast<char*>(&instantaneous_)) + sizeof(lifetime_));
}

CMsgSteamDatagramConnectionQuality::~CMsgSteamDatagramConnectionQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionQuality)
  SharedDtor();
}

void CMsgSteamDatagramConnectionQuality::SharedDtor() {
  if (this != internal_default_instance()) delete instantaneous_;
  if (this != internal_default_instance()) delete lifetime_;
}

void CMsgSteamDatagramConnectionQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionQuality::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionQuality& CMsgSteamDatagramConnectionQuality::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionQuality();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionQuality* CMsgSteamDatagramConnectionQuality::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionQuality* n = new CMsgSteamDatagramConnectionQuality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(instantaneous_ != NULL);
      instantaneous_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lifetime_ != NULL);
      lifetime_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionQuality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_instantaneous()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lifetime()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionQuality)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->instantaneous_, output);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->lifetime_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionQuality)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionQuality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->instantaneous_, deterministic, target);
  }

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->lifetime_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionQuality)
  return target;
}

size_t CMsgSteamDatagramConnectionQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
    if (has_instantaneous()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->instantaneous_);
    }

    // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
    if (has_lifetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->lifetime_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionQuality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionQuality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionQuality::MergeFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_instantaneous()->::CMsgSteamDatagramLinkInstantaneousStats::MergeFrom(from.instantaneous());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_lifetime()->::CMsgSteamDatagramLinkLifetimeStats::MergeFrom(from.lifetime());
    }
  }
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionQuality::CopyFrom(const CMsgSteamDatagramConnectionQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionQuality::Swap(CMsgSteamDatagramConnectionQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionQuality::InternalSwap(CMsgSteamDatagramConnectionQuality* other) {
  using std::swap;
  swap(instantaneous_, other->instantaneous_);
  swap(lifetime_, other->lifetime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionQuality::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsClientToRouter::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance.get_mutable()->c2r_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance.get_mutable()->c2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsClientToRouter::kC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kClientCookieFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsClientToRouter::kSeqNumC2SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(const CMsgSteamDatagramConnectionStatsClientToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_c2r()) {
    c2r_ = new ::CMsgSteamDatagramConnectionQuality(*from.c2r_);
  } else {
    c2r_ = NULL;
  }
  if (from.has_c2s()) {
    c2s_ = new ::CMsgSteamDatagramConnectionQuality(*from.c2s_);
  } else {
    c2s_ = NULL;
  }
  ::memcpy(&client_timestamp_, &from.client_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&seq_num_c2s_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(seq_num_c2s_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&c2r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seq_num_c2s_) -
      reinterpret_cast<char*>(&c2r_)) + sizeof(seq_num_c2s_));
}

CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsClientToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor() {
  if (this != internal_default_instance()) delete c2r_;
  if (this != internal_default_instance()) delete c2s_;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsClientToRouter::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionStatsClientToRouter& CMsgSteamDatagramConnectionStatsClientToRouter::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsClientToRouter();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionStatsClientToRouter* CMsgSteamDatagramConnectionStatsClientToRouter::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionStatsClientToRouter* n = new CMsgSteamDatagramConnectionStatsClientToRouter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(c2r_ != NULL);
      c2r_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(c2s_ != NULL);
      c2s_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&client_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_c2s_) -
        reinterpret_cast<char*>(&client_timestamp_)) + sizeof(seq_num_c2s_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_c2r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_c2s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2r = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seq_num_c2r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2s = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_seq_num_c2s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionStatsClientToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionStatsClientToRouter)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsClientToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->c2r_, output);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->c2s_, output);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->client_cookie(), output);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_c2r(), output);
  }

  // optional uint32 seq_num_c2s = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seq_num_c2s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionStatsClientToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsClientToRouter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->c2r_, deterministic, target);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->c2s_, deterministic, target);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 client_cookie = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->client_cookie(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_c2r(), target);
  }

  // optional uint32 seq_num_c2s = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seq_num_c2s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsClientToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .CMsgSteamDatagramConnectionQuality c2r = 1;
    if (has_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->c2r_);
    }

    // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
    if (has_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->c2s_);
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_cookie = 8;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_c2r = 9;
    if (has_seq_num_c2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2r());
    }

    // optional uint32 seq_num_c2s = 10;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsClientToRouter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionStatsClientToRouter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsClientToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsClientToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_c2r()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2r());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_c2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2s());
    }
    if (cached_has_bits & 0x00000004u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_c2r_ = from.seq_num_c2r_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_c2s_ = from.seq_num_c2s_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsClientToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsClientToRouter::Swap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* other) {
  using std::swap;
  swap(c2r_, other->c2r_);
  swap(c2s_, other->c2s_);
  swap(client_timestamp_, other->client_timestamp_);
  swap(client_cookie_, other->client_cookie_);
  swap(seq_num_c2r_, other->seq_num_c2r_);
  swap(seq_num_c2s_, other->seq_num_c2s_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsRouterToClient::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance.get_mutable()->r2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance.get_mutable()->s2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsRouterToClient::kR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientTimestampFromRouterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientTimestampFromServerFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kRouterGameserverLatencyFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestIpFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kMigrateRequestPortFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kScoringPenaltyRelayClusterFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kClientCookieFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumR2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToClient::kSeqNumS2CFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClient();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(const CMsgSteamDatagramConnectionStatsRouterToClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_r2c()) {
    r2c_ = new ::CMsgSteamDatagramConnectionQuality(*from.r2c_);
  } else {
    r2c_ = NULL;
  }
  if (from.has_s2c()) {
    s2c_ = new ::CMsgSteamDatagramConnectionQuality(*from.s2c_);
  } else {
    s2c_ = NULL;
  }
  ::memcpy(&client_timestamp_from_router_, &from.client_timestamp_from_router_,
    static_cast<size_t>(reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
    reinterpret_cast<char*>(&client_timestamp_from_router_)) + sizeof(scoring_penalty_relay_cluster_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r2c_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
      reinterpret_cast<char*>(&r2c_)) + sizeof(scoring_penalty_relay_cluster_));
}

CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToClient)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor() {
  if (this != internal_default_instance()) delete r2c_;
  if (this != internal_default_instance()) delete s2c_;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToClient::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionStatsRouterToClient& CMsgSteamDatagramConnectionStatsRouterToClient::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsRouterToClient();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionStatsRouterToClient* CMsgSteamDatagramConnectionStatsRouterToClient::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionStatsRouterToClient* n = new CMsgSteamDatagramConnectionStatsRouterToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(r2c_ != NULL);
      r2c_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s2c_ != NULL);
      s2c_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&client_timestamp_from_router_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seq_num_r2c_) -
        reinterpret_cast<char*>(&client_timestamp_from_router_)) + sizeof(seq_num_r2c_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&seq_num_s2c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scoring_penalty_relay_cluster_) -
        reinterpret_cast<char*>(&seq_num_s2c_)) + sizeof(scoring_penalty_relay_cluster_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r2c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s2c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_timestamp_from_router = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_timestamp_from_router();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_from_router_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_timestamp_from_server = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_client_timestamp_from_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_from_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 router_gameserver_latency = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_router_gameserver_latency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &router_gameserver_latency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seconds_until_shutdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_cookie = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2c = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_seq_num_r2c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2c = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_seq_num_s2c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 migrate_request_ip = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_migrate_request_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &migrate_request_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 migrate_request_port = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_migrate_request_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &migrate_request_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scoring_penalty_relay_cluster = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_scoring_penalty_relay_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoring_penalty_relay_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionStatsRouterToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionStatsRouterToClient)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->r2c_, output);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->s2c_, output);
  }

  // optional fixed32 client_timestamp_from_router = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp_from_router(), output);
  }

  // optional fixed32 client_timestamp_from_server = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->client_timestamp_from_server(), output);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->router_gameserver_latency(), output);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seconds_until_shutdown(), output);
  }

  // optional fixed32 client_cookie = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->client_cookie(), output);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->seq_num_r2c(), output);
  }

  // optional uint32 seq_num_s2c = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->seq_num_s2c(), output);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->migrate_request_ip(), output);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->migrate_request_port(), output);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scoring_penalty_relay_cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionStatsRouterToClient)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->r2c_, deterministic, target);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->s2c_, deterministic, target);
  }

  // optional fixed32 client_timestamp_from_router = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp_from_router(), target);
  }

  // optional fixed32 client_timestamp_from_server = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->client_timestamp_from_server(), target);
  }

  // optional uint32 router_gameserver_latency = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->router_gameserver_latency(), target);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->client_cookie(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->seq_num_r2c(), target);
  }

  // optional uint32 seq_num_s2c = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->seq_num_s2c(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scoring_penalty_relay_cluster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToClient)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgSteamDatagramConnectionQuality r2c = 1;
    if (has_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->r2c_);
    }

    // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
    if (has_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->s2c_);
    }

    // optional fixed32 client_timestamp_from_router = 3;
    if (has_client_timestamp_from_router()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_timestamp_from_server = 4;
    if (has_client_timestamp_from_server()) {
      total_size += 1 + 4;
    }

    // optional uint32 router_gameserver_latency = 5;
    if (has_router_gameserver_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->router_gameserver_latency());
    }

    // optional uint32 seconds_until_shutdown = 6;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional fixed32 client_cookie = 7;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2c = 8;
    if (has_seq_num_r2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2c());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional uint32 seq_num_s2c = 9;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed32 migrate_request_ip = 10;
    if (has_migrate_request_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 migrate_request_port = 11;
    if (has_migrate_request_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->migrate_request_port());
    }

    // optional uint32 scoring_penalty_relay_cluster = 12;
    if (has_scoring_penalty_relay_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoring_penalty_relay_cluster());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionStatsRouterToClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsRouterToClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsRouterToClient)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_r2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.r2c());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2c());
    }
    if (cached_has_bits & 0x00000004u) {
      client_timestamp_from_router_ = from.client_timestamp_from_router_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_timestamp_from_server_ = from.client_timestamp_from_server_;
    }
    if (cached_has_bits & 0x00000010u) {
      router_gameserver_latency_ = from.router_gameserver_latency_;
    }
    if (cached_has_bits & 0x00000020u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000080u) {
      seq_num_r2c_ = from.seq_num_r2c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      seq_num_s2c_ = from.seq_num_s2c_;
    }
    if (cached_has_bits & 0x00000200u) {
      migrate_request_ip_ = from.migrate_request_ip_;
    }
    if (cached_has_bits & 0x00000400u) {
      migrate_request_port_ = from.migrate_request_port_;
    }
    if (cached_has_bits & 0x00000800u) {
      scoring_penalty_relay_cluster_ = from.scoring_penalty_relay_cluster_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToClient::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToClient::Swap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* other) {
  using std::swap;
  swap(r2c_, other->r2c_);
  swap(s2c_, other->s2c_);
  swap(client_timestamp_from_router_, other->client_timestamp_from_router_);
  swap(client_timestamp_from_server_, other->client_timestamp_from_server_);
  swap(router_gameserver_latency_, other->router_gameserver_latency_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(client_cookie_, other->client_cookie_);
  swap(seq_num_r2c_, other->seq_num_r2c_);
  swap(seq_num_s2c_, other->seq_num_s2c_);
  swap(migrate_request_ip_, other->migrate_request_ip_);
  swap(migrate_request_port_, other->migrate_request_port_);
  swap(scoring_penalty_relay_cluster_, other->scoring_penalty_relay_cluster_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsRouterToServer::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance.get_mutable()->r2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance.get_mutable()->c2s_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsRouterToServer::kR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kRouterTimestampFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumR2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kSeqNumC2SFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsRouterToServer::kClientSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(const CMsgSteamDatagramConnectionStatsRouterToServer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_r2s()) {
    r2s_ = new ::CMsgSteamDatagramConnectionQuality(*from.r2s_);
  } else {
    r2s_ = NULL;
  }
  if (from.has_c2s()) {
    c2s_ = new ::CMsgSteamDatagramConnectionQuality(*from.c2s_);
  } else {
    c2s_ = NULL;
  }
  ::memcpy(&client_timestamp_, &from.client_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_session_id_) -
    reinterpret_cast<char*>(&client_timestamp_)) + sizeof(client_session_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r2s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_session_id_) -
      reinterpret_cast<char*>(&r2s_)) + sizeof(client_session_id_));
}

CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToServer)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor() {
  if (this != internal_default_instance()) delete r2s_;
  if (this != internal_default_instance()) delete c2s_;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsRouterToServer::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionStatsRouterToServer& CMsgSteamDatagramConnectionStatsRouterToServer::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsRouterToServer();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionStatsRouterToServer* CMsgSteamDatagramConnectionStatsRouterToServer::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionStatsRouterToServer* n = new CMsgSteamDatagramConnectionStatsRouterToServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(r2s_ != NULL);
      r2s_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(c2s_ != NULL);
      c2s_->Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&client_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_session_id_) -
        reinterpret_cast<char*>(&client_timestamp_)) + sizeof(client_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_r2s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_c2s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_client_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 router_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_router_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &router_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_r2s = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_seq_num_r2s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_r2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_c2s = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_seq_num_c2s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_c2s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steam_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_client_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_client_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionStatsRouterToServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionStatsRouterToServer)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsRouterToServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->r2s_, output);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->c2s_, output);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->client_timestamp(), output);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->router_timestamp(), output);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq_num_r2s(), output);
  }

  // optional uint32 seq_num_c2s = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->seq_num_c2s(), output);
  }

  // optional fixed64 client_steam_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->client_steam_id(), output);
  }

  // optional uint32 client_session_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->client_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionStatsRouterToServer)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsRouterToServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->r2s_, deterministic, target);
  }

  // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->c2s_, deterministic, target);
  }

  // optional fixed32 client_timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->client_timestamp(), target);
  }

  // optional fixed32 router_timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->router_timestamp(), target);
  }

  // optional uint32 seq_num_r2s = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq_num_r2s(), target);
  }

  // optional uint32 seq_num_c2s = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->seq_num_c2s(), target);
  }

  // optional fixed64 client_steam_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->client_steam_id(), target);
  }

  // optional uint32 client_session_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->client_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToServer)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .CMsgSteamDatagramConnectionQuality r2s = 1;
    if (has_r2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->r2s_);
    }

    // optional .CMsgSteamDatagramConnectionQuality c2s = 2;
    if (has_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->c2s_);
    }

    // optional fixed32 client_timestamp = 3;
    if (has_client_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed32 router_timestamp = 4;
    if (has_router_timestamp()) {
      total_size += 1 + 4;
    }

    // optional uint32 seq_num_r2s = 5;
    if (has_seq_num_r2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_r2s());
    }

    // optional uint32 seq_num_c2s = 6;
    if (has_seq_num_c2s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_c2s());
    }

    // optional fixed64 client_steam_id = 7;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_session_id = 8;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsRouterToServer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionStatsRouterToServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsRouterToServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsRouterToServer)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_r2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.r2s());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_c2s()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.c2s());
    }
    if (cached_has_bits & 0x00000004u) {
      client_timestamp_ = from.client_timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      router_timestamp_ = from.router_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      seq_num_r2s_ = from.seq_num_r2s_;
    }
    if (cached_has_bits & 0x00000020u) {
      seq_num_c2s_ = from.seq_num_c2s_;
    }
    if (cached_has_bits & 0x00000040u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_session_id_ = from.client_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsRouterToServer::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsRouterToServer::Swap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsRouterToServer::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* other) {
  using std::swap;
  swap(r2s_, other->r2s_);
  swap(c2s_, other->c2s_);
  swap(client_timestamp_, other->client_timestamp_);
  swap(router_timestamp_, other->router_timestamp_);
  swap(seq_num_r2s_, other->seq_num_r2s_);
  swap(seq_num_c2s_, other->seq_num_c2s_);
  swap(client_steam_id_, other->client_steam_id_);
  swap(client_session_id_, other->client_session_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramConnectionStatsServerToRouter::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance.get_mutable()->s2r_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
  ::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance.get_mutable()->s2c_ = const_cast< ::CMsgSteamDatagramConnectionQuality*>(
      ::CMsgSteamDatagramConnectionQuality::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramConnectionStatsServerToRouter::kS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2RFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kSeqNumS2CFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSteamIdFieldNumber;
const int CMsgSteamDatagramConnectionStatsServerToRouter::kClientSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(const CMsgSteamDatagramConnectionStatsServerToRouter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s2r()) {
    s2r_ = new ::CMsgSteamDatagramConnectionQuality(*from.s2r_);
  } else {
    s2r_ = NULL;
  }
  if (from.has_s2c()) {
    s2c_ = new ::CMsgSteamDatagramConnectionQuality(*from.s2c_);
  } else {
    s2c_ = NULL;
  }
  ::memcpy(&seq_num_s2r_, &from.seq_num_s2r_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_session_id_) -
    reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(client_session_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&s2r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_session_id_) -
      reinterpret_cast<char*>(&s2r_)) + sizeof(client_session_id_));
}

CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsServerToRouter)
  SharedDtor();
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor() {
  if (this != internal_default_instance()) delete s2r_;
  if (this != internal_default_instance()) delete s2c_;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramConnectionStatsServerToRouter::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramConnectionStatsServerToRouter& CMsgSteamDatagramConnectionStatsServerToRouter::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramConnectionStatsServerToRouter();
  return *internal_default_instance();
}

CMsgSteamDatagramConnectionStatsServerToRouter* CMsgSteamDatagramConnectionStatsServerToRouter::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramConnectionStatsServerToRouter* n = new CMsgSteamDatagramConnectionStatsServerToRouter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(s2r_ != NULL);
      s2r_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s2c_ != NULL);
      s2c_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&seq_num_s2r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_session_id_) -
        reinterpret_cast<char*>(&seq_num_s2r_)) + sizeof(client_session_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s2r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_s2c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_seq_num_s2r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seq_num_s2c = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_seq_num_s2c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_num_s2c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 client_steam_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_client_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &client_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_session_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_client_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramConnectionStatsServerToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramConnectionStatsServerToRouter)
  return false;
#undef DO_
}

void CMsgSteamDatagramConnectionStatsServerToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->s2r_, output);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->s2c_, output);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seq_num_s2r(), output);
  }

  // optional uint32 seq_num_s2c = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seq_num_s2c(), output);
  }

  // optional fixed64 client_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->client_steam_id(), output);
  }

  // optional uint32 client_session_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramConnectionStatsServerToRouter)
}

::google::protobuf::uint8* CMsgSteamDatagramConnectionStatsServerToRouter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->s2r_, deterministic, target);
  }

  // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->s2c_, deterministic, target);
  }

  // optional uint32 seq_num_s2r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seq_num_s2r(), target);
  }

  // optional uint32 seq_num_s2c = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seq_num_s2c(), target);
  }

  // optional fixed64 client_steam_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->client_steam_id(), target);
  }

  // optional uint32 client_session_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsServerToRouter)
  return target;
}

size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .CMsgSteamDatagramConnectionQuality s2r = 1;
    if (has_s2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->s2r_);
    }

    // optional .CMsgSteamDatagramConnectionQuality s2c = 2;
    if (has_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->s2c_);
    }

    // optional uint32 seq_num_s2r = 3;
    if (has_seq_num_s2r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2r());
    }

    // optional uint32 seq_num_s2c = 4;
    if (has_seq_num_s2c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq_num_s2c());
    }

    // optional fixed64 client_steam_id = 5;
    if (has_client_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 client_session_id = 6;
    if (has_client_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramConnectionStatsServerToRouter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramConnectionStatsServerToRouter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramConnectionStatsServerToRouter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramConnectionStatsServerToRouter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s2r()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2r());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_s2c()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from.s2c());
    }
    if (cached_has_bits & 0x00000004u) {
      seq_num_s2r_ = from.seq_num_s2r_;
    }
    if (cached_has_bits & 0x00000008u) {
      seq_num_s2c_ = from.seq_num_s2c_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      client_session_id_ = from.client_session_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramConnectionStatsServerToRouter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramConnectionStatsServerToRouter::Swap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramConnectionStatsServerToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* other) {
  using std::swap;
  swap(s2r_, other->s2r_);
  swap(s2c_, other->s2c_);
  swap(seq_num_s2r_, other->seq_num_s2r_);
  swap(seq_num_s2c_, other->seq_num_s2c_);
  swap(client_steam_id_, other->client_steam_id_);
  swap(client_session_id_, other->client_session_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleRequest::kClientCookieFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientPingSampleRequest)
}
CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(const CMsgSteamDatagramClientPingSampleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_cookie_ = from.client_cookie_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleRequest)
}

void CMsgSteamDatagramClientPingSampleRequest::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
}

CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleRequest)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleRequest::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleRequest::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientPingSampleRequest& CMsgSteamDatagramClientPingSampleRequest::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleRequest();
  return *internal_default_instance();
}

CMsgSteamDatagramClientPingSampleRequest* CMsgSteamDatagramClientPingSampleRequest::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientPingSampleRequest* n = new CMsgSteamDatagramClientPingSampleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientPingSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_cookie_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientPingSampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientPingSampleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientPingSampleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientPingSampleRequest)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientPingSampleRequest)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleRequest)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientPingSampleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleRequest)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleRequest::MergeFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_cookie()) {
    set_client_cookie(from.client_cookie());
  }
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleRequest::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleRequest::Swap(CMsgSteamDatagramClientPingSampleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleRequest::InternalSwap(CMsgSteamDatagramClientPingSampleRequest* other) {
  using std::swap;
  swap(client_cookie_, other->client_cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kFrontPingMsFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_RoutingCluster::kE2EPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}
CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CMsgSteamDatagramClientPingSampleReply_RoutingCluster(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&e2e_ping_ms_) -
    reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e2e_ping_ms_) -
      reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster::~CMsgSteamDatagramClientPingSampleReply_RoutingCluster() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& CMsgSteamDatagramClientPingSampleReply_RoutingCluster::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_RoutingCluster();
  return *internal_default_instance();
}

CMsgSteamDatagramClientPingSampleReply_RoutingCluster* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientPingSampleReply_RoutingCluster* n = new CMsgSteamDatagramClientPingSampleReply_RoutingCluster;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2e_ping_ms_) -
        reinterpret_cast<char*>(&id_)) + sizeof(e2e_ping_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 front_ping_ms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_front_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_e2e_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->id(), output);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping_ms(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->id(), target);
  }

  // optional uint32 front_ping_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping_ms(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_RoutingCluster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed32 id = 1;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 front_ping_ms = 2;
    if (has_front_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping_ms());
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_RoutingCluster* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientPingSampleReply_RoutingCluster>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ms_ = from.front_ping_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      e2e_ping_ms_ = from.e2e_ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_RoutingCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.RoutingCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_RoutingCluster::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::Swap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply_RoutingCluster::InternalSwap(CMsgSteamDatagramClientPingSampleReply_RoutingCluster* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(front_ping_ms_, other->front_ping_ms_);
  swap(e2e_ping_ms_, other->e2e_ping_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_RoutingCluster::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply_DataCenter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kDataCenterIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kViaRelayIdFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply_DataCenter::kE2EPingMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientPingSampleReply.DataCenter)
}
CMsgSteamDatagramClientPingSampleReply_DataCenter::CMsgSteamDatagramClientPingSampleReply_DataCenter(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_center_id_, &from.data_center_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&e2e_ping_ms_) -
    reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.DataCenter)
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_center_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&e2e_ping_ms_) -
      reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
}

CMsgSteamDatagramClientPingSampleReply_DataCenter::~CMsgSteamDatagramClientPingSampleReply_DataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply_DataCenter::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientPingSampleReply_DataCenter& CMsgSteamDatagramClientPingSampleReply_DataCenter::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply_DataCenter();
  return *internal_default_instance();
}

CMsgSteamDatagramClientPingSampleReply_DataCenter* CMsgSteamDatagramClientPingSampleReply_DataCenter::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientPingSampleReply_DataCenter* n = new CMsgSteamDatagramClientPingSampleReply_DataCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&data_center_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2e_ping_ms_) -
        reinterpret_cast<char*>(&data_center_id_)) + sizeof(e2e_ping_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 data_center_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_data_center_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &data_center_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 via_relay_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_via_relay_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &via_relay_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 e2e_ping_ms = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_e2e_ping_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e2e_ping_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->data_center_id(), output);
  }

  // optional fixed32 via_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->via_relay_id(), output);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->e2e_ping_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientPingSampleReply.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply_DataCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->data_center_id(), target);
  }

  // optional fixed32 via_relay_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->via_relay_id(), target);
  }

  // optional uint32 e2e_ping_ms = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->e2e_ping_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed32 data_center_id = 1;
    if (has_data_center_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 via_relay_id = 2;
    if (has_via_relay_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 e2e_ping_ms = 3;
    if (has_e2e_ping_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e2e_ping_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply_DataCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientPingSampleReply_DataCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::MergeFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      data_center_id_ = from.data_center_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      via_relay_id_ = from.via_relay_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      e2e_ping_ms_ = from.e2e_ping_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply_DataCenter::Swap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply_DataCenter::InternalSwap(CMsgSteamDatagramClientPingSampleReply_DataCenter* other) {
  using std::swap;
  swap(data_center_id_, other->data_center_id_);
  swap(via_relay_id_, other->via_relay_id_);
  swap(e2e_ping_ms_, other->e2e_ping_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_DataCenter::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientPingSampleReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientPingSampleReply::kClientCookieFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kRoutingClustersFieldNumber;
const int CMsgSteamDatagramClientPingSampleReply::kDataCentersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientPingSampleReply)
}
CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(const CMsgSteamDatagramClientPingSampleReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      routing_clusters_(from.routing_clusters_),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_cookie_ = from.client_cookie_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply)
}

void CMsgSteamDatagramClientPingSampleReply::SharedCtor() {
  _cached_size_ = 0;
  client_cookie_ = 0u;
}

CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply)
  SharedDtor();
}

void CMsgSteamDatagramClientPingSampleReply::SharedDtor() {
}

void CMsgSteamDatagramClientPingSampleReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientPingSampleReply::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientPingSampleReply& CMsgSteamDatagramClientPingSampleReply::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientPingSampleReply();
  return *internal_default_instance();
}

CMsgSteamDatagramClientPingSampleReply* CMsgSteamDatagramClientPingSampleReply::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientPingSampleReply* n = new CMsgSteamDatagramClientPingSampleReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientPingSampleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routing_clusters_.Clear();
  data_centers_.Clear();
  client_cookie_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientPingSampleReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientPingSampleReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_routing_clusters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientPingSampleReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientPingSampleReply)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientPingSampleReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routing_clusters_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->routing_clusters(static_cast<int>(i)), output);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data_centers(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientPingSampleReply)
}

::google::protobuf::uint8* CMsgSteamDatagramClientPingSampleReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->routing_clusters_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->routing_clusters(static_cast<int>(i)), deterministic, target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->data_centers(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply)
  return target;
}

size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramClientPingSampleReply.RoutingCluster routing_clusters = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->routing_clusters_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->routing_clusters(static_cast<int>(i)));
    }
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.DataCenter data_centers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  // optional fixed32 client_cookie = 1;
  if (has_client_cookie()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientPingSampleReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientPingSampleReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientPingSampleReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientPingSampleReply)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientPingSampleReply::MergeFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routing_clusters_.MergeFrom(from.routing_clusters_);
  data_centers_.MergeFrom(from.data_centers_);
  if (from.has_client_cookie()) {
    set_client_cookie(from.client_cookie());
  }
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientPingSampleReply::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientPingSampleReply::Swap(CMsgSteamDatagramClientPingSampleReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientPingSampleReply::InternalSwap(CMsgSteamDatagramClientPingSampleReply* other) {
  using std::swap;
  routing_clusters_.InternalSwap(&other->routing_clusters_);
  data_centers_.InternalSwap(&other->data_centers_);
  swap(client_cookie_, other->client_cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kScoreFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kFrontPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kBackPingFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kSecondsUntilDownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&seconds_until_down_) -
    reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seconds_until_down_) -
      reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor() {
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientSwitchedPrimary_RouterQuality();
  return *internal_default_instance();
}

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* n = new CMsgSteamDatagramClientSwitchedPrimary_RouterQuality;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&seconds_until_down_) -
        reinterpret_cast<char*>(&score_)) + sizeof(seconds_until_down_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 front_ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_front_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &front_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 back_ping = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_back_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &back_ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_down = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_seconds_until_down();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_down_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->front_ping(), output);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->back_ping(), output);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seconds_until_down(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 score = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 front_ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seconds_until_down(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 front_ping = 2;
    if (has_front_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->front_ping());
    }

    // optional uint32 back_ping = 3;
    if (has_back_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->back_ping());
    }

    // optional uint32 seconds_until_down = 4;
    if (has_seconds_until_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_down());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_ping_ = from.front_ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_ping_ = from.back_ping_;
    }
    if (cached_has_bits & 0x00000008u) {
      seconds_until_down_ = from.seconds_until_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Swap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(front_ping_, other->front_ping_);
  swap(back_ping_, other->back_ping_);
  swap(seconds_until_down_, other->seconds_until_down_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramClientSwitchedPrimary::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->from_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->to_quality_now_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->from_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
  ::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance.get_mutable()->to_quality_then_ = const_cast< ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(
      ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramClientSwitchedPrimary::kClientCookieFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromIpFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromPortFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromRouterClusterFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActiveTimeFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromActivePacketsRecvFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromDroppedReasonFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kGapMsFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityNowFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kFromQualityThenFieldNumber;
const int CMsgSteamDatagramClientSwitchedPrimary::kToQualityThenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientSwitchedPrimary();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(const CMsgSteamDatagramClientSwitchedPrimary& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_dropped_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_from_dropped_reason()) {
    from_dropped_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dropped_reason_);
  }
  if (from.has_from_quality_now()) {
    from_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_now_);
  } else {
    from_quality_now_ = NULL;
  }
  if (from.has_to_quality_now()) {
    to_quality_now_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_now_);
  } else {
    to_quality_now_ = NULL;
  }
  if (from.has_from_quality_then()) {
    from_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.from_quality_then_);
  } else {
    from_quality_then_ = NULL;
  }
  if (from.has_to_quality_then()) {
    to_quality_then_ = new ::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(*from.to_quality_then_);
  } else {
    to_quality_then_ = NULL;
  }
  ::memcpy(&client_cookie_, &from.client_cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&gap_ms_) -
    reinterpret_cast<char*>(&client_cookie_)) + sizeof(gap_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor() {
  _cached_size_ = 0;
  from_dropped_reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_quality_now_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gap_ms_) -
      reinterpret_cast<char*>(&from_quality_now_)) + sizeof(gap_ms_));
}

CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary)
  SharedDtor();
}

void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor() {
  from_dropped_reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete from_quality_now_;
  if (this != internal_default_instance()) delete to_quality_now_;
  if (this != internal_default_instance()) delete from_quality_then_;
  if (this != internal_default_instance()) delete to_quality_then_;
}

void CMsgSteamDatagramClientSwitchedPrimary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramClientSwitchedPrimary::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramClientSwitchedPrimary& CMsgSteamDatagramClientSwitchedPrimary::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramClientSwitchedPrimary();
  return *internal_default_instance();
}

CMsgSteamDatagramClientSwitchedPrimary* CMsgSteamDatagramClientSwitchedPrimary::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramClientSwitchedPrimary* n = new CMsgSteamDatagramClientSwitchedPrimary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!from_dropped_reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*from_dropped_reason_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(from_quality_now_ != NULL);
      from_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(to_quality_now_ != NULL);
      to_quality_now_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(from_quality_then_ != NULL);
      from_quality_then_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(to_quality_then_ != NULL);
      to_quality_then_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&client_cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&from_port_) -
        reinterpret_cast<char*>(&client_cookie_)) + sizeof(from_port_));
  }
  if (cached_has_bits & 3840u) {
    ::memset(&from_router_cluster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gap_ms_) -
        reinterpret_cast<char*>(&from_router_cluster_)) + sizeof(gap_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramClientSwitchedPrimary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramClientSwitchedPrimary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 client_cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_client_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_from_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_port = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_from_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 from_router_cluster = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_from_router_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &from_router_cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_active_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_from_active_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 from_active_packets_recv = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_from_active_packets_recv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_active_packets_recv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string from_dropped_reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_dropped_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gap_ms = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_gap_ms();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gap_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_quality_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_quality_now()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from_quality_then()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_quality_then()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramClientSwitchedPrimary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramClientSwitchedPrimary)
  return false;
#undef DO_
}

void CMsgSteamDatagramClientSwitchedPrimary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->client_cookie(), output);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->from_ip(), output);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->from_port(), output);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->from_router_cluster(), output);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->from_active_time(), output);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->from_active_packets_recv(), output);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->from_dropped_reason(), output);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gap_ms(), output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->from_quality_now_, output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->to_quality_now_, output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->from_quality_then_, output);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->to_quality_then_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramClientSwitchedPrimary)
}

::google::protobuf::uint8* CMsgSteamDatagramClientSwitchedPrimary::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 client_cookie = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->client_cookie(), target);
  }

  // optional fixed32 from_ip = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->from_dropped_reason().data(), static_cast<int>(this->from_dropped_reason().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->from_dropped_reason(), target);
  }

  // optional uint32 gap_ms = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->from_quality_now_, deterministic, target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *this->to_quality_now_, deterministic, target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *this->from_quality_then_, deterministic, target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *this->to_quality_then_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary)
  return target;
}

size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string from_dropped_reason = 7;
    if (has_from_dropped_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_dropped_reason());
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if (has_from_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->from_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if (has_to_quality_now()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->to_quality_now_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if (has_from_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->from_quality_then_);
    }

    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if (has_to_quality_then()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->to_quality_then_);
    }

    // optional fixed32 client_cookie = 1;
    if (has_client_cookie()) {
      total_size += 1 + 4;
    }

    // optional fixed32 from_ip = 2;
    if (has_from_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_port = 3;
    if (has_from_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_port());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional fixed32 from_router_cluster = 4;
    if (has_from_router_cluster()) {
      total_size += 1 + 4;
    }

    // optional uint32 from_active_time = 5;
    if (has_from_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_time());
    }

    // optional uint32 from_active_packets_recv = 6;
    if (has_from_active_packets_recv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->from_active_packets_recv());
    }

    // optional uint32 gap_ms = 8;
    if (has_gap_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gap_ms());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramClientSwitchedPrimary* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramClientSwitchedPrimary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramClientSwitchedPrimary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramClientSwitchedPrimary)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_from_dropped_reason();
      from_dropped_reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.from_dropped_reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_from_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_now());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_to_quality_now()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_now());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_from_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.from_quality_then());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_to_quality_then()->::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeFrom(from.to_quality_then());
    }
    if (cached_has_bits & 0x00000020u) {
      client_cookie_ = from.client_cookie_;
    }
    if (cached_has_bits & 0x00000040u) {
      from_ip_ = from.from_ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      from_port_ = from.from_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      from_router_cluster_ = from.from_router_cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      from_active_time_ = from.from_active_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      from_active_packets_recv_ = from.from_active_packets_recv_;
    }
    if (cached_has_bits & 0x00000800u) {
      gap_ms_ = from.gap_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramClientSwitchedPrimary::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramClientSwitchedPrimary::Swap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramClientSwitchedPrimary::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* other) {
  using std::swap;
  from_dropped_reason_.Swap(&other->from_dropped_reason_);
  swap(from_quality_now_, other->from_quality_now_);
  swap(to_quality_now_, other->to_quality_now_);
  swap(from_quality_then_, other->from_quality_then_);
  swap(to_quality_then_, other->to_quality_then_);
  swap(client_cookie_, other->client_cookie_);
  swap(from_ip_, other->from_ip_);
  swap(from_port_, other->from_port_);
  swap(from_router_cluster_, other->from_router_cluster_);
  swap(from_active_time_, other->from_active_time_);
  swap(from_active_packets_recv_, other->from_active_packets_recv_);
  swap(gap_ms_, other->gap_ms_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRouterHealth_DataCenter::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterHealth_DataCenter::kDatacenterIdFieldNumber;
const int CMsgSteamDatagramRouterHealth_DataCenter::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramRouterHealth.DataCenter)
}
CMsgSteamDatagramRouterHealth_DataCenter::CMsgSteamDatagramRouterHealth_DataCenter(const CMsgSteamDatagramRouterHealth_DataCenter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&datacenter_id_, &from.datacenter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterHealth.DataCenter)
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&datacenter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
}

CMsgSteamDatagramRouterHealth_DataCenter::~CMsgSteamDatagramRouterHealth_DataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterHealth.DataCenter)
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth_DataCenter::SharedDtor() {
}

void CMsgSteamDatagramRouterHealth_DataCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth_DataCenter::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramRouterHealth_DataCenter& CMsgSteamDatagramRouterHealth_DataCenter::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterHealth_DataCenter();
  return *internal_default_instance();
}

CMsgSteamDatagramRouterHealth_DataCenter* CMsgSteamDatagramRouterHealth_DataCenter::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramRouterHealth_DataCenter* n = new CMsgSteamDatagramRouterHealth_DataCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&datacenter_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_) -
        reinterpret_cast<char*>(&datacenter_id_)) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramRouterHealth_DataCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramRouterHealth.DataCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 datacenter_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_datacenter_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &datacenter_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramRouterHealth.DataCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramRouterHealth.DataCenter)
  return false;
#undef DO_
}

void CMsgSteamDatagramRouterHealth_DataCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 datacenter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->datacenter_id(), output);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramRouterHealth.DataCenter)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth_DataCenter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterHealth.DataCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 datacenter_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->datacenter_id(), target);
  }

  // optional uint32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterHealth.DataCenter)
  return target;
}

size_t CMsgSteamDatagramRouterHealth_DataCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterHealth.DataCenter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed32 datacenter_id = 1;
    if (has_datacenter_id()) {
      total_size += 1 + 4;
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterHealth.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth_DataCenter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramRouterHealth_DataCenter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterHealth.DataCenter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterHealth.DataCenter)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::MergeFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterHealth.DataCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      datacenter_id_ = from.datacenter_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterHealth.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth_DataCenter::CopyFrom(const CMsgSteamDatagramRouterHealth_DataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterHealth.DataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth_DataCenter::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterHealth_DataCenter::Swap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterHealth_DataCenter::InternalSwap(CMsgSteamDatagramRouterHealth_DataCenter* other) {
  using std::swap;
  swap(datacenter_id_, other->datacenter_id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth_DataCenter::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgSteamDatagramRouterHealth::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramRouterHealth::kCpuLoadFieldNumber;
const int CMsgSteamDatagramRouterHealth::kActiveSessionsFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kOtherPktsSecFieldNumber;
const int CMsgSteamDatagramRouterHealth::kSecondsUntilShutdownFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerUserFieldNumber;
const int CMsgSteamDatagramRouterHealth::kCpuCostPerPacketFieldNumber;
const int CMsgSteamDatagramRouterHealth::kDataCentersFieldNumber;
const int CMsgSteamDatagramRouterHealth::kMagicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterHealth();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramRouterHealth)
}
CMsgSteamDatagramRouterHealth::CMsgSteamDatagramRouterHealth(const CMsgSteamDatagramRouterHealth& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_centers_(from.data_centers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_load_, &from.cpu_load_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpu_cost_per_packet_) -
    reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterHealth)
}

void CMsgSteamDatagramRouterHealth::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cpu_load_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpu_cost_per_packet_) -
      reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
}

CMsgSteamDatagramRouterHealth::~CMsgSteamDatagramRouterHealth() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterHealth)
  SharedDtor();
}

void CMsgSteamDatagramRouterHealth::SharedDtor() {
}

void CMsgSteamDatagramRouterHealth::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSteamDatagramRouterHealth::descriptor() {
  ::protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSteamDatagramRouterHealth& CMsgSteamDatagramRouterHealth::default_instance() {
  ::protobuf_steamdatagram_5fmessages_2eproto::InitDefaultsCMsgSteamDatagramRouterHealth();
  return *internal_default_instance();
}

CMsgSteamDatagramRouterHealth* CMsgSteamDatagramRouterHealth::New(::google::protobuf::Arena* arena) const {
  CMsgSteamDatagramRouterHealth* n = new CMsgSteamDatagramRouterHealth;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSteamDatagramRouterHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_centers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&cpu_load_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cpu_cost_per_packet_) -
        reinterpret_cast<char*>(&cpu_load_)) + sizeof(cpu_cost_per_packet_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSteamDatagramRouterHealth::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramRouterHealth)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float cpu_load = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_cpu_load();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_load_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_sessions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_active_sessions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 data_pkts_sec = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_data_pkts_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_pkts_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 other_pkts_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_other_pkts_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &other_pkts_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_until_shutdown = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_seconds_until_shutdown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_until_shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data_centers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 magic = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_magic();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &magic_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_cost_per_user = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_cpu_cost_per_user();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_user_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cpu_cost_per_packet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_cpu_cost_per_packet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cpu_cost_per_packet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramRouterHealth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramRouterHealth)
  return false;
#undef DO_
}

void CMsgSteamDatagramRouterHealth::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cpu_load = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->cpu_load(), output);
  }

  // optional uint32 active_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->active_sessions(), output);
  }

  // optional uint32 data_pkts_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_pkts_sec(), output);
  }

  // optional uint32 other_pkts_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->other_pkts_sec(), output);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seconds_until_shutdown(), output);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data_centers(static_cast<int>(i)), output);
  }

  // optional fixed64 magic = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->magic(), output);
  }

  // optional float cpu_cost_per_user = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cpu_cost_per_user(), output);
  }

  // optional float cpu_cost_per_packet = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cpu_cost_per_packet(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramRouterHealth)
}

::google::protobuf::uint8* CMsgSteamDatagramRouterHealth::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterHealth)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float cpu_load = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->cpu_load(), target);
  }

  // optional uint32 active_sessions = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->active_sessions(), target);
  }

  // optional uint32 data_pkts_sec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_pkts_sec(), target);
  }

  // optional uint32 other_pkts_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->other_pkts_sec(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seconds_until_shutdown(), target);
  }

  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_centers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->data_centers(static_cast<int>(i)), deterministic, target);
  }

  // optional fixed64 magic = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->magic(), target);
  }

  // optional float cpu_cost_per_user = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cpu_cost_per_user(), target);
  }

  // optional float cpu_cost_per_packet = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cpu_cost_per_packet(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterHealth)
  return target;
}

size_t CMsgSteamDatagramRouterHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterHealth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsgSteamDatagramRouterHealth.DataCenter data_centers = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->data_centers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data_centers(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional float cpu_load = 1;
    if (has_cpu_load()) {
      total_size += 1 + 4;
    }

    // optional uint32 active_sessions = 2;
    if (has_active_sessions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_sessions());
    }

    // optional uint32 data_pkts_sec = 3;
    if (has_data_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_pkts_sec());
    }

    // optional uint32 other_pkts_sec = 4;
    if (has_other_pkts_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->other_pkts_sec());
    }

    // optional uint32 seconds_until_shutdown = 5;
    if (has_seconds_until_shutdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_until_shutdown());
    }

    // optional float cpu_cost_per_user = 8;
    if (has_cpu_cost_per_user()) {
      total_size += 1 + 4;
    }

    // optional fixed64 magic = 7;
    if (has_magic()) {
      total_size += 1 + 8;
    }

    // optional float cpu_cost_per_packet = 9;
    if (has_cpu_cost_per_packet()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramRouterHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramRouterHealth* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSteamDatagramRouterHealth>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramRouterHealth)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramRouterHealth)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramRouterHealth::MergeFrom(const CMsgSteamDatagramRouterHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_centers_.MergeFrom(from.data_centers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_load_ = from.cpu_load_;
    }
    if (cached_has_bits & 0x00000002u) {
      active_sessions_ = from.active_sessions_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_pkts_sec_ = from.data_pkts_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      other_pkts_sec_ = from.other_pkts_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      seconds_until_shutdown_ = from.seconds_until_shutdown_;
    }
    if (cached_has_bits & 0x00000020u) {
      cpu_cost_per_user_ = from.cpu_cost_per_user_;
    }
    if (cached_has_bits & 0x00000040u) {
      magic_ = from.magic_;
    }
    if (cached_has_bits & 0x00000080u) {
      cpu_cost_per_packet_ = from.cpu_cost_per_packet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramRouterHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramRouterHealth::CopyFrom(const CMsgSteamDatagramRouterHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramRouterHealth::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramRouterHealth::Swap(CMsgSteamDatagramRouterHealth* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramRouterHealth::InternalSwap(CMsgSteamDatagramRouterHealth* other) {
  using std::swap;
  data_centers_.InternalSwap(&other->data_centers_);
  swap(cpu_load_, other->cpu_load_);
  swap(active_sessions_, other->active_sessions_);
  swap(data_pkts_sec_, other->data_pkts_sec_);
  swap(other_pkts_sec_, other->other_pkts_sec_);
  swap(seconds_until_shutdown_, other->seconds_until_shutdown_);
  swap(cpu_cost_per_user_, other->cpu_cost_per_user_);
  swap(magic_, other->magic_);
  swap(cpu_cost_per_packet_, other->cpu_cost_per_packet_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSteamDatagramRouterHealth::GetMetadata() const {
  protobuf_steamdatagram_5fmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_steamdatagram_5fmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
