// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netmessages.proto

#include "netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class CMsgVectorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgVector>
      _instance;
} _CMsgVector_default_instance_;
class CMsgVector2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgVector2D>
      _instance;
} _CMsgVector2D_default_instance_;
class CMsgQAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgQAngle>
      _instance;
} _CMsgQAngle_default_instance_;
class CMsgRGBADefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRGBA>
      _instance;
} _CMsgRGBA_default_instance_;
class CNETMsg_TickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_Tick>
      _instance;
} _CNETMsg_Tick_default_instance_;
class CNETMsg_StringCmdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_StringCmd>
      _instance;
} _CNETMsg_StringCmd_default_instance_;
class CNETMsg_SignonStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SignonState>
      _instance;
} _CNETMsg_SignonState_default_instance_;
class CMsg_CVars_CVarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsg_CVars_CVar>
      _instance;
} _CMsg_CVars_CVar_default_instance_;
class CMsg_CVarsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsg_CVars>
      _instance;
} _CMsg_CVars_default_instance_;
class CNETMsg_SetConVarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SetConVar>
      _instance;
} _CNETMsg_SetConVar_default_instance_;
class CNETMsg_NOPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_NOP>
      _instance;
} _CNETMsg_NOP_default_instance_;
class CNETMsg_DisconnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_Disconnect>
      _instance;
} _CNETMsg_Disconnect_default_instance_;
class CNETMsg_FileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_File>
      _instance;
} _CNETMsg_File_default_instance_;
class CNETMsg_SplitScreenUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_SplitScreenUser>
      _instance;
} _CNETMsg_SplitScreenUser_default_instance_;
class CNETMsg_PlayerAvatarDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CNETMsg_PlayerAvatarData>
      _instance;
} _CNETMsg_PlayerAvatarData_default_instance_;
class CCLCMsg_ClientInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_ClientInfo>
      _instance;
} _CCLCMsg_ClientInfo_default_instance_;
class CCLCMsg_MoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_Move>
      _instance;
} _CCLCMsg_Move_default_instance_;
class CCLCMsg_VoiceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_VoiceData>
      _instance;
} _CCLCMsg_VoiceData_default_instance_;
class CCLCMsg_BaselineAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_BaselineAck>
      _instance;
} _CCLCMsg_BaselineAck_default_instance_;
class CCLCMsg_ListenEventsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_ListenEvents>
      _instance;
} _CCLCMsg_ListenEvents_default_instance_;
class CCLCMsg_RespondCvarValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_RespondCvarValue>
      _instance;
} _CCLCMsg_RespondCvarValue_default_instance_;
class CCLCMsg_FileCRCCheckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_FileCRCCheck>
      _instance;
} _CCLCMsg_FileCRCCheck_default_instance_;
class CCLCMsg_LoadingProgressDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_LoadingProgress>
      _instance;
} _CCLCMsg_LoadingProgress_default_instance_;
class CCLCMsg_SplitPlayerConnectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_SplitPlayerConnect>
      _instance;
} _CCLCMsg_SplitPlayerConnect_default_instance_;
class CCLCMsg_CmdKeyValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_CmdKeyValues>
      _instance;
} _CCLCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_ServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ServerInfo>
      _instance;
} _CSVCMsg_ServerInfo_default_instance_;
class CSVCMsg_ClassInfo_class_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ClassInfo_class_t>
      _instance;
} _CSVCMsg_ClassInfo_class_t_default_instance_;
class CSVCMsg_ClassInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_ClassInfo>
      _instance;
} _CSVCMsg_ClassInfo_default_instance_;
class CSVCMsg_SendTable_sendprop_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SendTable_sendprop_t>
      _instance;
} _CSVCMsg_SendTable_sendprop_t_default_instance_;
class CSVCMsg_SendTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SendTable>
      _instance;
} _CSVCMsg_SendTable_default_instance_;
class CSVCMsg_PrintDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Print>
      _instance;
} _CSVCMsg_Print_default_instance_;
class CSVCMsg_SetPauseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SetPause>
      _instance;
} _CSVCMsg_SetPause_default_instance_;
class CSVCMsg_SetViewDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SetView>
      _instance;
} _CSVCMsg_SetView_default_instance_;
class CSVCMsg_CreateStringTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CreateStringTable>
      _instance;
} _CSVCMsg_CreateStringTable_default_instance_;
class CSVCMsg_UpdateStringTableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_UpdateStringTable>
      _instance;
} _CSVCMsg_UpdateStringTable_default_instance_;
class CSVCMsg_VoiceInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_VoiceInit>
      _instance;
} _CSVCMsg_VoiceInit_default_instance_;
class CSVCMsg_VoiceDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_VoiceData>
      _instance;
} _CSVCMsg_VoiceData_default_instance_;
class CSVCMsg_FixAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_FixAngle>
      _instance;
} _CSVCMsg_FixAngle_default_instance_;
class CSVCMsg_CrosshairAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CrosshairAngle>
      _instance;
} _CSVCMsg_CrosshairAngle_default_instance_;
class CSVCMsg_PrefetchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Prefetch>
      _instance;
} _CSVCMsg_Prefetch_default_instance_;
class CSVCMsg_BSPDecalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_BSPDecal>
      _instance;
} _CSVCMsg_BSPDecal_default_instance_;
class CSVCMsg_SplitScreenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_SplitScreen>
      _instance;
} _CSVCMsg_SplitScreen_default_instance_;
class CSVCMsg_GetCvarValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GetCvarValue>
      _instance;
} _CSVCMsg_GetCvarValue_default_instance_;
class CSVCMsg_MenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Menu>
      _instance;
} _CSVCMsg_Menu_default_instance_;
class CSVCMsg_UserMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_UserMessage>
      _instance;
} _CSVCMsg_UserMessage_default_instance_;
class CSVCMsg_PaintmapDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_PaintmapData>
      _instance;
} _CSVCMsg_PaintmapData_default_instance_;
class CSVCMsg_GameEvent_key_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEvent_key_t>
      _instance;
} _CSVCMsg_GameEvent_key_t_default_instance_;
class CSVCMsg_GameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEvent>
      _instance;
} _CSVCMsg_GameEvent_default_instance_;
class CSVCMsg_GameEventList_key_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList_key_t>
      _instance;
} _CSVCMsg_GameEventList_key_t_default_instance_;
class CSVCMsg_GameEventList_descriptor_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList_descriptor_t>
      _instance;
} _CSVCMsg_GameEventList_descriptor_t_default_instance_;
class CSVCMsg_GameEventListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_GameEventList>
      _instance;
} _CSVCMsg_GameEventList_default_instance_;
class CSVCMsg_TempEntitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_TempEntities>
      _instance;
} _CSVCMsg_TempEntities_default_instance_;
class CSVCMsg_PacketEntitiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_PacketEntities>
      _instance;
} _CSVCMsg_PacketEntities_default_instance_;
class CSVCMsg_Sounds_sounddata_tDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Sounds_sounddata_t>
      _instance;
} _CSVCMsg_Sounds_sounddata_t_default_instance_;
class CSVCMsg_SoundsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Sounds>
      _instance;
} _CSVCMsg_Sounds_default_instance_;
class CSVCMsg_EntityMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_EntityMsg>
      _instance;
} _CSVCMsg_EntityMsg_default_instance_;
class CSVCMsg_CmdKeyValuesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_CmdKeyValues>
      _instance;
} _CSVCMsg_CmdKeyValues_default_instance_;
class CSVCMsg_EncryptedDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_EncryptedData>
      _instance;
} _CSVCMsg_EncryptedData_default_instance_;
class CSVCMsg_HltvReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_HltvReplay>
      _instance;
} _CSVCMsg_HltvReplay_default_instance_;
class CCLCMsg_HltvReplayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_HltvReplay>
      _instance;
} _CCLCMsg_HltvReplay_default_instance_;
class CSVCMsg_Broadcast_CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_Broadcast_Command>
      _instance;
} _CSVCMsg_Broadcast_Command_default_instance_;
class CCLCMsg_HltvFixupOperatorTickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CCLCMsg_HltvFixupOperatorTick>
      _instance;
} _CCLCMsg_HltvFixupOperatorTick_default_instance_;
class CSVCMsg_HltvFixupOperatorStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSVCMsg_HltvFixupOperatorStatus>
      _instance;
} _CSVCMsg_HltvFixupOperatorStatus_default_instance_;
namespace protobuf_netmessages_2eproto {
void InitDefaultsCMsgVectorImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgVector_default_instance_;
    new (ptr) ::CMsgVector();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgVector::InitAsDefaultInstance();
}

void InitDefaultsCMsgVector() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgVectorImpl);
}

void InitDefaultsCMsgVector2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgVector2D_default_instance_;
    new (ptr) ::CMsgVector2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgVector2D::InitAsDefaultInstance();
}

void InitDefaultsCMsgVector2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgVector2DImpl);
}

void InitDefaultsCMsgQAngleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgQAngle_default_instance_;
    new (ptr) ::CMsgQAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgQAngle::InitAsDefaultInstance();
}

void InitDefaultsCMsgQAngle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgQAngleImpl);
}

void InitDefaultsCMsgRGBAImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsgRGBA_default_instance_;
    new (ptr) ::CMsgRGBA();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgRGBA::InitAsDefaultInstance();
}

void InitDefaultsCMsgRGBA() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsgRGBAImpl);
}

void InitDefaultsCNETMsg_TickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_Tick_default_instance_;
    new (ptr) ::CNETMsg_Tick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_Tick::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_Tick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_TickImpl);
}

void InitDefaultsCNETMsg_StringCmdImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_StringCmd_default_instance_;
    new (ptr) ::CNETMsg_StringCmd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_StringCmd::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_StringCmd() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_StringCmdImpl);
}

void InitDefaultsCNETMsg_SignonStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_SignonState_default_instance_;
    new (ptr) ::CNETMsg_SignonState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_SignonState::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_SignonState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_SignonStateImpl);
}

void InitDefaultsCMsg_CVars_CVarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CMsg_CVars_CVar_default_instance_;
    new (ptr) ::CMsg_CVars_CVar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsg_CVars_CVar::InitAsDefaultInstance();
}

void InitDefaultsCMsg_CVars_CVar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsg_CVars_CVarImpl);
}

void InitDefaultsCMsg_CVarsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars_CVar();
  {
    void* ptr = &::_CMsg_CVars_default_instance_;
    new (ptr) ::CMsg_CVars();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsg_CVars::InitAsDefaultInstance();
}

void InitDefaultsCMsg_CVars() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCMsg_CVarsImpl);
}

void InitDefaultsCNETMsg_SetConVarImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars();
  {
    void* ptr = &::_CNETMsg_SetConVar_default_instance_;
    new (ptr) ::CNETMsg_SetConVar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_SetConVar::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_SetConVar() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_SetConVarImpl);
}

void InitDefaultsCNETMsg_NOPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_NOP_default_instance_;
    new (ptr) ::CNETMsg_NOP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_NOP::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_NOP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_NOPImpl);
}

void InitDefaultsCNETMsg_DisconnectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_Disconnect_default_instance_;
    new (ptr) ::CNETMsg_Disconnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_Disconnect::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_Disconnect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_DisconnectImpl);
}

void InitDefaultsCNETMsg_FileImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_File_default_instance_;
    new (ptr) ::CNETMsg_File();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_File::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_File() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_FileImpl);
}

void InitDefaultsCNETMsg_SplitScreenUserImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_SplitScreenUser_default_instance_;
    new (ptr) ::CNETMsg_SplitScreenUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_SplitScreenUser::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_SplitScreenUser() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_SplitScreenUserImpl);
}

void InitDefaultsCNETMsg_PlayerAvatarDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CNETMsg_PlayerAvatarData_default_instance_;
    new (ptr) ::CNETMsg_PlayerAvatarData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CNETMsg_PlayerAvatarData::InitAsDefaultInstance();
}

void InitDefaultsCNETMsg_PlayerAvatarData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCNETMsg_PlayerAvatarDataImpl);
}

void InitDefaultsCCLCMsg_ClientInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_ClientInfo_default_instance_;
    new (ptr) ::CCLCMsg_ClientInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_ClientInfo::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_ClientInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_ClientInfoImpl);
}

void InitDefaultsCCLCMsg_MoveImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_Move_default_instance_;
    new (ptr) ::CCLCMsg_Move();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_Move::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_Move() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_MoveImpl);
}

void InitDefaultsCCLCMsg_VoiceDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_VoiceData_default_instance_;
    new (ptr) ::CCLCMsg_VoiceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_VoiceData::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_VoiceData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_VoiceDataImpl);
}

void InitDefaultsCCLCMsg_BaselineAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_BaselineAck_default_instance_;
    new (ptr) ::CCLCMsg_BaselineAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_BaselineAck::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_BaselineAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_BaselineAckImpl);
}

void InitDefaultsCCLCMsg_ListenEventsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_ListenEvents_default_instance_;
    new (ptr) ::CCLCMsg_ListenEvents();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_ListenEvents::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_ListenEvents() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_ListenEventsImpl);
}

void InitDefaultsCCLCMsg_RespondCvarValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_RespondCvarValue_default_instance_;
    new (ptr) ::CCLCMsg_RespondCvarValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_RespondCvarValue::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_RespondCvarValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_RespondCvarValueImpl);
}

void InitDefaultsCCLCMsg_FileCRCCheckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_FileCRCCheck_default_instance_;
    new (ptr) ::CCLCMsg_FileCRCCheck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_FileCRCCheck::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_FileCRCCheck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_FileCRCCheckImpl);
}

void InitDefaultsCCLCMsg_LoadingProgressImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_LoadingProgress_default_instance_;
    new (ptr) ::CCLCMsg_LoadingProgress();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_LoadingProgress::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_LoadingProgress() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_LoadingProgressImpl);
}

void InitDefaultsCCLCMsg_SplitPlayerConnectImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars();
  {
    void* ptr = &::_CCLCMsg_SplitPlayerConnect_default_instance_;
    new (ptr) ::CCLCMsg_SplitPlayerConnect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_SplitPlayerConnect::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_SplitPlayerConnect() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_SplitPlayerConnectImpl);
}

void InitDefaultsCCLCMsg_CmdKeyValuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_CmdKeyValues_default_instance_;
    new (ptr) ::CCLCMsg_CmdKeyValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_CmdKeyValues::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_CmdKeyValues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_CmdKeyValuesImpl);
}

void InitDefaultsCSVCMsg_ServerInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_ServerInfo_default_instance_;
    new (ptr) ::CSVCMsg_ServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_ServerInfo::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_ServerInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_ServerInfoImpl);
}

void InitDefaultsCSVCMsg_ClassInfo_class_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_ClassInfo_class_t_default_instance_;
    new (ptr) ::CSVCMsg_ClassInfo_class_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_ClassInfo_class_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_ClassInfo_class_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_ClassInfo_class_tImpl);
}

void InitDefaultsCSVCMsg_ClassInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ClassInfo_class_t();
  {
    void* ptr = &::_CSVCMsg_ClassInfo_default_instance_;
    new (ptr) ::CSVCMsg_ClassInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_ClassInfo::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_ClassInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_ClassInfoImpl);
}

void InitDefaultsCSVCMsg_SendTable_sendprop_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_SendTable_sendprop_t_default_instance_;
    new (ptr) ::CSVCMsg_SendTable_sendprop_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_SendTable_sendprop_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_SendTable_sendprop_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SendTable_sendprop_tImpl);
}

void InitDefaultsCSVCMsg_SendTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SendTable_sendprop_t();
  {
    void* ptr = &::_CSVCMsg_SendTable_default_instance_;
    new (ptr) ::CSVCMsg_SendTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_SendTable::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_SendTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SendTableImpl);
}

void InitDefaultsCSVCMsg_PrintImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_Print_default_instance_;
    new (ptr) ::CSVCMsg_Print();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Print::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Print() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_PrintImpl);
}

void InitDefaultsCSVCMsg_SetPauseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_SetPause_default_instance_;
    new (ptr) ::CSVCMsg_SetPause();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_SetPause::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_SetPause() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SetPauseImpl);
}

void InitDefaultsCSVCMsg_SetViewImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_SetView_default_instance_;
    new (ptr) ::CSVCMsg_SetView();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_SetView::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_SetView() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SetViewImpl);
}

void InitDefaultsCSVCMsg_CreateStringTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_CreateStringTable_default_instance_;
    new (ptr) ::CSVCMsg_CreateStringTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_CreateStringTable::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_CreateStringTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_CreateStringTableImpl);
}

void InitDefaultsCSVCMsg_UpdateStringTableImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_UpdateStringTable_default_instance_;
    new (ptr) ::CSVCMsg_UpdateStringTable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_UpdateStringTable::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_UpdateStringTable() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_UpdateStringTableImpl);
}

void InitDefaultsCSVCMsg_VoiceInitImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_VoiceInit_default_instance_;
    new (ptr) ::CSVCMsg_VoiceInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_VoiceInit::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_VoiceInit() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_VoiceInitImpl);
}

void InitDefaultsCSVCMsg_VoiceDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_VoiceData_default_instance_;
    new (ptr) ::CSVCMsg_VoiceData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_VoiceData::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_VoiceData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_VoiceDataImpl);
}

void InitDefaultsCSVCMsg_FixAngleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  {
    void* ptr = &::_CSVCMsg_FixAngle_default_instance_;
    new (ptr) ::CSVCMsg_FixAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_FixAngle::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_FixAngle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_FixAngleImpl);
}

void InitDefaultsCSVCMsg_CrosshairAngleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  {
    void* ptr = &::_CSVCMsg_CrosshairAngle_default_instance_;
    new (ptr) ::CSVCMsg_CrosshairAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_CrosshairAngle::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_CrosshairAngle() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_CrosshairAngleImpl);
}

void InitDefaultsCSVCMsg_PrefetchImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_Prefetch_default_instance_;
    new (ptr) ::CSVCMsg_Prefetch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Prefetch::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Prefetch() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_PrefetchImpl);
}

void InitDefaultsCSVCMsg_BSPDecalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsgVector();
  {
    void* ptr = &::_CSVCMsg_BSPDecal_default_instance_;
    new (ptr) ::CSVCMsg_BSPDecal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_BSPDecal::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_BSPDecal() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_BSPDecalImpl);
}

void InitDefaultsCSVCMsg_SplitScreenImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_SplitScreen_default_instance_;
    new (ptr) ::CSVCMsg_SplitScreen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_SplitScreen::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_SplitScreen() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SplitScreenImpl);
}

void InitDefaultsCSVCMsg_GetCvarValueImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_GetCvarValue_default_instance_;
    new (ptr) ::CSVCMsg_GetCvarValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GetCvarValue::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GetCvarValue() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GetCvarValueImpl);
}

void InitDefaultsCSVCMsg_MenuImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_Menu_default_instance_;
    new (ptr) ::CSVCMsg_Menu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Menu::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Menu() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_MenuImpl);
}

void InitDefaultsCSVCMsg_UserMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_UserMessage_default_instance_;
    new (ptr) ::CSVCMsg_UserMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_UserMessage::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_UserMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_UserMessageImpl);
}

void InitDefaultsCSVCMsg_PaintmapDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_PaintmapData_default_instance_;
    new (ptr) ::CSVCMsg_PaintmapData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_PaintmapData::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_PaintmapData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_PaintmapDataImpl);
}

void InitDefaultsCSVCMsg_GameEvent_key_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_GameEvent_key_t_default_instance_;
    new (ptr) ::CSVCMsg_GameEvent_key_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GameEvent_key_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GameEvent_key_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GameEvent_key_tImpl);
}

void InitDefaultsCSVCMsg_GameEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEvent_key_t();
  {
    void* ptr = &::_CSVCMsg_GameEvent_default_instance_;
    new (ptr) ::CSVCMsg_GameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GameEvent::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GameEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GameEventImpl);
}

void InitDefaultsCSVCMsg_GameEventList_key_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_GameEventList_key_t_default_instance_;
    new (ptr) ::CSVCMsg_GameEventList_key_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GameEventList_key_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GameEventList_key_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GameEventList_key_tImpl);
}

void InitDefaultsCSVCMsg_GameEventList_descriptor_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_key_t();
  {
    void* ptr = &::_CSVCMsg_GameEventList_descriptor_t_default_instance_;
    new (ptr) ::CSVCMsg_GameEventList_descriptor_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GameEventList_descriptor_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GameEventList_descriptor_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GameEventList_descriptor_tImpl);
}

void InitDefaultsCSVCMsg_GameEventListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_descriptor_t();
  {
    void* ptr = &::_CSVCMsg_GameEventList_default_instance_;
    new (ptr) ::CSVCMsg_GameEventList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_GameEventList::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_GameEventList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_GameEventListImpl);
}

void InitDefaultsCSVCMsg_TempEntitiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_TempEntities_default_instance_;
    new (ptr) ::CSVCMsg_TempEntities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_TempEntities::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_TempEntities() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_TempEntitiesImpl);
}

void InitDefaultsCSVCMsg_PacketEntitiesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_PacketEntities_default_instance_;
    new (ptr) ::CSVCMsg_PacketEntities();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_PacketEntities::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_PacketEntities() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_PacketEntitiesImpl);
}

void InitDefaultsCSVCMsg_Sounds_sounddata_tImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_Sounds_sounddata_t_default_instance_;
    new (ptr) ::CSVCMsg_Sounds_sounddata_t();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Sounds_sounddata_t::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Sounds_sounddata_t() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_Sounds_sounddata_tImpl);
}

void InitDefaultsCSVCMsg_SoundsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Sounds_sounddata_t();
  {
    void* ptr = &::_CSVCMsg_Sounds_default_instance_;
    new (ptr) ::CSVCMsg_Sounds();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Sounds::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Sounds() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_SoundsImpl);
}

void InitDefaultsCSVCMsg_EntityMsgImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_EntityMsg_default_instance_;
    new (ptr) ::CSVCMsg_EntityMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_EntityMsg::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_EntityMsg() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_EntityMsgImpl);
}

void InitDefaultsCSVCMsg_CmdKeyValuesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_CmdKeyValues_default_instance_;
    new (ptr) ::CSVCMsg_CmdKeyValues();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_CmdKeyValues::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_CmdKeyValues() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_CmdKeyValuesImpl);
}

void InitDefaultsCSVCMsg_EncryptedDataImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_EncryptedData_default_instance_;
    new (ptr) ::CSVCMsg_EncryptedData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_EncryptedData::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_EncryptedData() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_EncryptedDataImpl);
}

void InitDefaultsCSVCMsg_HltvReplayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_HltvReplay_default_instance_;
    new (ptr) ::CSVCMsg_HltvReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_HltvReplay::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_HltvReplay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_HltvReplayImpl);
}

void InitDefaultsCCLCMsg_HltvReplayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CCLCMsg_HltvReplay_default_instance_;
    new (ptr) ::CCLCMsg_HltvReplay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_HltvReplay::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_HltvReplay() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_HltvReplayImpl);
}

void InitDefaultsCSVCMsg_Broadcast_CommandImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_Broadcast_Command_default_instance_;
    new (ptr) ::CSVCMsg_Broadcast_Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_Broadcast_Command::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_Broadcast_Command() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_Broadcast_CommandImpl);
}

void InitDefaultsCCLCMsg_HltvFixupOperatorTickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsgVector();
  protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  {
    void* ptr = &::_CCLCMsg_HltvFixupOperatorTick_default_instance_;
    new (ptr) ::CCLCMsg_HltvFixupOperatorTick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CCLCMsg_HltvFixupOperatorTick::InitAsDefaultInstance();
}

void InitDefaultsCCLCMsg_HltvFixupOperatorTick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCCLCMsg_HltvFixupOperatorTickImpl);
}

void InitDefaultsCSVCMsg_HltvFixupOperatorStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_CSVCMsg_HltvFixupOperatorStatus_default_instance_;
    new (ptr) ::CSVCMsg_HltvFixupOperatorStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CSVCMsg_HltvFixupOperatorStatus::InitAsDefaultInstance();
}

void InitDefaultsCSVCMsg_HltvFixupOperatorStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCSVCMsg_HltvFixupOperatorStatusImpl);
}

::google::protobuf::Metadata file_level_metadata[63];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgVector2D, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgQAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgQAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgQAngle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgQAngle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgQAngle, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsgRGBA, a_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, host_computationtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, host_computationtime_std_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, host_framestarttime_std_deviation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Tick, hltv_replay_flags_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_StringCmd, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_StringCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_StringCmd, command_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, signon_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, spawn_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, num_server_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, players_networkids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SignonState, map_name_),
  1,
  2,
  3,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars_CVar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars_CVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars_CVar, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars_CVar, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars_CVar, dictionary_name_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CMsg_CVars, cvars_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SetConVar, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SetConVar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SetConVar, convars_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_NOP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_NOP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Disconnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_Disconnect, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, transfer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, is_replay_demo_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_File, deny_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SplitScreenUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_SplitScreenUser, slot_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_PlayerAvatarData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_PlayerAvatarData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_PlayerAvatarData, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CNETMsg_PlayerAvatarData, rgb_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, send_table_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, server_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, is_hltv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, is_replay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, friends_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, friends_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ClientInfo, custom_files_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_Move, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_Move, num_backup_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_Move, num_new_commands_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_Move, data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, xuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, sequence_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, section_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_VoiceData, uncompressed_sample_offset_),
  0,
  1,
  5,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_BaselineAck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_BaselineAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_BaselineAck, baseline_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_BaselineAck, baseline_nr_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ListenEvents, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ListenEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_ListenEvents, event_mask_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, status_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_RespondCvarValue, value_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, code_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, file_fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, md5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, file_hash_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, file_len_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, pack_file_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_FileCRCCheck, pack_file_number_),
  3,
  0,
  4,
  1,
  5,
  2,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_LoadingProgress, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_LoadingProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_LoadingProgress, progress_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_SplitPlayerConnect, convars_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_CmdKeyValues, keyvalues_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, server_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, is_dedicated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, is_official_valve_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, is_hltv_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, is_replay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, is_redirecting_to_proxy_relay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, c_os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, map_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, client_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, string_table_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, max_clients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, max_classes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, tick_interval_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, game_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, map_group_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, sky_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, host_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ServerInfo, ugc_map_id_),
  5,
  6,
  7,
  8,
  9,
  10,
  21,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo_class_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo_class_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo_class_t, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo_class_t, data_table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo_class_t, class_name_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo, create_on_client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_ClassInfo, classes_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, var_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, dt_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, num_elements_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, low_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, high_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable_sendprop_t, num_bits_),
  2,
  0,
  3,
  4,
  1,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, is_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, net_table_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, needs_decoder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SendTable, props_),
  1,
  0,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Print, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Print, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Print, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetPause, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetPause, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetPause, paused_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetView, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SetView, entity_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, max_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, num_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, user_data_fixed_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, user_data_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, user_data_size_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CreateStringTable, string_data_),
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UpdateStringTable, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UpdateStringTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UpdateStringTable, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UpdateStringTable, num_changed_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UpdateStringTable, string_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceInit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceInit, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceInit, codec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceInit, version_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, proximity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, xuid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, audible_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, voice_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, caster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, sequence_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, section_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_VoiceData, uncompressed_sample_offset_),
  1,
  4,
  3,
  2,
  0,
  5,
  9,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_FixAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_FixAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_FixAngle, relative_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_FixAngle, angle_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CrosshairAngle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CrosshairAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CrosshairAngle, angle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Prefetch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Prefetch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Prefetch, sound_index_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, decal_texture_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, model_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_BSPDecal, low_priority_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SplitScreen, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SplitScreen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SplitScreen, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SplitScreen, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_SplitScreen, player_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GetCvarValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GetCvarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GetCvarValue, cookie_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GetCvarValue, cvar_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Menu, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Menu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Menu, dialog_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Menu, menu_key_values_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UserMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UserMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UserMessage, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UserMessage, msg_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_UserMessage, passthrough_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PaintmapData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PaintmapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PaintmapData, paintmap_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_float_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_long_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_short_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_byte_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_bool_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_uint64_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent_key_t, val_wstring_),
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEvent, passthrough_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_key_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_key_t, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_key_t, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_descriptor_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_descriptor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_descriptor_t, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_descriptor_t, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList_descriptor_t, keys_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_GameEventList, descriptors_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_TempEntities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_TempEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_TempEntities, reliable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_TempEntities, num_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_TempEntities, entity_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, max_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, updated_entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, is_delta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, update_baseline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, baseline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, delta_from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_PacketEntities, entity_data_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, origin_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, origin_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, origin_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, delay_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, sequence_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, entity_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, sound_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, sound_num_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, speaker_entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, random_seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, sound_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, is_sentence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds_sounddata_t, is_ambient_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds, reliable_sound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Sounds, sounds_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EntityMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EntityMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EntityMsg, ent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EntityMsg, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EntityMsg, ent_data_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CmdKeyValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CmdKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_CmdKeyValues, keyvalues_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EncryptedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EncryptedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EncryptedData, encrypted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_EncryptedData, key_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, primary_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, replay_stop_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, replay_start_at_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, replay_slowdown_begin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, replay_slowdown_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvReplay, replay_slowdown_rate_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, request_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, slowdown_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, slowdown_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, primary_target_ent_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvReplay, event_time_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Broadcast_Command, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Broadcast_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_Broadcast_Command, cmd_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, props_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, eye_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, observer_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, cameraman_scoreboard_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, observer_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CCLCMsg_HltvFixupOperatorTick, view_offset_),
  4,
  0,
  1,
  2,
  5,
  6,
  7,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvFixupOperatorStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvFixupOperatorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvFixupOperatorStatus, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::CSVCMsg_HltvFixupOperatorStatus, override_operator_name_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgVector)},
  { 11, 18, sizeof(::CMsgVector2D)},
  { 20, 28, sizeof(::CMsgQAngle)},
  { 31, 40, sizeof(::CMsgRGBA)},
  { 44, 54, sizeof(::CNETMsg_Tick)},
  { 59, 65, sizeof(::CNETMsg_StringCmd)},
  { 66, 76, sizeof(::CNETMsg_SignonState)},
  { 81, 89, sizeof(::CMsg_CVars_CVar)},
  { 92, 98, sizeof(::CMsg_CVars)},
  { 99, 105, sizeof(::CNETMsg_SetConVar)},
  { 106, 111, sizeof(::CNETMsg_NOP)},
  { 111, 117, sizeof(::CNETMsg_Disconnect)},
  { 118, 127, sizeof(::CNETMsg_File)},
  { 131, 137, sizeof(::CNETMsg_SplitScreenUser)},
  { 138, 145, sizeof(::CNETMsg_PlayerAvatarData)},
  { 147, 159, sizeof(::CCLCMsg_ClientInfo)},
  { 166, 174, sizeof(::CCLCMsg_Move)},
  { 177, 188, sizeof(::CCLCMsg_VoiceData)},
  { 194, 201, sizeof(::CCLCMsg_BaselineAck)},
  { 203, 209, sizeof(::CCLCMsg_ListenEvents)},
  { 210, 219, sizeof(::CCLCMsg_RespondCvarValue)},
  { 223, 239, sizeof(::CCLCMsg_FileCRCCheck)},
  { 250, 256, sizeof(::CCLCMsg_LoadingProgress)},
  { 257, 263, sizeof(::CCLCMsg_SplitPlayerConnect)},
  { 264, 270, sizeof(::CCLCMsg_CmdKeyValues)},
  { 271, 298, sizeof(::CSVCMsg_ServerInfo)},
  { 320, 328, sizeof(::CSVCMsg_ClassInfo_class_t)},
  { 331, 338, sizeof(::CSVCMsg_ClassInfo)},
  { 340, 354, sizeof(::CSVCMsg_SendTable_sendprop_t)},
  { 363, 372, sizeof(::CSVCMsg_SendTable)},
  { 376, 382, sizeof(::CSVCMsg_Print)},
  { 383, 389, sizeof(::CSVCMsg_SetPause)},
  { 390, 396, sizeof(::CSVCMsg_SetView)},
  { 397, 410, sizeof(::CSVCMsg_CreateStringTable)},
  { 418, 426, sizeof(::CSVCMsg_UpdateStringTable)},
  { 429, 437, sizeof(::CSVCMsg_VoiceInit)},
  { 440, 455, sizeof(::CSVCMsg_VoiceData)},
  { 465, 472, sizeof(::CSVCMsg_FixAngle)},
  { 474, 480, sizeof(::CSVCMsg_CrosshairAngle)},
  { 481, 487, sizeof(::CSVCMsg_Prefetch)},
  { 488, 498, sizeof(::CSVCMsg_BSPDecal)},
  { 503, 511, sizeof(::CSVCMsg_SplitScreen)},
  { 514, 521, sizeof(::CSVCMsg_GetCvarValue)},
  { 523, 530, sizeof(::CSVCMsg_Menu)},
  { 532, 540, sizeof(::CSVCMsg_UserMessage)},
  { 543, 549, sizeof(::CSVCMsg_PaintmapData)},
  { 550, 564, sizeof(::CSVCMsg_GameEvent_key_t)},
  { 573, 582, sizeof(::CSVCMsg_GameEvent)},
  { 586, 593, sizeof(::CSVCMsg_GameEventList_key_t)},
  { 595, 603, sizeof(::CSVCMsg_GameEventList_descriptor_t)},
  { 606, 612, sizeof(::CSVCMsg_GameEventList)},
  { 613, 621, sizeof(::CSVCMsg_TempEntities)},
  { 624, 636, sizeof(::CSVCMsg_PacketEntities)},
  { 643, 665, sizeof(::CSVCMsg_Sounds_sounddata_t)},
  { 682, 689, sizeof(::CSVCMsg_Sounds)},
  { 691, 699, sizeof(::CSVCMsg_EntityMsg)},
  { 702, 708, sizeof(::CSVCMsg_CmdKeyValues)},
  { 709, 716, sizeof(::CSVCMsg_EncryptedData)},
  { 718, 730, sizeof(::CSVCMsg_HltvReplay)},
  { 737, 747, sizeof(::CCLCMsg_HltvReplay)},
  { 752, 758, sizeof(::CSVCMsg_Broadcast_Command)},
  { 759, 772, sizeof(::CCLCMsg_HltvFixupOperatorTick)},
  { 780, 787, sizeof(::CSVCMsg_HltvFixupOperatorStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgVector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgVector2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgQAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsgRGBA_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_Tick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_StringCmd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_SignonState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsg_CVars_CVar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CMsg_CVars_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_SetConVar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_NOP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_Disconnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_File_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_SplitScreenUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CNETMsg_PlayerAvatarData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_ClientInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_Move_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_VoiceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_BaselineAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_ListenEvents_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_RespondCvarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_FileCRCCheck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_LoadingProgress_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_SplitPlayerConnect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_ServerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_ClassInfo_class_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_ClassInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_SendTable_sendprop_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_SendTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Print_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_SetPause_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_SetView_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_CreateStringTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_UpdateStringTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_VoiceInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_VoiceData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_FixAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_CrosshairAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Prefetch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_BSPDecal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_SplitScreen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GetCvarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Menu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_UserMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_PaintmapData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GameEvent_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GameEventList_key_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GameEventList_descriptor_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_GameEventList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_TempEntities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_PacketEntities_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Sounds_sounddata_t_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Sounds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_EntityMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_CmdKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_EncryptedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_HltvReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_HltvReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_Broadcast_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CCLCMsg_HltvFixupOperatorTick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_CSVCMsg_HltvFixupOperatorStatus_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "netmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 63);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021netmessages.proto\032 google/protobuf/des"
      "criptor.proto\"-\n\nCMsgVector\022\t\n\001x\030\001 \001(\002\022\t"
      "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"$\n\014CMsgVector2D\022\t\n\001"
      "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"-\n\nCMsgQAngle\022\t\n\001x\030\001 "
      "\001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"6\n\010CMsgRGBA\022\t\n"
      "\001r\030\001 \001(\005\022\t\n\001g\030\002 \001(\005\022\t\n\001b\030\003 \001(\005\022\t\n\001a\030\004 \001("
      "\005\"\254\001\n\014CNETMsg_Tick\022\014\n\004tick\030\001 \001(\r\022\034\n\024host"
      "_computationtime\030\004 \001(\r\022*\n\"host_computati"
      "ontime_std_deviation\030\005 \001(\r\022)\n!host_frame"
      "starttime_std_deviation\030\006 \001(\r\022\031\n\021hltv_re"
      "play_flags\030\007 \001(\r\"$\n\021CNETMsg_StringCmd\022\017\n"
      "\007command\030\001 \001(\t\"\212\001\n\023CNETMsg_SignonState\022\024"
      "\n\014signon_state\030\001 \001(\r\022\023\n\013spawn_count\030\002 \001("
      "\r\022\032\n\022num_server_players\030\003 \001(\r\022\032\n\022players"
      "_networkids\030\004 \003(\t\022\020\n\010map_name\030\005 \001(\t\"k\n\nC"
      "Msg_CVars\022\037\n\005cvars\030\001 \003(\0132\020.CMsg_CVars.CV"
      "ar\032<\n\004CVar\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\022"
      "\027\n\017dictionary_name\030\003 \001(\r\"1\n\021CNETMsg_SetC"
      "onVar\022\034\n\007convars\030\001 \001(\0132\013.CMsg_CVars\"\r\n\013C"
      "NETMsg_NOP\"\"\n\022CNETMsg_Disconnect\022\014\n\004text"
      "\030\001 \001(\t\"a\n\014CNETMsg_File\022\023\n\013transfer_id\030\001 "
      "\001(\005\022\021\n\tfile_name\030\002 \001(\t\022\033\n\023is_replay_demo"
      "_file\030\003 \001(\010\022\014\n\004deny\030\004 \001(\010\"\'\n\027CNETMsg_Spl"
      "itScreenUser\022\014\n\004slot\030\001 \001(\005\":\n\030CNETMsg_Pl"
      "ayerAvatarData\022\021\n\taccountid\030\001 \001(\r\022\013\n\003rgb"
      "\030\002 \001(\014\"\246\001\n\022CCLCMsg_ClientInfo\022\026\n\016send_ta"
      "ble_crc\030\001 \001(\007\022\024\n\014server_count\030\002 \001(\r\022\017\n\007i"
      "s_hltv\030\003 \001(\010\022\021\n\tis_replay\030\004 \001(\010\022\022\n\nfrien"
      "ds_id\030\005 \001(\r\022\024\n\014friends_name\030\006 \001(\t\022\024\n\014cus"
      "tom_files\030\007 \003(\007\"S\n\014CCLCMsg_Move\022\033\n\023num_b"
      "ackup_commands\030\001 \001(\r\022\030\n\020num_new_commands"
      "\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\"\300\001\n\021CCLCMsg_VoiceDa"
      "ta\022\014\n\004data\030\001 \001(\014\022\014\n\004xuid\030\002 \001(\006\022;\n\006format"
      "\030\003 \001(\0162\022.VoiceDataFormat_t:\027VOICEDATA_FO"
      "RMAT_ENGINE\022\026\n\016sequence_bytes\030\004 \001(\005\022\026\n\016s"
      "ection_number\030\005 \001(\r\022\"\n\032uncompressed_samp"
      "le_offset\030\006 \001(\r\"A\n\023CCLCMsg_BaselineAck\022\025"
      "\n\rbaseline_tick\030\001 \001(\005\022\023\n\013baseline_nr\030\002 \001"
      "(\005\"*\n\024CCLCMsg_ListenEvents\022\022\n\nevent_mask"
      "\030\001 \003(\007\"\\\n\030CCLCMsg_RespondCvarValue\022\016\n\006co"
      "okie\030\001 \001(\005\022\023\n\013status_code\030\002 \001(\005\022\014\n\004name\030"
      "\003 \001(\t\022\r\n\005value\030\004 \001(\t\"\353\001\n\024CCLCMsg_FileCRC"
      "Check\022\021\n\tcode_path\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\022\025"
      "\n\rcode_filename\030\003 \001(\005\022\020\n\010filename\030\004 \001(\t\022"
      "\025\n\rfile_fraction\030\005 \001(\005\022\013\n\003md5\030\006 \001(\014\022\013\n\003c"
      "rc\030\007 \001(\r\022\026\n\016file_hash_type\030\010 \001(\005\022\020\n\010file"
      "_len\030\t \001(\005\022\024\n\014pack_file_id\030\n \001(\005\022\030\n\020pack"
      "_file_number\030\013 \001(\005\"+\n\027CCLCMsg_LoadingPro"
      "gress\022\020\n\010progress\030\001 \001(\005\":\n\032CCLCMsg_Split"
      "PlayerConnect\022\034\n\007convars\030\001 \001(\0132\013.CMsg_CV"
      "ars\")\n\024CCLCMsg_CmdKeyValues\022\021\n\tkeyvalues"
      "\030\001 \001(\014\"\352\003\n\022CSVCMsg_ServerInfo\022\020\n\010protoco"
      "l\030\001 \001(\005\022\024\n\014server_count\030\002 \001(\005\022\024\n\014is_dedi"
      "cated\030\003 \001(\010\022 \n\030is_official_valve_server\030"
      "\004 \001(\010\022\017\n\007is_hltv\030\005 \001(\010\022\021\n\tis_replay\030\006 \001("
      "\010\022%\n\035is_redirecting_to_proxy_relay\030\025 \001(\010"
      "\022\014\n\004c_os\030\007 \001(\005\022\017\n\007map_crc\030\010 \001(\007\022\022\n\nclien"
      "t_crc\030\t \001(\007\022\030\n\020string_table_crc\030\n \001(\007\022\023\n"
      "\013max_clients\030\013 \001(\005\022\023\n\013max_classes\030\014 \001(\005\022"
      "\023\n\013player_slot\030\r \001(\005\022\025\n\rtick_interval\030\016 "
      "\001(\002\022\020\n\010game_dir\030\017 \001(\t\022\020\n\010map_name\030\020 \001(\t\022"
      "\026\n\016map_group_name\030\021 \001(\t\022\020\n\010sky_name\030\022 \001("
      "\t\022\021\n\thost_name\030\023 \001(\t\022\021\n\tpublic_ip\030\024 \001(\r\022"
      "\022\n\nugc_map_id\030\026 \001(\004\"\244\001\n\021CSVCMsg_ClassInf"
      "o\022\030\n\020create_on_client\030\001 \001(\010\022+\n\007classes\030\002"
      " \003(\0132\032.CSVCMsg_ClassInfo.class_t\032H\n\007clas"
      "s_t\022\020\n\010class_id\030\001 \001(\005\022\027\n\017data_table_name"
      "\030\002 \001(\t\022\022\n\nclass_name\030\003 \001(\t\"\260\002\n\021CSVCMsg_S"
      "endTable\022\016\n\006is_end\030\001 \001(\010\022\026\n\016net_table_na"
      "me\030\002 \001(\t\022\025\n\rneeds_decoder\030\003 \001(\010\022,\n\005props"
      "\030\004 \003(\0132\035.CSVCMsg_SendTable.sendprop_t\032\255\001"
      "\n\nsendprop_t\022\014\n\004type\030\001 \001(\005\022\020\n\010var_name\030\002"
      " \001(\t\022\r\n\005flags\030\003 \001(\005\022\020\n\010priority\030\004 \001(\005\022\017\n"
      "\007dt_name\030\005 \001(\t\022\024\n\014num_elements\030\006 \001(\005\022\021\n\t"
      "low_value\030\007 \001(\002\022\022\n\nhigh_value\030\010 \001(\002\022\020\n\010n"
      "um_bits\030\t \001(\005\"\035\n\rCSVCMsg_Print\022\014\n\004text\030\001"
      " \001(\t\"\"\n\020CSVCMsg_SetPause\022\016\n\006paused\030\001 \001(\010"
      "\"\'\n\017CSVCMsg_SetView\022\024\n\014entity_index\030\001 \001("
      "\005\"\312\001\n\031CSVCMsg_CreateStringTable\022\014\n\004name\030"
      "\001 \001(\t\022\023\n\013max_entries\030\002 \001(\005\022\023\n\013num_entrie"
      "s\030\003 \001(\005\022\034\n\024user_data_fixed_size\030\004 \001(\010\022\026\n"
      "\016user_data_size\030\005 \001(\005\022\033\n\023user_data_size_"
      "bits\030\006 \001(\005\022\r\n\005flags\030\007 \001(\005\022\023\n\013string_data"
      "\030\010 \001(\014\"_\n\031CSVCMsg_UpdateStringTable\022\020\n\010t"
      "able_id\030\001 \001(\005\022\033\n\023num_changed_entries\030\002 \001"
      "(\005\022\023\n\013string_data\030\003 \001(\014\"G\n\021CSVCMsg_Voice"
      "Init\022\017\n\007quality\030\001 \001(\005\022\r\n\005codec\030\002 \001(\t\022\022\n\007"
      "version\030\003 \001(\005:\0010\"\217\002\n\021CSVCMsg_VoiceData\022\016"
      "\n\006client\030\001 \001(\005\022\021\n\tproximity\030\002 \001(\010\022\014\n\004xui"
      "d\030\003 \001(\006\022\024\n\014audible_mask\030\004 \001(\005\022\022\n\nvoice_d"
      "ata\030\005 \001(\014\022\016\n\006caster\030\006 \001(\010\022;\n\006format\030\007 \001("
      "\0162\022.VoiceDataFormat_t:\027VOICEDATA_FORMAT_"
      "ENGINE\022\026\n\016sequence_bytes\030\010 \001(\005\022\026\n\016sectio"
      "n_number\030\t \001(\r\022\"\n\032uncompressed_sample_of"
      "fset\030\n \001(\r\"@\n\020CSVCMsg_FixAngle\022\020\n\010relati"
      "ve\030\001 \001(\010\022\032\n\005angle\030\002 \001(\0132\013.CMsgQAngle\"4\n\026"
      "CSVCMsg_CrosshairAngle\022\032\n\005angle\030\001 \001(\0132\013."
      "CMsgQAngle\"\'\n\020CSVCMsg_Prefetch\022\023\n\013sound_"
      "index\030\001 \001(\005\"\212\001\n\020CSVCMsg_BSPDecal\022\030\n\003pos\030"
      "\001 \001(\0132\013.CMsgVector\022\033\n\023decal_texture_inde"
      "x\030\002 \001(\005\022\024\n\014entity_index\030\003 \001(\005\022\023\n\013model_i"
      "ndex\030\004 \001(\005\022\024\n\014low_priority\030\005 \001(\010\"z\n\023CSVC"
      "Msg_SplitScreen\022\?\n\004type\030\001 \001(\0162\030.ESplitSc"
      "reenMessageType:\027MSG_SPLITSCREEN_ADDUSER"
      "\022\014\n\004slot\030\002 \001(\005\022\024\n\014player_index\030\003 \001(\005\"9\n\024"
      "CSVCMsg_GetCvarValue\022\016\n\006cookie\030\001 \001(\005\022\021\n\t"
      "cvar_name\030\002 \001(\t\"<\n\014CSVCMsg_Menu\022\023\n\013dialo"
      "g_type\030\001 \001(\005\022\027\n\017menu_key_values\030\002 \001(\014\"N\n"
      "\023CSVCMsg_UserMessage\022\020\n\010msg_type\030\001 \001(\005\022\020"
      "\n\010msg_data\030\002 \001(\014\022\023\n\013passthrough\030\003 \001(\005\"(\n"
      "\024CSVCMsg_PaintmapData\022\020\n\010paintmap\030\001 \001(\014\""
      "\246\002\n\021CSVCMsg_GameEvent\022\022\n\nevent_name\030\001 \001("
      "\t\022\017\n\007eventid\030\002 \001(\005\022&\n\004keys\030\003 \003(\0132\030.CSVCM"
      "sg_GameEvent.key_t\022\023\n\013passthrough\030\004 \001(\005\032"
      "\256\001\n\005key_t\022\014\n\004type\030\001 \001(\005\022\022\n\nval_string\030\002 "
      "\001(\t\022\021\n\tval_float\030\003 \001(\002\022\020\n\010val_long\030\004 \001(\005"
      "\022\021\n\tval_short\030\005 \001(\005\022\020\n\010val_byte\030\006 \001(\005\022\020\n"
      "\010val_bool\030\007 \001(\010\022\022\n\nval_uint64\030\010 \001(\004\022\023\n\013v"
      "al_wstring\030\t \001(\014\"\321\001\n\025CSVCMsg_GameEventLi"
      "st\0228\n\013descriptors\030\001 \003(\0132#.CSVCMsg_GameEv"
      "entList.descriptor_t\032#\n\005key_t\022\014\n\004type\030\001 "
      "\001(\005\022\014\n\004name\030\002 \001(\t\032Y\n\014descriptor_t\022\017\n\007eve"
      "ntid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022*\n\004keys\030\003 \003(\0132\034"
      ".CSVCMsg_GameEventList.key_t\"R\n\024CSVCMsg_"
      "TempEntities\022\020\n\010reliable\030\001 \001(\010\022\023\n\013num_en"
      "tries\030\002 \001(\005\022\023\n\013entity_data\030\003 \001(\014\"\254\001\n\026CSV"
      "CMsg_PacketEntities\022\023\n\013max_entries\030\001 \001(\005"
      "\022\027\n\017updated_entries\030\002 \001(\005\022\020\n\010is_delta\030\003 "
      "\001(\010\022\027\n\017update_baseline\030\004 \001(\010\022\020\n\010baseline"
      "\030\005 \001(\005\022\022\n\ndelta_from\030\006 \001(\005\022\023\n\013entity_dat"
      "a\030\007 \001(\014\"\266\003\n\016CSVCMsg_Sounds\022\026\n\016reliable_s"
      "ound\030\001 \001(\010\022+\n\006sounds\030\002 \003(\0132\033.CSVCMsg_Sou"
      "nds.sounddata_t\032\336\002\n\013sounddata_t\022\020\n\010origi"
      "n_x\030\001 \001(\021\022\020\n\010origin_y\030\002 \001(\021\022\020\n\010origin_z\030"
      "\003 \001(\021\022\016\n\006volume\030\004 \001(\r\022\023\n\013delay_value\030\005 \001"
      "(\002\022\027\n\017sequence_number\030\006 \001(\005\022\024\n\014entity_in"
      "dex\030\007 \001(\005\022\017\n\007channel\030\010 \001(\005\022\r\n\005pitch\030\t \001("
      "\005\022\r\n\005flags\030\n \001(\005\022\021\n\tsound_num\030\013 \001(\r\022\030\n\020s"
      "ound_num_handle\030\014 \001(\007\022\026\n\016speaker_entity\030"
      "\r \001(\005\022\023\n\013random_seed\030\016 \001(\005\022\023\n\013sound_leve"
      "l\030\017 \001(\005\022\023\n\013is_sentence\030\020 \001(\010\022\022\n\nis_ambie"
      "nt\030\021 \001(\010\"J\n\021CSVCMsg_EntityMsg\022\021\n\tent_ind"
      "ex\030\001 \001(\005\022\020\n\010class_id\030\002 \001(\005\022\020\n\010ent_data\030\003"
      " \001(\014\")\n\024CSVCMsg_CmdKeyValues\022\021\n\tkeyvalue"
      "s\030\001 \001(\014\"<\n\025CSVCMsg_EncryptedData\022\021\n\tencr"
      "ypted\030\001 \001(\014\022\020\n\010key_type\030\002 \001(\005\"\306\001\n\022CSVCMs"
      "g_HltvReplay\022\r\n\005delay\030\001 \001(\005\022\026\n\016primary_t"
      "arget\030\002 \001(\005\022\026\n\016replay_stop_at\030\003 \001(\005\022\027\n\017r"
      "eplay_start_at\030\004 \001(\005\022\035\n\025replay_slowdown_"
      "begin\030\005 \001(\005\022\033\n\023replay_slowdown_end\030\006 \001(\005"
      "\022\034\n\024replay_slowdown_rate\030\007 \001(\002\"\213\001\n\022CCLCM"
      "sg_HltvReplay\022\017\n\007request\030\001 \001(\005\022\027\n\017slowdo"
      "wn_length\030\002 \001(\002\022\025\n\rslowdown_rate\030\003 \001(\002\022 "
      "\n\030primary_target_ent_index\030\004 \001(\005\022\022\n\neven"
      "t_time\030\005 \001(\002\"(\n\031CSVCMsg_Broadcast_Comman"
      "d\022\013\n\003cmd\030\001 \001(\t\"\357\001\n\035CCLCMsg_HltvFixupOper"
      "atorTick\022\014\n\004tick\030\001 \001(\005\022\022\n\nprops_data\030\002 \001"
      "(\014\022\033\n\006origin\030\003 \001(\0132\013.CMsgVector\022\037\n\neye_a"
      "ngles\030\004 \001(\0132\013.CMsgQAngle\022\025\n\robserver_mod"
      "e\030\005 \001(\005\022\034\n\024cameraman_scoreboard\030\006 \001(\010\022\027\n"
      "\017observer_target\030\007 \001(\005\022 \n\013view_offset\030\010 "
      "\001(\0132\013.CMsgVector\"O\n\037CSVCMsg_HltvFixupOpe"
      "ratorStatus\022\014\n\004mode\030\001 \001(\r\022\036\n\026override_op"
      "erator_name\030\002 \001(\t*\271\001\n\014NET_Messages\022\013\n\007ne"
      "t_NOP\020\000\022\022\n\016net_Disconnect\020\001\022\014\n\010net_File\020"
      "\002\022\027\n\023net_SplitScreenUser\020\003\022\014\n\010net_Tick\020\004"
      "\022\021\n\rnet_StringCmd\020\005\022\021\n\rnet_SetConVar\020\006\022\023"
      "\n\017net_SignonState\020\007\022\030\n\024net_PlayerAvatarD"
      "ata\020d*\326\002\n\014CLC_Messages\022\022\n\016clc_ClientInfo"
      "\020\010\022\014\n\010clc_Move\020\t\022\021\n\rclc_VoiceData\020\n\022\023\n\017c"
      "lc_BaselineAck\020\013\022\024\n\020clc_ListenEvents\020\014\022\030"
      "\n\024clc_RespondCvarValue\020\r\022\024\n\020clc_FileCRCC"
      "heck\020\016\022\027\n\023clc_LoadingProgress\020\017\022\032\n\026clc_S"
      "plitPlayerConnect\020\020\022\025\n\021clc_ClientMessage"
      "\020\021\022\024\n\020clc_CmdKeyValues\020\022\022\022\n\016clc_HltvRepl"
      "ay\020\024\022\035\n\031clc_HltvFixupOperatorTick\020\025\022!\n\035c"
      "lc_HltvFixupOperatorReceiver\020\026*L\n\021VoiceD"
      "ataFormat_t\022\032\n\026VOICEDATA_FORMAT_STEAM\020\000\022"
      "\033\n\027VOICEDATA_FORMAT_ENGINE\020\001*y\n\027ESplitSc"
      "reenMessageType\022\033\n\027MSG_SPLITSCREEN_ADDUS"
      "ER\020\000\022\036\n\032MSG_SPLITSCREEN_REMOVEUSER\020\001\022\035\n\031"
      "MSG_SPLITSCREEN_TYPE_BITS\020\001\032\002\020\001*\204\005\n\014SVC_"
      "Messages\022\022\n\016svc_ServerInfo\020\010\022\021\n\rsvc_Send"
      "Table\020\t\022\021\n\rsvc_ClassInfo\020\n\022\020\n\014svc_SetPau"
      "se\020\013\022\031\n\025svc_CreateStringTable\020\014\022\031\n\025svc_U"
      "pdateStringTable\020\r\022\021\n\rsvc_VoiceInit\020\016\022\021\n"
      "\rsvc_VoiceData\020\017\022\r\n\tsvc_Print\020\020\022\016\n\nsvc_S"
      "ounds\020\021\022\017\n\013svc_SetView\020\022\022\020\n\014svc_FixAngle"
      "\020\023\022\026\n\022svc_CrosshairAngle\020\024\022\020\n\014svc_BSPDec"
      "al\020\025\022\023\n\017svc_SplitScreen\020\026\022\023\n\017svc_UserMes"
      "sage\020\027\022\025\n\021svc_EntityMessage\020\030\022\021\n\rsvc_Gam"
      "eEvent\020\031\022\026\n\022svc_PacketEntities\020\032\022\024\n\020svc_"
      "TempEntities\020\033\022\020\n\014svc_Prefetch\020\034\022\014\n\010svc_"
      "Menu\020\035\022\025\n\021svc_GameEventList\020\036\022\024\n\020svc_Get"
      "CvarValue\020\037\022\024\n\020svc_PaintmapData\020!\022\024\n\020svc"
      "_CmdKeyValues\020\"\022\025\n\021svc_EncryptedData\020#\022\022"
      "\n\016svc_HltvReplay\020$\022\031\n\025svc_Broadcast_Comm"
      "and\020&\022\037\n\033svc_HltvFixupOperatorStatus\020\'*\207"
      "\001\n\021ReplayEventType_t\022\027\n\023REPLAY_EVENT_CAN"
      "CEL\020\000\022\026\n\022REPLAY_EVENT_DEATH\020\001\022\030\n\024REPLAY_"
      "EVENT_GENERIC\020\002\022\'\n#REPLAY_EVENT_STUCK_NE"
      "ED_FULL_UPDATE\020\003B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netmessages.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fdescriptor_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_netmessages_2eproto
const ::google::protobuf::EnumDescriptor* NET_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[0];
}
bool NET_Messages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CLC_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[1];
}
bool CLC_Messages_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VoiceDataFormat_t_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[2];
}
bool VoiceDataFormat_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESplitScreenMessageType_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[3];
}
bool ESplitScreenMessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SVC_Messages_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[4];
}
bool SVC_Messages_IsValid(int value) {
  switch (value) {
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 33:
    case 34:
    case 35:
    case 36:
    case 38:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplayEventType_t_descriptor() {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netmessages_2eproto::file_level_enum_descriptors[5];
}
bool ReplayEventType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgVector::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVector::kXFieldNumber;
const int CMsgVector::kYFieldNumber;
const int CMsgVector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVector::CMsgVector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsgVector();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector)
}
CMsgVector::CMsgVector(const CMsgVector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector)
}

void CMsgVector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CMsgVector::~CMsgVector() {
  // @@protoc_insertion_point(destructor:CMsgVector)
  SharedDtor();
}

void CMsgVector::SharedDtor() {
}

void CMsgVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgVector& CMsgVector::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsgVector();
  return *internal_default_instance();
}

CMsgVector* CMsgVector::New(::google::protobuf::Arena* arena) const {
  CMsgVector* n = new CMsgVector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector)
  return false;
#undef DO_
}

void CMsgVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector)
}

::google::protobuf::uint8* CMsgVector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector)
  return target;
}

size_t CMsgVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector)
    MergeFrom(*source);
  }
}

void CMsgVector::MergeFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector::CopyFrom(const CMsgVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector::IsInitialized() const {
  return true;
}

void CMsgVector::Swap(CMsgVector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVector::InternalSwap(CMsgVector* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVector::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgVector2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgVector2D::kXFieldNumber;
const int CMsgVector2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgVector2D::CMsgVector2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsgVector2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgVector2D)
}
CMsgVector2D::CMsgVector2D(const CMsgVector2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CMsgVector2D)
}

void CMsgVector2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CMsgVector2D::~CMsgVector2D() {
  // @@protoc_insertion_point(destructor:CMsgVector2D)
  SharedDtor();
}

void CMsgVector2D::SharedDtor() {
}

void CMsgVector2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgVector2D::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgVector2D& CMsgVector2D::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsgVector2D();
  return *internal_default_instance();
}

CMsgVector2D* CMsgVector2D::New(::google::protobuf::Arena* arena) const {
  CMsgVector2D* n = new CMsgVector2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgVector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVector2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgVector2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgVector2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgVector2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgVector2D)
  return false;
#undef DO_
}

void CMsgVector2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgVector2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgVector2D)
}

::google::protobuf::uint8* CMsgVector2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVector2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVector2D)
  return target;
}

size_t CMsgVector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVector2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgVector2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVector2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgVector2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVector2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVector2D)
    MergeFrom(*source);
  }
}

void CMsgVector2D::MergeFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVector2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVector2D::CopyFrom(const CMsgVector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVector2D::IsInitialized() const {
  return true;
}

void CMsgVector2D::Swap(CMsgVector2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgVector2D::InternalSwap(CMsgVector2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgVector2D::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgQAngle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQAngle::kXFieldNumber;
const int CMsgQAngle::kYFieldNumber;
const int CMsgQAngle::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQAngle::CMsgQAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgQAngle)
}
CMsgQAngle::CMsgQAngle(const CMsgQAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgQAngle)
}

void CMsgQAngle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CMsgQAngle::~CMsgQAngle() {
  // @@protoc_insertion_point(destructor:CMsgQAngle)
  SharedDtor();
}

void CMsgQAngle::SharedDtor() {
}

void CMsgQAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQAngle::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgQAngle& CMsgQAngle::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  return *internal_default_instance();
}

CMsgQAngle* CMsgQAngle::New(::google::protobuf::Arena* arena) const {
  CMsgQAngle* n = new CMsgQAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgQAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgQAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgQAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgQAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgQAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgQAngle)
  return false;
#undef DO_
}

void CMsgQAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgQAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgQAngle)
}

::google::protobuf::uint8* CMsgQAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgQAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgQAngle)
  return target;
}

size_t CMsgQAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgQAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgQAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgQAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgQAngle)
    MergeFrom(*source);
  }
}

void CMsgQAngle::MergeFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgQAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQAngle::CopyFrom(const CMsgQAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgQAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQAngle::IsInitialized() const {
  return true;
}

void CMsgQAngle::Swap(CMsgQAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQAngle::InternalSwap(CMsgQAngle* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgQAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsgRGBA::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRGBA::kRFieldNumber;
const int CMsgRGBA::kGFieldNumber;
const int CMsgRGBA::kBFieldNumber;
const int CMsgRGBA::kAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRGBA::CMsgRGBA()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsgRGBA();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgRGBA)
}
CMsgRGBA::CMsgRGBA(const CMsgRGBA& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:CMsgRGBA)
}

void CMsgRGBA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

CMsgRGBA::~CMsgRGBA() {
  // @@protoc_insertion_point(destructor:CMsgRGBA)
  SharedDtor();
}

void CMsgRGBA::SharedDtor() {
}

void CMsgRGBA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRGBA::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRGBA& CMsgRGBA::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsgRGBA();
  return *internal_default_instance();
}

CMsgRGBA* CMsgRGBA::New(::google::protobuf::Arena* arena) const {
  CMsgRGBA* n = new CMsgRGBA;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRGBA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a_) -
        reinterpret_cast<char*>(&r_)) + sizeof(a_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRGBA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgRGBA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 a = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgRGBA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgRGBA)
  return false;
#undef DO_
}

void CMsgRGBA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgRGBA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // optional int32 a = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->a(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgRGBA)
}

::google::protobuf::uint8* CMsgRGBA::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRGBA)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 r = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // optional int32 g = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // optional int32 b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // optional int32 a = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->a(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRGBA)
  return target;
}

size_t CMsgRGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRGBA)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->r());
    }

    // optional int32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g());
    }

    // optional int32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->b());
    }

    // optional int32 a = 4;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRGBA::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRGBA* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRGBA>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRGBA)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRGBA)
    MergeFrom(*source);
  }
}

void CMsgRGBA::MergeFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000002u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000004u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000008u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRGBA::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRGBA::CopyFrom(const CMsgRGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRGBA::IsInitialized() const {
  return true;
}

void CMsgRGBA::Swap(CMsgRGBA* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRGBA::InternalSwap(CMsgRGBA* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(a_, other->a_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRGBA::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_Tick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_Tick::kTickFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeFieldNumber;
const int CNETMsg_Tick::kHostComputationtimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHostFramestarttimeStdDeviationFieldNumber;
const int CNETMsg_Tick::kHltvReplayFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_Tick::CNETMsg_Tick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_Tick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Tick)
}
CNETMsg_Tick::CNETMsg_Tick(const CNETMsg_Tick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tick_, &from.tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&hltv_replay_flags_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(hltv_replay_flags_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Tick)
}

void CNETMsg_Tick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hltv_replay_flags_) -
      reinterpret_cast<char*>(&tick_)) + sizeof(hltv_replay_flags_));
}

CNETMsg_Tick::~CNETMsg_Tick() {
  // @@protoc_insertion_point(destructor:CNETMsg_Tick)
  SharedDtor();
}

void CNETMsg_Tick::SharedDtor() {
}

void CNETMsg_Tick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Tick::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_Tick& CNETMsg_Tick::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_Tick();
  return *internal_default_instance();
}

CNETMsg_Tick* CNETMsg_Tick::New(::google::protobuf::Arena* arena) const {
  CNETMsg_Tick* n = new CNETMsg_Tick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_Tick::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Tick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hltv_replay_flags_) -
        reinterpret_cast<char*>(&tick_)) + sizeof(hltv_replay_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_Tick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Tick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_computationtime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_host_computationtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_computationtime_std_deviation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_host_computationtime_std_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_computationtime_std_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 host_framestarttime_std_deviation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_host_framestarttime_std_deviation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_framestarttime_std_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hltv_replay_flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_hltv_replay_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hltv_replay_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Tick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Tick)
  return false;
#undef DO_
}

void CNETMsg_Tick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Tick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tick(), output);
  }

  // optional uint32 host_computationtime = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->host_computationtime(), output);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->host_computationtime_std_deviation(), output);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->host_framestarttime_std_deviation(), output);
  }

  // optional uint32 hltv_replay_flags = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->hltv_replay_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Tick)
}

::google::protobuf::uint8* CNETMsg_Tick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Tick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tick(), target);
  }

  // optional uint32 host_computationtime = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->host_computationtime(), target);
  }

  // optional uint32 host_computationtime_std_deviation = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->host_computationtime_std_deviation(), target);
  }

  // optional uint32 host_framestarttime_std_deviation = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->host_framestarttime_std_deviation(), target);
  }

  // optional uint32 hltv_replay_flags = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->hltv_replay_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Tick)
  return target;
}

size_t CNETMsg_Tick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Tick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 host_computationtime = 4;
    if (has_host_computationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime());
    }

    // optional uint32 host_computationtime_std_deviation = 5;
    if (has_host_computationtime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_computationtime_std_deviation());
    }

    // optional uint32 host_framestarttime_std_deviation = 6;
    if (has_host_framestarttime_std_deviation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->host_framestarttime_std_deviation());
    }

    // optional uint32 hltv_replay_flags = 7;
    if (has_hltv_replay_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hltv_replay_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Tick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Tick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_Tick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Tick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Tick)
    MergeFrom(*source);
  }
}

void CNETMsg_Tick::MergeFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Tick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      host_computationtime_ = from.host_computationtime_;
    }
    if (cached_has_bits & 0x00000004u) {
      host_computationtime_std_deviation_ = from.host_computationtime_std_deviation_;
    }
    if (cached_has_bits & 0x00000008u) {
      host_framestarttime_std_deviation_ = from.host_framestarttime_std_deviation_;
    }
    if (cached_has_bits & 0x00000010u) {
      hltv_replay_flags_ = from.hltv_replay_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_Tick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Tick::CopyFrom(const CNETMsg_Tick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Tick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Tick::IsInitialized() const {
  return true;
}

void CNETMsg_Tick::Swap(CNETMsg_Tick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_Tick::InternalSwap(CNETMsg_Tick* other) {
  using std::swap;
  swap(tick_, other->tick_);
  swap(host_computationtime_, other->host_computationtime_);
  swap(host_computationtime_std_deviation_, other->host_computationtime_std_deviation_);
  swap(host_framestarttime_std_deviation_, other->host_framestarttime_std_deviation_);
  swap(hltv_replay_flags_, other->hltv_replay_flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_Tick::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_StringCmd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_StringCmd::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_StringCmd::CNETMsg_StringCmd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_StringCmd();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_StringCmd)
}
CNETMsg_StringCmd::CNETMsg_StringCmd(const CNETMsg_StringCmd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_command()) {
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_StringCmd)
}

void CNETMsg_StringCmd::SharedCtor() {
  _cached_size_ = 0;
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_StringCmd::~CNETMsg_StringCmd() {
  // @@protoc_insertion_point(destructor:CNETMsg_StringCmd)
  SharedDtor();
}

void CNETMsg_StringCmd::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_StringCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_StringCmd::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_StringCmd& CNETMsg_StringCmd::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_StringCmd();
  return *internal_default_instance();
}

CNETMsg_StringCmd* CNETMsg_StringCmd::New(::google::protobuf::Arena* arena) const {
  CNETMsg_StringCmd* n = new CNETMsg_StringCmd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_StringCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_StringCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!command_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*command_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_StringCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_StringCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), static_cast<int>(this->command().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_StringCmd.command");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_StringCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_StringCmd)
  return false;
#undef DO_
}

void CNETMsg_StringCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_StringCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_StringCmd)
}

::google::protobuf::uint8* CNETMsg_StringCmd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_StringCmd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), static_cast<int>(this->command().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_StringCmd.command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_StringCmd)
  return target;
}

size_t CNETMsg_StringCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_StringCmd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_StringCmd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_StringCmd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_StringCmd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_StringCmd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_StringCmd)
    MergeFrom(*source);
  }
}

void CNETMsg_StringCmd::MergeFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_StringCmd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_command()) {
    set_has_command();
    command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
  }
}

void CNETMsg_StringCmd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_StringCmd::CopyFrom(const CNETMsg_StringCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_StringCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_StringCmd::IsInitialized() const {
  return true;
}

void CNETMsg_StringCmd::Swap(CNETMsg_StringCmd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_StringCmd::InternalSwap(CNETMsg_StringCmd* other) {
  using std::swap;
  command_.Swap(&other->command_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_StringCmd::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_SignonState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SignonState::kSignonStateFieldNumber;
const int CNETMsg_SignonState::kSpawnCountFieldNumber;
const int CNETMsg_SignonState::kNumServerPlayersFieldNumber;
const int CNETMsg_SignonState::kPlayersNetworkidsFieldNumber;
const int CNETMsg_SignonState::kMapNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SignonState::CNETMsg_SignonState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SignonState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SignonState)
}
CNETMsg_SignonState::CNETMsg_SignonState(const CNETMsg_SignonState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_networkids_(from.players_networkids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&signon_state_, &from.signon_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_server_players_) -
    reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SignonState)
}

void CNETMsg_SignonState::SharedCtor() {
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&signon_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_server_players_) -
      reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
}

CNETMsg_SignonState::~CNETMsg_SignonState() {
  // @@protoc_insertion_point(destructor:CNETMsg_SignonState)
  SharedDtor();
}

void CNETMsg_SignonState::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_SignonState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SignonState::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_SignonState& CNETMsg_SignonState::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SignonState();
  return *internal_default_instance();
}

CNETMsg_SignonState* CNETMsg_SignonState::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SignonState* n = new CNETMsg_SignonState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SignonState::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SignonState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_networkids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*map_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&signon_state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_server_players_) -
        reinterpret_cast<char*>(&signon_state_)) + sizeof(num_server_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SignonState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SignonState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 signon_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_signon_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &signon_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spawn_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_spawn_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spawn_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_server_players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_server_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_server_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string players_networkids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_players_networkids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->players_networkids(this->players_networkids_size() - 1).data(),
            static_cast<int>(this->players_networkids(this->players_networkids_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_SignonState.players_networkids");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_SignonState.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SignonState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SignonState)
  return false;
#undef DO_
}

void CNETMsg_SignonState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SignonState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 signon_state = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->signon_state(), output);
  }

  // optional uint32 spawn_count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spawn_count(), output);
  }

  // optional uint32 num_server_players = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_server_players(), output);
  }

  // repeated string players_networkids = 4;
  for (int i = 0, n = this->players_networkids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players_networkids(i).data(), static_cast<int>(this->players_networkids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->players_networkids(i), output);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SignonState)
}

::google::protobuf::uint8* CNETMsg_SignonState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SignonState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 signon_state = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->signon_state(), target);
  }

  // optional uint32 spawn_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spawn_count(), target);
  }

  // optional uint32 num_server_players = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_server_players(), target);
  }

  // repeated string players_networkids = 4;
  for (int i = 0, n = this->players_networkids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->players_networkids(i).data(), static_cast<int>(this->players_networkids(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.players_networkids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->players_networkids(i), target);
  }

  // optional string map_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_SignonState.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SignonState)
  return target;
}

size_t CNETMsg_SignonState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SignonState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string players_networkids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->players_networkids_size());
  for (int i = 0, n = this->players_networkids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->players_networkids(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional uint32 signon_state = 1;
    if (has_signon_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->signon_state());
    }

    // optional uint32 spawn_count = 2;
    if (has_spawn_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spawn_count());
    }

    // optional uint32 num_server_players = 3;
    if (has_num_server_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_server_players());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SignonState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SignonState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SignonState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SignonState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SignonState)
    MergeFrom(*source);
  }
}

void CNETMsg_SignonState::MergeFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SignonState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_networkids_.MergeFrom(from.players_networkids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      signon_state_ = from.signon_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      spawn_count_ = from.spawn_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_server_players_ = from.num_server_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_SignonState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SignonState::CopyFrom(const CNETMsg_SignonState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SignonState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SignonState::IsInitialized() const {
  return true;
}

void CNETMsg_SignonState::Swap(CNETMsg_SignonState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SignonState::InternalSwap(CNETMsg_SignonState* other) {
  using std::swap;
  players_networkids_.InternalSwap(&other->players_networkids_);
  map_name_.Swap(&other->map_name_);
  swap(signon_state_, other->signon_state_);
  swap(spawn_count_, other->spawn_count_);
  swap(num_server_players_, other->num_server_players_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SignonState::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsg_CVars_CVar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsg_CVars_CVar::kNameFieldNumber;
const int CMsg_CVars_CVar::kValueFieldNumber;
const int CMsg_CVars_CVar::kDictionaryNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsg_CVars_CVar::CMsg_CVars_CVar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars_CVar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars.CVar)
}
CMsg_CVars_CVar::CMsg_CVars_CVar(const CMsg_CVars_CVar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  dictionary_name_ = from.dictionary_name_;
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars.CVar)
}

void CMsg_CVars_CVar::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dictionary_name_ = 0u;
}

CMsg_CVars_CVar::~CMsg_CVars_CVar() {
  // @@protoc_insertion_point(destructor:CMsg_CVars.CVar)
  SharedDtor();
}

void CMsg_CVars_CVar::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsg_CVars_CVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars_CVar::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsg_CVars_CVar& CMsg_CVars_CVar::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars_CVar();
  return *internal_default_instance();
}

CMsg_CVars_CVar* CMsg_CVars_CVar::New(::google::protobuf::Arena* arena) const {
  CMsg_CVars_CVar* n = new CMsg_CVars_CVar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsg_CVars_CVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars.CVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  dictionary_name_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsg_CVars_CVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars.CVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsg_CVars.CVar.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CMsg_CVars.CVar.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dictionary_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_dictionary_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dictionary_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars.CVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars.CVar)
  return false;
#undef DO_
}

void CMsg_CVars_CVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars.CVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional uint32 dictionary_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dictionary_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars.CVar)
}

::google::protobuf::uint8* CMsg_CVars_CVar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars.CVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CMsg_CVars.CVar.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional uint32 dictionary_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dictionary_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars.CVar)
  return target;
}

size_t CMsg_CVars_CVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars.CVar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional uint32 dictionary_name = 3;
    if (has_dictionary_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dictionary_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars_CVar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars_CVar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsg_CVars_CVar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars.CVar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars.CVar)
    MergeFrom(*source);
  }
}

void CMsg_CVars_CVar::MergeFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars.CVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      dictionary_name_ = from.dictionary_name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsg_CVars_CVar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars_CVar::CopyFrom(const CMsg_CVars_CVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars.CVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars_CVar::IsInitialized() const {
  return true;
}

void CMsg_CVars_CVar::Swap(CMsg_CVars_CVar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsg_CVars_CVar::InternalSwap(CMsg_CVars_CVar* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(dictionary_name_, other->dictionary_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsg_CVars_CVar::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CMsg_CVars::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsg_CVars::kCvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsg_CVars::CMsg_CVars()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsg_CVars)
}
CMsg_CVars::CMsg_CVars(const CMsg_CVars& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      cvars_(from.cvars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsg_CVars)
}

void CMsg_CVars::SharedCtor() {
  _cached_size_ = 0;
}

CMsg_CVars::~CMsg_CVars() {
  // @@protoc_insertion_point(destructor:CMsg_CVars)
  SharedDtor();
}

void CMsg_CVars::SharedDtor() {
}

void CMsg_CVars::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsg_CVars::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsg_CVars& CMsg_CVars::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCMsg_CVars();
  return *internal_default_instance();
}

CMsg_CVars* CMsg_CVars::New(::google::protobuf::Arena* arena) const {
  CMsg_CVars* n = new CMsg_CVars;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsg_CVars::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsg_CVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cvars_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsg_CVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsg_CVars)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CMsg_CVars.CVar cvars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_cvars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsg_CVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsg_CVars)
  return false;
#undef DO_
}

void CMsg_CVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsg_CVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cvars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cvars(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsg_CVars)
}

::google::protobuf::uint8* CMsg_CVars::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CMsg_CVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsg_CVars.CVar cvars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cvars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cvars(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsg_CVars)
  return target;
}

size_t CMsg_CVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsg_CVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CMsg_CVars.CVar cvars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cvars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cvars(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsg_CVars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsg_CVars* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsg_CVars>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsg_CVars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsg_CVars)
    MergeFrom(*source);
  }
}

void CMsg_CVars::MergeFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsg_CVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cvars_.MergeFrom(from.cvars_);
}

void CMsg_CVars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsg_CVars::CopyFrom(const CMsg_CVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsg_CVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsg_CVars::IsInitialized() const {
  return true;
}

void CMsg_CVars::Swap(CMsg_CVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsg_CVars::InternalSwap(CMsg_CVars* other) {
  using std::swap;
  cvars_.InternalSwap(&other->cvars_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsg_CVars::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_SetConVar::InitAsDefaultInstance() {
  ::_CNETMsg_SetConVar_default_instance_._instance.get_mutable()->convars_ = const_cast< ::CMsg_CVars*>(
      ::CMsg_CVars::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SetConVar::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SetConVar::CNETMsg_SetConVar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SetConVar();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SetConVar)
}
CNETMsg_SetConVar::CNETMsg_SetConVar(const CNETMsg_SetConVar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SetConVar)
}

void CNETMsg_SetConVar::SharedCtor() {
  _cached_size_ = 0;
  convars_ = NULL;
}

CNETMsg_SetConVar::~CNETMsg_SetConVar() {
  // @@protoc_insertion_point(destructor:CNETMsg_SetConVar)
  SharedDtor();
}

void CNETMsg_SetConVar::SharedDtor() {
  if (this != internal_default_instance()) delete convars_;
}

void CNETMsg_SetConVar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SetConVar::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_SetConVar& CNETMsg_SetConVar::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SetConVar();
  return *internal_default_instance();
}

CNETMsg_SetConVar* CNETMsg_SetConVar::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SetConVar* n = new CNETMsg_SetConVar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SetConVar::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SetConVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(convars_ != NULL);
    convars_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SetConVar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SetConVar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsg_CVars convars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SetConVar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SetConVar)
  return false;
#undef DO_
}

void CNETMsg_SetConVar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SetConVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->convars_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SetConVar)
}

::google::protobuf::uint8* CNETMsg_SetConVar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SetConVar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->convars_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SetConVar)
  return target;
}

size_t CNETMsg_SetConVar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SetConVar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->convars_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SetConVar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SetConVar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SetConVar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SetConVar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SetConVar)
    MergeFrom(*source);
  }
}

void CNETMsg_SetConVar::MergeFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SetConVar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_convars()) {
    mutable_convars()->::CMsg_CVars::MergeFrom(from.convars());
  }
}

void CNETMsg_SetConVar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SetConVar::CopyFrom(const CNETMsg_SetConVar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SetConVar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SetConVar::IsInitialized() const {
  return true;
}

void CNETMsg_SetConVar::Swap(CNETMsg_SetConVar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SetConVar::InternalSwap(CNETMsg_SetConVar* other) {
  using std::swap;
  swap(convars_, other->convars_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SetConVar::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_NOP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_NOP::CNETMsg_NOP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_NOP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_NOP)
}
CNETMsg_NOP::CNETMsg_NOP(const CNETMsg_NOP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CNETMsg_NOP)
}

void CNETMsg_NOP::SharedCtor() {
  _cached_size_ = 0;
}

CNETMsg_NOP::~CNETMsg_NOP() {
  // @@protoc_insertion_point(destructor:CNETMsg_NOP)
  SharedDtor();
}

void CNETMsg_NOP::SharedDtor() {
}

void CNETMsg_NOP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_NOP::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_NOP& CNETMsg_NOP::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_NOP();
  return *internal_default_instance();
}

CNETMsg_NOP* CNETMsg_NOP::New(::google::protobuf::Arena* arena) const {
  CNETMsg_NOP* n = new CNETMsg_NOP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_NOP::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_NOP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_NOP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_NOP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_NOP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_NOP)
  return false;
#undef DO_
}

void CNETMsg_NOP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_NOP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_NOP)
}

::google::protobuf::uint8* CNETMsg_NOP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_NOP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_NOP)
  return target;
}

size_t CNETMsg_NOP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_NOP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_NOP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_NOP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_NOP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_NOP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_NOP)
    MergeFrom(*source);
  }
}

void CNETMsg_NOP::MergeFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_NOP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CNETMsg_NOP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_NOP::CopyFrom(const CNETMsg_NOP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_NOP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_NOP::IsInitialized() const {
  return true;
}

void CNETMsg_NOP::Swap(CNETMsg_NOP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_NOP::InternalSwap(CNETMsg_NOP* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_NOP::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_Disconnect::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_Disconnect::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_Disconnect::CNETMsg_Disconnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_Disconnect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_Disconnect)
}
CNETMsg_Disconnect::CNETMsg_Disconnect(const CNETMsg_Disconnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:CNETMsg_Disconnect)
}

void CNETMsg_Disconnect::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CNETMsg_Disconnect::~CNETMsg_Disconnect() {
  // @@protoc_insertion_point(destructor:CNETMsg_Disconnect)
  SharedDtor();
}

void CNETMsg_Disconnect::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_Disconnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_Disconnect::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_Disconnect& CNETMsg_Disconnect::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_Disconnect();
  return *internal_default_instance();
}

CNETMsg_Disconnect* CNETMsg_Disconnect::New(::google::protobuf::Arena* arena) const {
  CNETMsg_Disconnect* n = new CNETMsg_Disconnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_Disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_Disconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_Disconnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_Disconnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_Disconnect.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_Disconnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_Disconnect)
  return false;
#undef DO_
}

void CNETMsg_Disconnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_Disconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_Disconnect.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_Disconnect)
}

::google::protobuf::uint8* CNETMsg_Disconnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_Disconnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_Disconnect.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_Disconnect)
  return target;
}

size_t CNETMsg_Disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_Disconnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_Disconnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_Disconnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_Disconnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_Disconnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_Disconnect)
    MergeFrom(*source);
  }
}

void CNETMsg_Disconnect::MergeFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_Disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CNETMsg_Disconnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_Disconnect::CopyFrom(const CNETMsg_Disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_Disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_Disconnect::IsInitialized() const {
  return true;
}

void CNETMsg_Disconnect::Swap(CNETMsg_Disconnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_Disconnect::InternalSwap(CNETMsg_Disconnect* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_Disconnect::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_File::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_File::kTransferIdFieldNumber;
const int CNETMsg_File::kFileNameFieldNumber;
const int CNETMsg_File::kIsReplayDemoFileFieldNumber;
const int CNETMsg_File::kDenyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_File::CNETMsg_File()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_File();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_File)
}
CNETMsg_File::CNETMsg_File(const CNETMsg_File& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&transfer_id_, &from.transfer_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deny_) -
    reinterpret_cast<char*>(&transfer_id_)) + sizeof(deny_));
  // @@protoc_insertion_point(copy_constructor:CNETMsg_File)
}

void CNETMsg_File::SharedCtor() {
  _cached_size_ = 0;
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transfer_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deny_) -
      reinterpret_cast<char*>(&transfer_id_)) + sizeof(deny_));
}

CNETMsg_File::~CNETMsg_File() {
  // @@protoc_insertion_point(destructor:CNETMsg_File)
  SharedDtor();
}

void CNETMsg_File::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_File::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_File& CNETMsg_File::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_File();
  return *internal_default_instance();
}

CNETMsg_File* CNETMsg_File::New(::google::protobuf::Arena* arena) const {
  CNETMsg_File* n = new CNETMsg_File;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_File::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!file_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*file_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&transfer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deny_) -
        reinterpret_cast<char*>(&transfer_id_)) + sizeof(deny_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 transfer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transfer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transfer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CNETMsg_File.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay_demo_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_replay_demo_file();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_demo_file_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool deny = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_deny();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_File)
  return false;
#undef DO_
}

void CNETMsg_File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transfer_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->transfer_id(), output);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_File.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_name(), output);
  }

  // optional bool is_replay_demo_file = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_replay_demo_file(), output);
  }

  // optional bool deny = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->deny(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_File)
}

::google::protobuf::uint8* CNETMsg_File::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_File)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 transfer_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->transfer_id(), target);
  }

  // optional string file_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CNETMsg_File.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file_name(), target);
  }

  // optional bool is_replay_demo_file = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_replay_demo_file(), target);
  }

  // optional bool deny = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->deny(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_File)
  return target;
}

size_t CNETMsg_File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_File)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional int32 transfer_id = 1;
    if (has_transfer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transfer_id());
    }

    // optional bool is_replay_demo_file = 3;
    if (has_is_replay_demo_file()) {
      total_size += 1 + 1;
    }

    // optional bool deny = 4;
    if (has_deny()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_File::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_File)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_File* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_File>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_File)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_File)
    MergeFrom(*source);
  }
}

void CNETMsg_File::MergeFrom(const CNETMsg_File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_File)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_file_name();
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      transfer_id_ = from.transfer_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_replay_demo_file_ = from.is_replay_demo_file_;
    }
    if (cached_has_bits & 0x00000008u) {
      deny_ = from.deny_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_File::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_File::CopyFrom(const CNETMsg_File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_File::IsInitialized() const {
  return true;
}

void CNETMsg_File::Swap(CNETMsg_File* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_File::InternalSwap(CNETMsg_File* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_);
  swap(transfer_id_, other->transfer_id_);
  swap(is_replay_demo_file_, other->is_replay_demo_file_);
  swap(deny_, other->deny_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_File::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_SplitScreenUser::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_SplitScreenUser::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SplitScreenUser();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_SplitScreenUser)
}
CNETMsg_SplitScreenUser::CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_SplitScreenUser)
}

void CNETMsg_SplitScreenUser::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
}

CNETMsg_SplitScreenUser::~CNETMsg_SplitScreenUser() {
  // @@protoc_insertion_point(destructor:CNETMsg_SplitScreenUser)
  SharedDtor();
}

void CNETMsg_SplitScreenUser::SharedDtor() {
}

void CNETMsg_SplitScreenUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_SplitScreenUser::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_SplitScreenUser& CNETMsg_SplitScreenUser::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_SplitScreenUser();
  return *internal_default_instance();
}

CNETMsg_SplitScreenUser* CNETMsg_SplitScreenUser::New(::google::protobuf::Arena* arena) const {
  CNETMsg_SplitScreenUser* n = new CNETMsg_SplitScreenUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_SplitScreenUser::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_SplitScreenUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_SplitScreenUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_SplitScreenUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_SplitScreenUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_SplitScreenUser)
  return false;
#undef DO_
}

void CNETMsg_SplitScreenUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_SplitScreenUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_SplitScreenUser)
}

::google::protobuf::uint8* CNETMsg_SplitScreenUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_SplitScreenUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_SplitScreenUser)
  return target;
}

size_t CNETMsg_SplitScreenUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_SplitScreenUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 slot = 1;
  if (has_slot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_SplitScreenUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_SplitScreenUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_SplitScreenUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_SplitScreenUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_SplitScreenUser)
    MergeFrom(*source);
  }
}

void CNETMsg_SplitScreenUser::MergeFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_SplitScreenUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_slot()) {
    set_slot(from.slot());
  }
}

void CNETMsg_SplitScreenUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_SplitScreenUser::CopyFrom(const CNETMsg_SplitScreenUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_SplitScreenUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_SplitScreenUser::IsInitialized() const {
  return true;
}

void CNETMsg_SplitScreenUser::Swap(CNETMsg_SplitScreenUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_SplitScreenUser::InternalSwap(CNETMsg_SplitScreenUser* other) {
  using std::swap;
  swap(slot_, other->slot_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_SplitScreenUser::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CNETMsg_PlayerAvatarData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CNETMsg_PlayerAvatarData::kAccountidFieldNumber;
const int CNETMsg_PlayerAvatarData::kRgbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CNETMsg_PlayerAvatarData::CNETMsg_PlayerAvatarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_PlayerAvatarData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CNETMsg_PlayerAvatarData)
}
CNETMsg_PlayerAvatarData::CNETMsg_PlayerAvatarData(const CNETMsg_PlayerAvatarData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rgb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rgb()) {
    rgb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rgb_);
  }
  accountid_ = from.accountid_;
  // @@protoc_insertion_point(copy_constructor:CNETMsg_PlayerAvatarData)
}

void CNETMsg_PlayerAvatarData::SharedCtor() {
  _cached_size_ = 0;
  rgb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accountid_ = 0u;
}

CNETMsg_PlayerAvatarData::~CNETMsg_PlayerAvatarData() {
  // @@protoc_insertion_point(destructor:CNETMsg_PlayerAvatarData)
  SharedDtor();
}

void CNETMsg_PlayerAvatarData::SharedDtor() {
  rgb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CNETMsg_PlayerAvatarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CNETMsg_PlayerAvatarData::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CNETMsg_PlayerAvatarData& CNETMsg_PlayerAvatarData::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCNETMsg_PlayerAvatarData();
  return *internal_default_instance();
}

CNETMsg_PlayerAvatarData* CNETMsg_PlayerAvatarData::New(::google::protobuf::Arena* arena) const {
  CNETMsg_PlayerAvatarData* n = new CNETMsg_PlayerAvatarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CNETMsg_PlayerAvatarData::Clear() {
// @@protoc_insertion_point(message_clear_start:CNETMsg_PlayerAvatarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!rgb_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*rgb_.UnsafeRawStringPointer())->clear();
  }
  accountid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CNETMsg_PlayerAvatarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CNETMsg_PlayerAvatarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes rgb = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rgb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CNETMsg_PlayerAvatarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CNETMsg_PlayerAvatarData)
  return false;
#undef DO_
}

void CNETMsg_PlayerAvatarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CNETMsg_PlayerAvatarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional bytes rgb = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->rgb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CNETMsg_PlayerAvatarData)
}

::google::protobuf::uint8* CNETMsg_PlayerAvatarData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CNETMsg_PlayerAvatarData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional bytes rgb = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->rgb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CNETMsg_PlayerAvatarData)
  return target;
}

size_t CNETMsg_PlayerAvatarData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CNETMsg_PlayerAvatarData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes rgb = 2;
    if (has_rgb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rgb());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CNETMsg_PlayerAvatarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CNETMsg_PlayerAvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  const CNETMsg_PlayerAvatarData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CNETMsg_PlayerAvatarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CNETMsg_PlayerAvatarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CNETMsg_PlayerAvatarData)
    MergeFrom(*source);
  }
}

void CNETMsg_PlayerAvatarData::MergeFrom(const CNETMsg_PlayerAvatarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CNETMsg_PlayerAvatarData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rgb();
      rgb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rgb_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CNETMsg_PlayerAvatarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CNETMsg_PlayerAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CNETMsg_PlayerAvatarData::CopyFrom(const CNETMsg_PlayerAvatarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CNETMsg_PlayerAvatarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CNETMsg_PlayerAvatarData::IsInitialized() const {
  return true;
}

void CNETMsg_PlayerAvatarData::Swap(CNETMsg_PlayerAvatarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CNETMsg_PlayerAvatarData::InternalSwap(CNETMsg_PlayerAvatarData* other) {
  using std::swap;
  rgb_.Swap(&other->rgb_);
  swap(accountid_, other->accountid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CNETMsg_PlayerAvatarData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_ClientInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_ClientInfo::kSendTableCrcFieldNumber;
const int CCLCMsg_ClientInfo::kServerCountFieldNumber;
const int CCLCMsg_ClientInfo::kIsHltvFieldNumber;
const int CCLCMsg_ClientInfo::kIsReplayFieldNumber;
const int CCLCMsg_ClientInfo::kFriendsIdFieldNumber;
const int CCLCMsg_ClientInfo::kFriendsNameFieldNumber;
const int CCLCMsg_ClientInfo::kCustomFilesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_ClientInfo::CCLCMsg_ClientInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_ClientInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_ClientInfo)
}
CCLCMsg_ClientInfo::CCLCMsg_ClientInfo(const CCLCMsg_ClientInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      custom_files_(from.custom_files_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  friends_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_friends_name()) {
    friends_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_name_);
  }
  ::memcpy(&send_table_crc_, &from.send_table_crc_,
    static_cast<size_t>(reinterpret_cast<char*>(&friends_id_) -
    reinterpret_cast<char*>(&send_table_crc_)) + sizeof(friends_id_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ClientInfo)
}

void CCLCMsg_ClientInfo::SharedCtor() {
  _cached_size_ = 0;
  friends_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&send_table_crc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friends_id_) -
      reinterpret_cast<char*>(&send_table_crc_)) + sizeof(friends_id_));
}

CCLCMsg_ClientInfo::~CCLCMsg_ClientInfo() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ClientInfo)
  SharedDtor();
}

void CCLCMsg_ClientInfo::SharedDtor() {
  friends_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_ClientInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_ClientInfo::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_ClientInfo& CCLCMsg_ClientInfo::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_ClientInfo();
  return *internal_default_instance();
}

CCLCMsg_ClientInfo* CCLCMsg_ClientInfo::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_ClientInfo* n = new CCLCMsg_ClientInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_files_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!friends_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*friends_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&send_table_crc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&friends_id_) -
        reinterpret_cast<char*>(&send_table_crc_)) + sizeof(friends_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_ClientInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_ClientInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 send_table_crc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_send_table_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &send_table_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hltv = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_hltv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hltv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_replay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friends_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_friends_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friends_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string friends_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friends_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friends_name().data(), static_cast<int>(this->friends_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_ClientInfo.friends_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 custom_files = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 61u, input, this->mutable_custom_files())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_custom_files())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_ClientInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_ClientInfo)
  return false;
#undef DO_
}

void CCLCMsg_ClientInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 send_table_crc = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->send_table_crc(), output);
  }

  // optional uint32 server_count = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_count(), output);
  }

  // optional bool is_hltv = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_hltv(), output);
  }

  // optional bool is_replay = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_replay(), output);
  }

  // optional uint32 friends_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->friends_id(), output);
  }

  // optional string friends_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_name().data(), static_cast<int>(this->friends_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_ClientInfo.friends_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->friends_name(), output);
  }

  // repeated fixed32 custom_files = 7;
  for (int i = 0, n = this->custom_files_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      7, this->custom_files(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_ClientInfo)
}

::google::protobuf::uint8* CCLCMsg_ClientInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ClientInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 send_table_crc = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->send_table_crc(), target);
  }

  // optional uint32 server_count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_count(), target);
  }

  // optional bool is_hltv = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_hltv(), target);
  }

  // optional bool is_replay = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_replay(), target);
  }

  // optional uint32 friends_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->friends_id(), target);
  }

  // optional string friends_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friends_name().data(), static_cast<int>(this->friends_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_ClientInfo.friends_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->friends_name(), target);
  }

  // repeated fixed32 custom_files = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(7, this->custom_files_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ClientInfo)
  return target;
}

size_t CCLCMsg_ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ClientInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 custom_files = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_files_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->custom_files_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string friends_name = 6;
    if (has_friends_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friends_name());
    }

    // optional fixed32 send_table_crc = 1;
    if (has_send_table_crc()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_count = 2;
    if (has_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_count());
    }

    // optional bool is_hltv = 3;
    if (has_is_hltv()) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 4;
    if (has_is_replay()) {
      total_size += 1 + 1;
    }

    // optional uint32 friends_id = 5;
    if (has_friends_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friends_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_ClientInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_ClientInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_ClientInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_ClientInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_ClientInfo)
    MergeFrom(*source);
  }
}

void CCLCMsg_ClientInfo::MergeFrom(const CCLCMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ClientInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_files_.MergeFrom(from.custom_files_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_friends_name();
      friends_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friends_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      send_table_crc_ = from.send_table_crc_;
    }
    if (cached_has_bits & 0x00000004u) {
      server_count_ = from.server_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_hltv_ = from.is_hltv_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_replay_ = from.is_replay_;
    }
    if (cached_has_bits & 0x00000020u) {
      friends_id_ = from.friends_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_ClientInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_ClientInfo::CopyFrom(const CCLCMsg_ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ClientInfo::IsInitialized() const {
  return true;
}

void CCLCMsg_ClientInfo::Swap(CCLCMsg_ClientInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_ClientInfo::InternalSwap(CCLCMsg_ClientInfo* other) {
  using std::swap;
  custom_files_.InternalSwap(&other->custom_files_);
  friends_name_.Swap(&other->friends_name_);
  swap(send_table_crc_, other->send_table_crc_);
  swap(server_count_, other->server_count_);
  swap(is_hltv_, other->is_hltv_);
  swap(is_replay_, other->is_replay_);
  swap(friends_id_, other->friends_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_ClientInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_Move::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_Move::kNumBackupCommandsFieldNumber;
const int CCLCMsg_Move::kNumNewCommandsFieldNumber;
const int CCLCMsg_Move::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_Move::CCLCMsg_Move()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_Move();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_Move)
}
CCLCMsg_Move::CCLCMsg_Move(const CCLCMsg_Move& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&num_backup_commands_, &from.num_backup_commands_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_new_commands_) -
    reinterpret_cast<char*>(&num_backup_commands_)) + sizeof(num_new_commands_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_Move)
}

void CCLCMsg_Move::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_backup_commands_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_new_commands_) -
      reinterpret_cast<char*>(&num_backup_commands_)) + sizeof(num_new_commands_));
}

CCLCMsg_Move::~CCLCMsg_Move() {
  // @@protoc_insertion_point(destructor:CCLCMsg_Move)
  SharedDtor();
}

void CCLCMsg_Move::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_Move::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_Move& CCLCMsg_Move::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_Move();
  return *internal_default_instance();
}

CCLCMsg_Move* CCLCMsg_Move::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_Move* n = new CCLCMsg_Move;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&num_backup_commands_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_new_commands_) -
        reinterpret_cast<char*>(&num_backup_commands_)) + sizeof(num_new_commands_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num_backup_commands = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_num_backup_commands();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_backup_commands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_new_commands = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_new_commands();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_new_commands_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_Move)
  return false;
#undef DO_
}

void CCLCMsg_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_backup_commands = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num_backup_commands(), output);
  }

  // optional uint32 num_new_commands = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_new_commands(), output);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_Move)
}

::google::protobuf::uint8* CCLCMsg_Move::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_Move)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 num_backup_commands = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num_backup_commands(), target);
  }

  // optional uint32 num_new_commands = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_new_commands(), target);
  }

  // optional bytes data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_Move)
  return target;
}

size_t CCLCMsg_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_Move)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 num_backup_commands = 1;
    if (has_num_backup_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_backup_commands());
    }

    // optional uint32 num_new_commands = 2;
    if (has_num_new_commands()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_new_commands());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_Move::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_Move)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_Move* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_Move>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_Move)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_Move)
    MergeFrom(*source);
  }
}

void CCLCMsg_Move::MergeFrom(const CCLCMsg_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_Move)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_backup_commands_ = from.num_backup_commands_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_new_commands_ = from.num_new_commands_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_Move::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_Move::CopyFrom(const CCLCMsg_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_Move::IsInitialized() const {
  return true;
}

void CCLCMsg_Move::Swap(CCLCMsg_Move* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_Move::InternalSwap(CCLCMsg_Move* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(num_backup_commands_, other->num_backup_commands_);
  swap(num_new_commands_, other->num_new_commands_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_Move::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_VoiceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_VoiceData::kDataFieldNumber;
const int CCLCMsg_VoiceData::kXuidFieldNumber;
const int CCLCMsg_VoiceData::kFormatFieldNumber;
const int CCLCMsg_VoiceData::kSequenceBytesFieldNumber;
const int CCLCMsg_VoiceData::kSectionNumberFieldNumber;
const int CCLCMsg_VoiceData::kUncompressedSampleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_VoiceData::CCLCMsg_VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_VoiceData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_VoiceData)
}
CCLCMsg_VoiceData::CCLCMsg_VoiceData(const CCLCMsg_VoiceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&xuid_, &from.xuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&xuid_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_VoiceData)
}

void CCLCMsg_VoiceData::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&xuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_sample_offset_) -
      reinterpret_cast<char*>(&xuid_)) + sizeof(uncompressed_sample_offset_));
  format_ = 1;
}

CCLCMsg_VoiceData::~CCLCMsg_VoiceData() {
  // @@protoc_insertion_point(destructor:CCLCMsg_VoiceData)
  SharedDtor();
}

void CCLCMsg_VoiceData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_VoiceData::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_VoiceData& CCLCMsg_VoiceData::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_VoiceData();
  return *internal_default_instance();
}

CCLCMsg_VoiceData* CCLCMsg_VoiceData::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_VoiceData* n = new CCLCMsg_VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_VoiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 62u) {
    ::memset(&xuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&uncompressed_sample_offset_) -
        reinterpret_cast<char*>(&xuid_)) + sizeof(uncompressed_sample_offset_));
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 xuid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_xuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &xuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoiceDataFormat_t_IsValid(value)) {
            set_format(static_cast< ::VoiceDataFormat_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_bytes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_sequence_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_number = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_section_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uncompressed_sample_offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_uncompressed_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncompressed_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_VoiceData)
  return false;
#undef DO_
}

void CCLCMsg_VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional fixed64 xuid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->xuid(), output);
  }

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->format(), output);
  }

  // optional int32 sequence_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sequence_bytes(), output);
  }

  // optional uint32 section_number = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->section_number(), output);
  }

  // optional uint32 uncompressed_sample_offset = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->uncompressed_sample_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_VoiceData)
}

::google::protobuf::uint8* CCLCMsg_VoiceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional fixed64 xuid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->xuid(), target);
  }

  // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->format(), target);
  }

  // optional int32 sequence_bytes = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sequence_bytes(), target);
  }

  // optional uint32 section_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->section_number(), target);
  }

  // optional uint32 uncompressed_sample_offset = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->uncompressed_sample_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_VoiceData)
  return target;
}

size_t CCLCMsg_VoiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_VoiceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 xuid = 2;
    if (has_xuid()) {
      total_size += 1 + 8;
    }

    // optional int32 sequence_bytes = 4;
    if (has_sequence_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_bytes());
    }

    // optional uint32 section_number = 5;
    if (has_section_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_number());
    }

    // optional uint32 uncompressed_sample_offset = 6;
    if (has_uncompressed_sample_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uncompressed_sample_offset());
    }

    // optional .VoiceDataFormat_t format = 3 [default = VOICEDATA_FORMAT_ENGINE];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_VoiceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_VoiceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_VoiceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_VoiceData)
    MergeFrom(*source);
  }
}

void CCLCMsg_VoiceData::MergeFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      xuid_ = from.xuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      sequence_bytes_ = from.sequence_bytes_;
    }
    if (cached_has_bits & 0x00000008u) {
      section_number_ = from.section_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      uncompressed_sample_offset_ = from.uncompressed_sample_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_VoiceData::CopyFrom(const CCLCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_VoiceData::IsInitialized() const {
  return true;
}

void CCLCMsg_VoiceData::Swap(CCLCMsg_VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_VoiceData::InternalSwap(CCLCMsg_VoiceData* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(xuid_, other->xuid_);
  swap(sequence_bytes_, other->sequence_bytes_);
  swap(section_number_, other->section_number_);
  swap(uncompressed_sample_offset_, other->uncompressed_sample_offset_);
  swap(format_, other->format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_VoiceData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_BaselineAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_BaselineAck::kBaselineTickFieldNumber;
const int CCLCMsg_BaselineAck::kBaselineNrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_BaselineAck::CCLCMsg_BaselineAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_BaselineAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_BaselineAck)
}
CCLCMsg_BaselineAck::CCLCMsg_BaselineAck(const CCLCMsg_BaselineAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&baseline_tick_, &from.baseline_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&baseline_nr_) -
    reinterpret_cast<char*>(&baseline_tick_)) + sizeof(baseline_nr_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_BaselineAck)
}

void CCLCMsg_BaselineAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baseline_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&baseline_nr_) -
      reinterpret_cast<char*>(&baseline_tick_)) + sizeof(baseline_nr_));
}

CCLCMsg_BaselineAck::~CCLCMsg_BaselineAck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_BaselineAck)
  SharedDtor();
}

void CCLCMsg_BaselineAck::SharedDtor() {
}

void CCLCMsg_BaselineAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_BaselineAck::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_BaselineAck& CCLCMsg_BaselineAck::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_BaselineAck();
  return *internal_default_instance();
}

CCLCMsg_BaselineAck* CCLCMsg_BaselineAck::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_BaselineAck* n = new CCLCMsg_BaselineAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_BaselineAck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_BaselineAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&baseline_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&baseline_nr_) -
        reinterpret_cast<char*>(&baseline_tick_)) + sizeof(baseline_nr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_BaselineAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_BaselineAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 baseline_tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_baseline_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baseline_nr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_baseline_nr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_nr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_BaselineAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_BaselineAck)
  return false;
#undef DO_
}

void CCLCMsg_BaselineAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_BaselineAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 baseline_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->baseline_tick(), output);
  }

  // optional int32 baseline_nr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->baseline_nr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_BaselineAck)
}

::google::protobuf::uint8* CCLCMsg_BaselineAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_BaselineAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 baseline_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->baseline_tick(), target);
  }

  // optional int32 baseline_nr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->baseline_nr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_BaselineAck)
  return target;
}

size_t CCLCMsg_BaselineAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_BaselineAck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 baseline_tick = 1;
    if (has_baseline_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline_tick());
    }

    // optional int32 baseline_nr = 2;
    if (has_baseline_nr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline_nr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_BaselineAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_BaselineAck)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_BaselineAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_BaselineAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_BaselineAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_BaselineAck)
    MergeFrom(*source);
  }
}

void CCLCMsg_BaselineAck::MergeFrom(const CCLCMsg_BaselineAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_BaselineAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      baseline_tick_ = from.baseline_tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      baseline_nr_ = from.baseline_nr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_BaselineAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_BaselineAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_BaselineAck::CopyFrom(const CCLCMsg_BaselineAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_BaselineAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_BaselineAck::IsInitialized() const {
  return true;
}

void CCLCMsg_BaselineAck::Swap(CCLCMsg_BaselineAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_BaselineAck::InternalSwap(CCLCMsg_BaselineAck* other) {
  using std::swap;
  swap(baseline_tick_, other->baseline_tick_);
  swap(baseline_nr_, other->baseline_nr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_BaselineAck::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_ListenEvents::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_ListenEvents::kEventMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_ListenEvents::CCLCMsg_ListenEvents()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_ListenEvents();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_ListenEvents)
}
CCLCMsg_ListenEvents::CCLCMsg_ListenEvents(const CCLCMsg_ListenEvents& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      event_mask_(from.event_mask_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_ListenEvents)
}

void CCLCMsg_ListenEvents::SharedCtor() {
  _cached_size_ = 0;
}

CCLCMsg_ListenEvents::~CCLCMsg_ListenEvents() {
  // @@protoc_insertion_point(destructor:CCLCMsg_ListenEvents)
  SharedDtor();
}

void CCLCMsg_ListenEvents::SharedDtor() {
}

void CCLCMsg_ListenEvents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_ListenEvents::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_ListenEvents& CCLCMsg_ListenEvents::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_ListenEvents();
  return *internal_default_instance();
}

CCLCMsg_ListenEvents* CCLCMsg_ListenEvents::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_ListenEvents* n = new CCLCMsg_ListenEvents;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_ListenEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_ListenEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_mask_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_ListenEvents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_ListenEvents)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 event_mask = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 13u, input, this->mutable_event_mask())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_event_mask())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_ListenEvents)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_ListenEvents)
  return false;
#undef DO_
}

void CCLCMsg_ListenEvents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_ListenEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 event_mask = 1;
  for (int i = 0, n = this->event_mask_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(
      1, this->event_mask(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_ListenEvents)
}

::google::protobuf::uint8* CCLCMsg_ListenEvents::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_ListenEvents)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 event_mask = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed32ToArray(1, this->event_mask_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_ListenEvents)
  return target;
}

size_t CCLCMsg_ListenEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_ListenEvents)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated fixed32 event_mask = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->event_mask_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->event_mask_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_ListenEvents::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_ListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_ListenEvents* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_ListenEvents>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_ListenEvents)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_ListenEvents)
    MergeFrom(*source);
  }
}

void CCLCMsg_ListenEvents::MergeFrom(const CCLCMsg_ListenEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_ListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_mask_.MergeFrom(from.event_mask_);
}

void CCLCMsg_ListenEvents::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_ListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_ListenEvents::CopyFrom(const CCLCMsg_ListenEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_ListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_ListenEvents::IsInitialized() const {
  return true;
}

void CCLCMsg_ListenEvents::Swap(CCLCMsg_ListenEvents* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_ListenEvents::InternalSwap(CCLCMsg_ListenEvents* other) {
  using std::swap;
  event_mask_.InternalSwap(&other->event_mask_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_ListenEvents::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_RespondCvarValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_RespondCvarValue::kCookieFieldNumber;
const int CCLCMsg_RespondCvarValue::kStatusCodeFieldNumber;
const int CCLCMsg_RespondCvarValue::kNameFieldNumber;
const int CCLCMsg_RespondCvarValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_RespondCvarValue::CCLCMsg_RespondCvarValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_RespondCvarValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_RespondCvarValue)
}
CCLCMsg_RespondCvarValue::CCLCMsg_RespondCvarValue(const CCLCMsg_RespondCvarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&cookie_, &from.cookie_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_code_) -
    reinterpret_cast<char*>(&cookie_)) + sizeof(status_code_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_RespondCvarValue)
}

void CCLCMsg_RespondCvarValue::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cookie_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_code_) -
      reinterpret_cast<char*>(&cookie_)) + sizeof(status_code_));
}

CCLCMsg_RespondCvarValue::~CCLCMsg_RespondCvarValue() {
  // @@protoc_insertion_point(destructor:CCLCMsg_RespondCvarValue)
  SharedDtor();
}

void CCLCMsg_RespondCvarValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_RespondCvarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_RespondCvarValue::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_RespondCvarValue& CCLCMsg_RespondCvarValue::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_RespondCvarValue();
  return *internal_default_instance();
}

CCLCMsg_RespondCvarValue* CCLCMsg_RespondCvarValue::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_RespondCvarValue* n = new CCLCMsg_RespondCvarValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_RespondCvarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_RespondCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&cookie_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_code_) -
        reinterpret_cast<char*>(&cookie_)) + sizeof(status_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_RespondCvarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_RespondCvarValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_status_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_RespondCvarValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_RespondCvarValue.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_RespondCvarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_RespondCvarValue)
  return false;
#undef DO_
}

void CCLCMsg_RespondCvarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_RespondCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cookie = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cookie(), output);
  }

  // optional int32 status_code = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status_code(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_RespondCvarValue)
}

::google::protobuf::uint8* CCLCMsg_RespondCvarValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_RespondCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cookie = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cookie(), target);
  }

  // optional int32 status_code = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status_code(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_RespondCvarValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_RespondCvarValue)
  return target;
}

size_t CCLCMsg_RespondCvarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_RespondCvarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie());
    }

    // optional int32 status_code = 2;
    if (has_status_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_RespondCvarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_RespondCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_RespondCvarValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_RespondCvarValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_RespondCvarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_RespondCvarValue)
    MergeFrom(*source);
  }
}

void CCLCMsg_RespondCvarValue::MergeFrom(const CCLCMsg_RespondCvarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_RespondCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000004u) {
      cookie_ = from.cookie_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_code_ = from.status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_RespondCvarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_RespondCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_RespondCvarValue::CopyFrom(const CCLCMsg_RespondCvarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_RespondCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_RespondCvarValue::IsInitialized() const {
  return true;
}

void CCLCMsg_RespondCvarValue::Swap(CCLCMsg_RespondCvarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_RespondCvarValue::InternalSwap(CCLCMsg_RespondCvarValue* other) {
  using std::swap;
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  swap(cookie_, other->cookie_);
  swap(status_code_, other->status_code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_RespondCvarValue::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_FileCRCCheck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_FileCRCCheck::kCodePathFieldNumber;
const int CCLCMsg_FileCRCCheck::kPathFieldNumber;
const int CCLCMsg_FileCRCCheck::kCodeFilenameFieldNumber;
const int CCLCMsg_FileCRCCheck::kFilenameFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileFractionFieldNumber;
const int CCLCMsg_FileCRCCheck::kMd5FieldNumber;
const int CCLCMsg_FileCRCCheck::kCrcFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileHashTypeFieldNumber;
const int CCLCMsg_FileCRCCheck::kFileLenFieldNumber;
const int CCLCMsg_FileCRCCheck::kPackFileIdFieldNumber;
const int CCLCMsg_FileCRCCheck::kPackFileNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_FileCRCCheck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_FileCRCCheck)
}
CCLCMsg_FileCRCCheck::CCLCMsg_FileCRCCheck(const CCLCMsg_FileCRCCheck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_path()) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_md5()) {
    md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
  }
  ::memcpy(&code_path_, &from.code_path_,
    static_cast<size_t>(reinterpret_cast<char*>(&pack_file_number_) -
    reinterpret_cast<char*>(&code_path_)) + sizeof(pack_file_number_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_FileCRCCheck)
}

void CCLCMsg_FileCRCCheck::SharedCtor() {
  _cached_size_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pack_file_number_) -
      reinterpret_cast<char*>(&code_path_)) + sizeof(pack_file_number_));
}

CCLCMsg_FileCRCCheck::~CCLCMsg_FileCRCCheck() {
  // @@protoc_insertion_point(destructor:CCLCMsg_FileCRCCheck)
  SharedDtor();
}

void CCLCMsg_FileCRCCheck::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  md5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_FileCRCCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_FileCRCCheck::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_FileCRCCheck& CCLCMsg_FileCRCCheck::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_FileCRCCheck();
  return *internal_default_instance();
}

CCLCMsg_FileCRCCheck* CCLCMsg_FileCRCCheck::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_FileCRCCheck* n = new CCLCMsg_FileCRCCheck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_FileCRCCheck::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_FileCRCCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!path_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*path_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!filename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*filename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!md5_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*md5_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&code_path_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_hash_type_) -
        reinterpret_cast<char*>(&code_path_)) + sizeof(file_hash_type_));
  }
  if (cached_has_bits & 1792u) {
    ::memset(&file_len_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pack_file_number_) -
        reinterpret_cast<char*>(&file_len_)) + sizeof(pack_file_number_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_FileCRCCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_FileCRCCheck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code_path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_code_path();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_path_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_FileCRCCheck.path");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 code_filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_code_filename();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_filename_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CCLCMsg_FileCRCCheck.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_fraction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_file_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes md5 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_md5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 crc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_hash_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_file_hash_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 file_len = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_file_len();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_len_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_file_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_pack_file_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pack_file_number = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_pack_file_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pack_file_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_FileCRCCheck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_FileCRCCheck)
  return false;
#undef DO_
}

void CCLCMsg_FileCRCCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_FileCRCCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code_path = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code_path(), output);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // optional int32 code_filename = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code_filename(), output);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // optional int32 file_fraction = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->file_fraction(), output);
  }

  // optional bytes md5 = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->md5(), output);
  }

  // optional uint32 crc = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->crc(), output);
  }

  // optional int32 file_hash_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->file_hash_type(), output);
  }

  // optional int32 file_len = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->file_len(), output);
  }

  // optional int32 pack_file_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pack_file_id(), output);
  }

  // optional int32 pack_file_number = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->pack_file_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_FileCRCCheck)
}

::google::protobuf::uint8* CCLCMsg_FileCRCCheck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_FileCRCCheck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 code_path = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code_path(), target);
  }

  // optional string path = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // optional int32 code_filename = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code_filename(), target);
  }

  // optional string filename = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CCLCMsg_FileCRCCheck.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // optional int32 file_fraction = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->file_fraction(), target);
  }

  // optional bytes md5 = 6;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->md5(), target);
  }

  // optional uint32 crc = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->crc(), target);
  }

  // optional int32 file_hash_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->file_hash_type(), target);
  }

  // optional int32 file_len = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->file_len(), target);
  }

  // optional int32 pack_file_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pack_file_id(), target);
  }

  // optional int32 pack_file_number = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->pack_file_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_FileCRCCheck)
  return target;
}

size_t CCLCMsg_FileCRCCheck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_FileCRCCheck)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string filename = 4;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bytes md5 = 6;
    if (has_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->md5());
    }

    // optional int32 code_path = 1;
    if (has_code_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_path());
    }

    // optional int32 code_filename = 3;
    if (has_code_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_filename());
    }

    // optional int32 file_fraction = 5;
    if (has_file_fraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_fraction());
    }

    // optional uint32 crc = 7;
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }

    // optional int32 file_hash_type = 8;
    if (has_file_hash_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_hash_type());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 file_len = 9;
    if (has_file_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_len());
    }

    // optional int32 pack_file_id = 10;
    if (has_pack_file_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_id());
    }

    // optional int32 pack_file_number = 11;
    if (has_pack_file_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pack_file_number());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_FileCRCCheck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_FileCRCCheck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_FileCRCCheck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_FileCRCCheck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_FileCRCCheck)
    MergeFrom(*source);
  }
}

void CCLCMsg_FileCRCCheck::MergeFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_FileCRCCheck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_filename();
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_md5();
      md5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.md5_);
    }
    if (cached_has_bits & 0x00000008u) {
      code_path_ = from.code_path_;
    }
    if (cached_has_bits & 0x00000010u) {
      code_filename_ = from.code_filename_;
    }
    if (cached_has_bits & 0x00000020u) {
      file_fraction_ = from.file_fraction_;
    }
    if (cached_has_bits & 0x00000040u) {
      crc_ = from.crc_;
    }
    if (cached_has_bits & 0x00000080u) {
      file_hash_type_ = from.file_hash_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      file_len_ = from.file_len_;
    }
    if (cached_has_bits & 0x00000200u) {
      pack_file_id_ = from.pack_file_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      pack_file_number_ = from.pack_file_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_FileCRCCheck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_FileCRCCheck::CopyFrom(const CCLCMsg_FileCRCCheck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_FileCRCCheck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_FileCRCCheck::IsInitialized() const {
  return true;
}

void CCLCMsg_FileCRCCheck::Swap(CCLCMsg_FileCRCCheck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_FileCRCCheck::InternalSwap(CCLCMsg_FileCRCCheck* other) {
  using std::swap;
  path_.Swap(&other->path_);
  filename_.Swap(&other->filename_);
  md5_.Swap(&other->md5_);
  swap(code_path_, other->code_path_);
  swap(code_filename_, other->code_filename_);
  swap(file_fraction_, other->file_fraction_);
  swap(crc_, other->crc_);
  swap(file_hash_type_, other->file_hash_type_);
  swap(file_len_, other->file_len_);
  swap(pack_file_id_, other->pack_file_id_);
  swap(pack_file_number_, other->pack_file_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_FileCRCCheck::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_LoadingProgress::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_LoadingProgress::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_LoadingProgress::CCLCMsg_LoadingProgress()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_LoadingProgress();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_LoadingProgress)
}
CCLCMsg_LoadingProgress::CCLCMsg_LoadingProgress(const CCLCMsg_LoadingProgress& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  progress_ = from.progress_;
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_LoadingProgress)
}

void CCLCMsg_LoadingProgress::SharedCtor() {
  _cached_size_ = 0;
  progress_ = 0;
}

CCLCMsg_LoadingProgress::~CCLCMsg_LoadingProgress() {
  // @@protoc_insertion_point(destructor:CCLCMsg_LoadingProgress)
  SharedDtor();
}

void CCLCMsg_LoadingProgress::SharedDtor() {
}

void CCLCMsg_LoadingProgress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_LoadingProgress::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_LoadingProgress& CCLCMsg_LoadingProgress::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_LoadingProgress();
  return *internal_default_instance();
}

CCLCMsg_LoadingProgress* CCLCMsg_LoadingProgress::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_LoadingProgress* n = new CCLCMsg_LoadingProgress;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_LoadingProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_LoadingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_LoadingProgress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_LoadingProgress)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 progress = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_LoadingProgress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_LoadingProgress)
  return false;
#undef DO_
}

void CCLCMsg_LoadingProgress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_LoadingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 progress = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_LoadingProgress)
}

::google::protobuf::uint8* CCLCMsg_LoadingProgress::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_LoadingProgress)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 progress = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_LoadingProgress)
  return target;
}

size_t CCLCMsg_LoadingProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_LoadingProgress)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 progress = 1;
  if (has_progress()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_LoadingProgress::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_LoadingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_LoadingProgress* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_LoadingProgress>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_LoadingProgress)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_LoadingProgress)
    MergeFrom(*source);
  }
}

void CCLCMsg_LoadingProgress::MergeFrom(const CCLCMsg_LoadingProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_LoadingProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_progress()) {
    set_progress(from.progress());
  }
}

void CCLCMsg_LoadingProgress::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_LoadingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_LoadingProgress::CopyFrom(const CCLCMsg_LoadingProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_LoadingProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_LoadingProgress::IsInitialized() const {
  return true;
}

void CCLCMsg_LoadingProgress::Swap(CCLCMsg_LoadingProgress* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_LoadingProgress::InternalSwap(CCLCMsg_LoadingProgress* other) {
  using std::swap;
  swap(progress_, other->progress_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_LoadingProgress::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_SplitPlayerConnect::InitAsDefaultInstance() {
  ::_CCLCMsg_SplitPlayerConnect_default_instance_._instance.get_mutable()->convars_ = const_cast< ::CMsg_CVars*>(
      ::CMsg_CVars::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_SplitPlayerConnect::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_SplitPlayerConnect();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_SplitPlayerConnect)
}
CCLCMsg_SplitPlayerConnect::CCLCMsg_SplitPlayerConnect(const CCLCMsg_SplitPlayerConnect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_convars()) {
    convars_ = new ::CMsg_CVars(*from.convars_);
  } else {
    convars_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_SplitPlayerConnect)
}

void CCLCMsg_SplitPlayerConnect::SharedCtor() {
  _cached_size_ = 0;
  convars_ = NULL;
}

CCLCMsg_SplitPlayerConnect::~CCLCMsg_SplitPlayerConnect() {
  // @@protoc_insertion_point(destructor:CCLCMsg_SplitPlayerConnect)
  SharedDtor();
}

void CCLCMsg_SplitPlayerConnect::SharedDtor() {
  if (this != internal_default_instance()) delete convars_;
}

void CCLCMsg_SplitPlayerConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_SplitPlayerConnect::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_SplitPlayerConnect& CCLCMsg_SplitPlayerConnect::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_SplitPlayerConnect();
  return *internal_default_instance();
}

CCLCMsg_SplitPlayerConnect* CCLCMsg_SplitPlayerConnect::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_SplitPlayerConnect* n = new CCLCMsg_SplitPlayerConnect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_SplitPlayerConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_SplitPlayerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(convars_ != NULL);
    convars_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_SplitPlayerConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_SplitPlayerConnect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsg_CVars convars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_SplitPlayerConnect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_SplitPlayerConnect)
  return false;
#undef DO_
}

void CCLCMsg_SplitPlayerConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_SplitPlayerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->convars_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_SplitPlayerConnect)
}

::google::protobuf::uint8* CCLCMsg_SplitPlayerConnect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_SplitPlayerConnect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsg_CVars convars = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->convars_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_SplitPlayerConnect)
  return target;
}

size_t CCLCMsg_SplitPlayerConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_SplitPlayerConnect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CMsg_CVars convars = 1;
  if (has_convars()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->convars_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_SplitPlayerConnect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_SplitPlayerConnect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_SplitPlayerConnect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_SplitPlayerConnect)
    MergeFrom(*source);
  }
}

void CCLCMsg_SplitPlayerConnect::MergeFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_SplitPlayerConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_convars()) {
    mutable_convars()->::CMsg_CVars::MergeFrom(from.convars());
  }
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_SplitPlayerConnect::CopyFrom(const CCLCMsg_SplitPlayerConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_SplitPlayerConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_SplitPlayerConnect::IsInitialized() const {
  return true;
}

void CCLCMsg_SplitPlayerConnect::Swap(CCLCMsg_SplitPlayerConnect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_SplitPlayerConnect::InternalSwap(CCLCMsg_SplitPlayerConnect* other) {
  using std::swap;
  swap(convars_, other->convars_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_SplitPlayerConnect::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_CmdKeyValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_CmdKeyValues::kKeyvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_CmdKeyValues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_CmdKeyValues)
}
CCLCMsg_CmdKeyValues::CCLCMsg_CmdKeyValues(const CCLCMsg_CmdKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyvalues()) {
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_CmdKeyValues)
}

void CCLCMsg_CmdKeyValues::SharedCtor() {
  _cached_size_ = 0;
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CCLCMsg_CmdKeyValues::~CCLCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CCLCMsg_CmdKeyValues)
  SharedDtor();
}

void CCLCMsg_CmdKeyValues::SharedDtor() {
  keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CCLCMsg_CmdKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_CmdKeyValues::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_CmdKeyValues& CCLCMsg_CmdKeyValues::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_CmdKeyValues();
  return *internal_default_instance();
}

CCLCMsg_CmdKeyValues* CCLCMsg_CmdKeyValues::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_CmdKeyValues* n = new CCLCMsg_CmdKeyValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!keyvalues_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*keyvalues_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_CmdKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_CmdKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keyvalues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_CmdKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_CmdKeyValues)
  return false;
#undef DO_
}

void CCLCMsg_CmdKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->keyvalues(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_CmdKeyValues)
}

::google::protobuf::uint8* CCLCMsg_CmdKeyValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keyvalues(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_CmdKeyValues)
  return target;
}

size_t CCLCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_CmdKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keyvalues());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_CmdKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_CmdKeyValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_CmdKeyValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_CmdKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_CmdKeyValues)
    MergeFrom(*source);
  }
}

void CCLCMsg_CmdKeyValues::MergeFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keyvalues()) {
    set_has_keyvalues();
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
}

void CCLCMsg_CmdKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_CmdKeyValues::CopyFrom(const CCLCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CCLCMsg_CmdKeyValues::Swap(CCLCMsg_CmdKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_CmdKeyValues::InternalSwap(CCLCMsg_CmdKeyValues* other) {
  using std::swap;
  keyvalues_.Swap(&other->keyvalues_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_CmdKeyValues::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_ServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ServerInfo::kProtocolFieldNumber;
const int CSVCMsg_ServerInfo::kServerCountFieldNumber;
const int CSVCMsg_ServerInfo::kIsDedicatedFieldNumber;
const int CSVCMsg_ServerInfo::kIsOfficialValveServerFieldNumber;
const int CSVCMsg_ServerInfo::kIsHltvFieldNumber;
const int CSVCMsg_ServerInfo::kIsReplayFieldNumber;
const int CSVCMsg_ServerInfo::kIsRedirectingToProxyRelayFieldNumber;
const int CSVCMsg_ServerInfo::kCOsFieldNumber;
const int CSVCMsg_ServerInfo::kMapCrcFieldNumber;
const int CSVCMsg_ServerInfo::kClientCrcFieldNumber;
const int CSVCMsg_ServerInfo::kStringTableCrcFieldNumber;
const int CSVCMsg_ServerInfo::kMaxClientsFieldNumber;
const int CSVCMsg_ServerInfo::kMaxClassesFieldNumber;
const int CSVCMsg_ServerInfo::kPlayerSlotFieldNumber;
const int CSVCMsg_ServerInfo::kTickIntervalFieldNumber;
const int CSVCMsg_ServerInfo::kGameDirFieldNumber;
const int CSVCMsg_ServerInfo::kMapNameFieldNumber;
const int CSVCMsg_ServerInfo::kMapGroupNameFieldNumber;
const int CSVCMsg_ServerInfo::kSkyNameFieldNumber;
const int CSVCMsg_ServerInfo::kHostNameFieldNumber;
const int CSVCMsg_ServerInfo::kPublicIpFieldNumber;
const int CSVCMsg_ServerInfo::kUgcMapIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ServerInfo::CSVCMsg_ServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ServerInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ServerInfo)
}
CSVCMsg_ServerInfo::CSVCMsg_ServerInfo(const CSVCMsg_ServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_dir()) {
    game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
  }
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  map_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_group_name()) {
    map_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_group_name_);
  }
  sky_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sky_name()) {
    sky_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_name_);
  }
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_host_name()) {
    host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
  }
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_redirecting_to_proxy_relay_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(is_redirecting_to_proxy_relay_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ServerInfo)
}

void CSVCMsg_ServerInfo::SharedCtor() {
  _cached_size_ = 0;
  game_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_redirecting_to_proxy_relay_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(is_redirecting_to_proxy_relay_));
}

CSVCMsg_ServerInfo::~CSVCMsg_ServerInfo() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ServerInfo)
  SharedDtor();
}

void CSVCMsg_ServerInfo::SharedDtor() {
  game_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sky_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_ServerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ServerInfo::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_ServerInfo& CSVCMsg_ServerInfo::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ServerInfo();
  return *internal_default_instance();
}

CSVCMsg_ServerInfo* CSVCMsg_ServerInfo::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ServerInfo* n = new CSVCMsg_ServerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!game_dir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_dir_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!map_group_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_group_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!sky_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sky_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(!host_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*host_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&protocol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_dedicated_) -
        reinterpret_cast<char*>(&protocol_)) + sizeof(is_dedicated_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&is_official_valve_server_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_clients_) -
        reinterpret_cast<char*>(&is_official_valve_server_)) + sizeof(max_clients_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&max_classes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_redirecting_to_proxy_relay_) -
        reinterpret_cast<char*>(&max_classes_)) + sizeof(is_redirecting_to_proxy_relay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ServerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_protocol();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 server_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_server_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dedicated = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_dedicated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dedicated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_official_valve_server = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_official_valve_server();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_official_valve_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hltv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_hltv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hltv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_replay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_is_replay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_replay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 c_os = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_c_os();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &c_os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 map_crc = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_map_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &map_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 client_crc = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_client_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &client_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 string_table_crc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_string_table_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &string_table_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_clients = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_max_clients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_clients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_classes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_max_classes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_classes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_slot = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tick_interval = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_tick_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tick_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_dir = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_dir().data(), static_cast<int>(this->game_dir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.game_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_group_name = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_group_name().data(), static_cast<int>(this->map_group_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.map_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sky_name = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sky_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sky_name().data(), static_cast<int>(this->sky_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.sky_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string host_name = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), static_cast<int>(this->host_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ServerInfo.host_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 public_ip = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          set_has_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_redirecting_to_proxy_relay = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          set_has_is_redirecting_to_proxy_relay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_redirecting_to_proxy_relay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ugc_map_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {
          set_has_ugc_map_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ugc_map_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ServerInfo)
  return false;
#undef DO_
}

void CSVCMsg_ServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 protocol = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocol(), output);
  }

  // optional int32 server_count = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->server_count(), output);
  }

  // optional bool is_dedicated = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dedicated(), output);
  }

  // optional bool is_official_valve_server = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_official_valve_server(), output);
  }

  // optional bool is_hltv = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_hltv(), output);
  }

  // optional bool is_replay = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_replay(), output);
  }

  // optional int32 c_os = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->c_os(), output);
  }

  // optional fixed32 map_crc = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->map_crc(), output);
  }

  // optional fixed32 client_crc = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->client_crc(), output);
  }

  // optional fixed32 string_table_crc = 10;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->string_table_crc(), output);
  }

  // optional int32 max_clients = 11;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_clients(), output);
  }

  // optional int32 max_classes = 12;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_classes(), output);
  }

  // optional int32 player_slot = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->player_slot(), output);
  }

  // optional float tick_interval = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tick_interval(), output);
  }

  // optional string game_dir = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), static_cast<int>(this->game_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.game_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->game_dir(), output);
  }

  // optional string map_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->map_name(), output);
  }

  // optional string map_group_name = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_group_name().data(), static_cast<int>(this->map_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->map_group_name(), output);
  }

  // optional string sky_name = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sky_name().data(), static_cast<int>(this->sky_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.sky_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->sky_name(), output);
  }

  // optional string host_name = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->host_name(), output);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->public_ip(), output);
  }

  // optional bool is_redirecting_to_proxy_relay = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_redirecting_to_proxy_relay(), output);
  }

  // optional uint64 ugc_map_id = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->ugc_map_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ServerInfo)
}

::google::protobuf::uint8* CSVCMsg_ServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 protocol = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocol(), target);
  }

  // optional int32 server_count = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->server_count(), target);
  }

  // optional bool is_dedicated = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dedicated(), target);
  }

  // optional bool is_official_valve_server = 4;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_official_valve_server(), target);
  }

  // optional bool is_hltv = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_hltv(), target);
  }

  // optional bool is_replay = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_replay(), target);
  }

  // optional int32 c_os = 7;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->c_os(), target);
  }

  // optional fixed32 map_crc = 8;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->map_crc(), target);
  }

  // optional fixed32 client_crc = 9;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->client_crc(), target);
  }

  // optional fixed32 string_table_crc = 10;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->string_table_crc(), target);
  }

  // optional int32 max_clients = 11;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_clients(), target);
  }

  // optional int32 max_classes = 12;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_classes(), target);
  }

  // optional int32 player_slot = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->player_slot(), target);
  }

  // optional float tick_interval = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->tick_interval(), target);
  }

  // optional string game_dir = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_dir().data(), static_cast<int>(this->game_dir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.game_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->game_dir(), target);
  }

  // optional string map_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->map_name(), target);
  }

  // optional string map_group_name = 17;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_group_name().data(), static_cast<int>(this->map_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.map_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->map_group_name(), target);
  }

  // optional string sky_name = 18;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sky_name().data(), static_cast<int>(this->sky_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.sky_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->sky_name(), target);
  }

  // optional string host_name = 19;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), static_cast<int>(this->host_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ServerInfo.host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->host_name(), target);
  }

  // optional uint32 public_ip = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->public_ip(), target);
  }

  // optional bool is_redirecting_to_proxy_relay = 21;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_redirecting_to_proxy_relay(), target);
  }

  // optional uint64 ugc_map_id = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->ugc_map_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ServerInfo)
  return target;
}

size_t CSVCMsg_ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ServerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_dir = 15;
    if (has_game_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_dir());
    }

    // optional string map_name = 16;
    if (has_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string map_group_name = 17;
    if (has_map_group_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_group_name());
    }

    // optional string sky_name = 18;
    if (has_sky_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sky_name());
    }

    // optional string host_name = 19;
    if (has_host_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // optional int32 protocol = 1;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protocol());
    }

    // optional int32 server_count = 2;
    if (has_server_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_count());
    }

    // optional bool is_dedicated = 3;
    if (has_is_dedicated()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_official_valve_server = 4;
    if (has_is_official_valve_server()) {
      total_size += 1 + 1;
    }

    // optional bool is_hltv = 5;
    if (has_is_hltv()) {
      total_size += 1 + 1;
    }

    // optional bool is_replay = 6;
    if (has_is_replay()) {
      total_size += 1 + 1;
    }

    // optional int32 c_os = 7;
    if (has_c_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->c_os());
    }

    // optional fixed32 map_crc = 8;
    if (has_map_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 client_crc = 9;
    if (has_client_crc()) {
      total_size += 1 + 4;
    }

    // optional fixed32 string_table_crc = 10;
    if (has_string_table_crc()) {
      total_size += 1 + 4;
    }

    // optional int32 max_clients = 11;
    if (has_max_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_clients());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional int32 max_classes = 12;
    if (has_max_classes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_classes());
    }

    // optional int32 player_slot = 13;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_slot());
    }

    // optional float tick_interval = 14;
    if (has_tick_interval()) {
      total_size += 1 + 4;
    }

    // optional uint32 public_ip = 20;
    if (has_public_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->public_ip());
    }

    // optional uint64 ugc_map_id = 22;
    if (has_ugc_map_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ugc_map_id());
    }

    // optional bool is_redirecting_to_proxy_relay = 21;
    if (has_is_redirecting_to_proxy_relay()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ServerInfo)
    MergeFrom(*source);
  }
}

void CSVCMsg_ServerInfo::MergeFrom(const CSVCMsg_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_dir();
      game_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_dir_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_map_group_name();
      map_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_group_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_sky_name();
      sky_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sky_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_host_name();
      host_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_ = from.protocol_;
    }
    if (cached_has_bits & 0x00000040u) {
      server_count_ = from.server_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_dedicated_ = from.is_dedicated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_official_valve_server_ = from.is_official_valve_server_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_hltv_ = from.is_hltv_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_replay_ = from.is_replay_;
    }
    if (cached_has_bits & 0x00000800u) {
      c_os_ = from.c_os_;
    }
    if (cached_has_bits & 0x00001000u) {
      map_crc_ = from.map_crc_;
    }
    if (cached_has_bits & 0x00002000u) {
      client_crc_ = from.client_crc_;
    }
    if (cached_has_bits & 0x00004000u) {
      string_table_crc_ = from.string_table_crc_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_clients_ = from.max_clients_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      max_classes_ = from.max_classes_;
    }
    if (cached_has_bits & 0x00020000u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00040000u) {
      tick_interval_ = from.tick_interval_;
    }
    if (cached_has_bits & 0x00080000u) {
      public_ip_ = from.public_ip_;
    }
    if (cached_has_bits & 0x00100000u) {
      ugc_map_id_ = from.ugc_map_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_redirecting_to_proxy_relay_ = from.is_redirecting_to_proxy_relay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_ServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ServerInfo::CopyFrom(const CSVCMsg_ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ServerInfo::IsInitialized() const {
  return true;
}

void CSVCMsg_ServerInfo::Swap(CSVCMsg_ServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ServerInfo::InternalSwap(CSVCMsg_ServerInfo* other) {
  using std::swap;
  game_dir_.Swap(&other->game_dir_);
  map_name_.Swap(&other->map_name_);
  map_group_name_.Swap(&other->map_group_name_);
  sky_name_.Swap(&other->sky_name_);
  host_name_.Swap(&other->host_name_);
  swap(protocol_, other->protocol_);
  swap(server_count_, other->server_count_);
  swap(is_dedicated_, other->is_dedicated_);
  swap(is_official_valve_server_, other->is_official_valve_server_);
  swap(is_hltv_, other->is_hltv_);
  swap(is_replay_, other->is_replay_);
  swap(c_os_, other->c_os_);
  swap(map_crc_, other->map_crc_);
  swap(client_crc_, other->client_crc_);
  swap(string_table_crc_, other->string_table_crc_);
  swap(max_clients_, other->max_clients_);
  swap(max_classes_, other->max_classes_);
  swap(player_slot_, other->player_slot_);
  swap(tick_interval_, other->tick_interval_);
  swap(public_ip_, other->public_ip_);
  swap(ugc_map_id_, other->ugc_map_id_);
  swap(is_redirecting_to_proxy_relay_, other->is_redirecting_to_proxy_relay_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ServerInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_ClassInfo_class_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ClassInfo_class_t::kClassIdFieldNumber;
const int CSVCMsg_ClassInfo_class_t::kDataTableNameFieldNumber;
const int CSVCMsg_ClassInfo_class_t::kClassNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ClassInfo_class_t::CSVCMsg_ClassInfo_class_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ClassInfo_class_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ClassInfo.class_t)
}
CSVCMsg_ClassInfo_class_t::CSVCMsg_ClassInfo_class_t(const CSVCMsg_ClassInfo_class_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data_table_name()) {
    data_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_table_name_);
  }
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_class_name()) {
    class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
  }
  class_id_ = from.class_id_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ClassInfo.class_t)
}

void CSVCMsg_ClassInfo_class_t::SharedCtor() {
  _cached_size_ = 0;
  data_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_ = 0;
}

CSVCMsg_ClassInfo_class_t::~CSVCMsg_ClassInfo_class_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ClassInfo.class_t)
  SharedDtor();
}

void CSVCMsg_ClassInfo_class_t::SharedDtor() {
  data_table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_ClassInfo_class_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ClassInfo_class_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_ClassInfo_class_t& CSVCMsg_ClassInfo_class_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ClassInfo_class_t();
  return *internal_default_instance();
}

CSVCMsg_ClassInfo_class_t* CSVCMsg_ClassInfo_class_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ClassInfo_class_t* n = new CSVCMsg_ClassInfo_class_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ClassInfo_class_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!data_table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_table_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!class_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*class_name_.UnsafeRawStringPointer())->clear();
    }
  }
  class_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ClassInfo.class_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data_table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_table_name().data(), static_cast<int>(this->data_table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ClassInfo.class_t.data_table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string class_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_name().data(), static_cast<int>(this->class_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_ClassInfo.class_t.class_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ClassInfo.class_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ClassInfo.class_t)
  return false;
#undef DO_
}

void CSVCMsg_ClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }

  // optional string data_table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_table_name().data(), static_cast<int>(this->data_table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.data_table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_table_name(), output);
  }

  // optional string class_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.class_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->class_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ClassInfo.class_t)
}

::google::protobuf::uint8* CSVCMsg_ClassInfo_class_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ClassInfo.class_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 class_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }

  // optional string data_table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_table_name().data(), static_cast<int>(this->data_table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.data_table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_table_name(), target);
  }

  // optional string class_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_name().data(), static_cast<int>(this->class_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_ClassInfo.class_t.class_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->class_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ClassInfo.class_t)
  return target;
}

size_t CSVCMsg_ClassInfo_class_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ClassInfo.class_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string data_table_name = 2;
    if (has_data_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_table_name());
    }

    // optional string class_name = 3;
    if (has_class_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_name());
    }

    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ClassInfo_class_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ClassInfo_class_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ClassInfo.class_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ClassInfo.class_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_ClassInfo_class_t::MergeFrom(const CSVCMsg_ClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ClassInfo.class_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data_table_name();
      data_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_class_name();
      class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      class_id_ = from.class_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_ClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ClassInfo_class_t::CopyFrom(const CSVCMsg_ClassInfo_class_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ClassInfo.class_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ClassInfo_class_t::IsInitialized() const {
  return true;
}

void CSVCMsg_ClassInfo_class_t::Swap(CSVCMsg_ClassInfo_class_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ClassInfo_class_t::InternalSwap(CSVCMsg_ClassInfo_class_t* other) {
  using std::swap;
  data_table_name_.Swap(&other->data_table_name_);
  class_name_.Swap(&other->class_name_);
  swap(class_id_, other->class_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ClassInfo_class_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_ClassInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_ClassInfo::kCreateOnClientFieldNumber;
const int CSVCMsg_ClassInfo::kClassesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_ClassInfo::CSVCMsg_ClassInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ClassInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_ClassInfo)
}
CSVCMsg_ClassInfo::CSVCMsg_ClassInfo(const CSVCMsg_ClassInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  create_on_client_ = from.create_on_client_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_ClassInfo)
}

void CSVCMsg_ClassInfo::SharedCtor() {
  _cached_size_ = 0;
  create_on_client_ = false;
}

CSVCMsg_ClassInfo::~CSVCMsg_ClassInfo() {
  // @@protoc_insertion_point(destructor:CSVCMsg_ClassInfo)
  SharedDtor();
}

void CSVCMsg_ClassInfo::SharedDtor() {
}

void CSVCMsg_ClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_ClassInfo::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_ClassInfo& CSVCMsg_ClassInfo::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_ClassInfo();
  return *internal_default_instance();
}

CSVCMsg_ClassInfo* CSVCMsg_ClassInfo::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_ClassInfo* n = new CSVCMsg_ClassInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_ClassInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_ClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  create_on_client_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_ClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_ClassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool create_on_client = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_create_on_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_on_client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_classes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_ClassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_ClassInfo)
  return false;
#undef DO_
}

void CSVCMsg_ClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_ClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool create_on_client = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->create_on_client(), output);
  }

  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->classes(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_ClassInfo)
}

::google::protobuf::uint8* CSVCMsg_ClassInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_ClassInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool create_on_client = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->create_on_client(), target);
  }

  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->classes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->classes(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_ClassInfo)
  return target;
}

size_t CSVCMsg_ClassInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_ClassInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_ClassInfo.class_t classes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->classes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->classes(static_cast<int>(i)));
    }
  }

  // optional bool create_on_client = 1;
  if (has_create_on_client()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_ClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_ClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_ClassInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_ClassInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_ClassInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_ClassInfo)
    MergeFrom(*source);
  }
}

void CSVCMsg_ClassInfo::MergeFrom(const CSVCMsg_ClassInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_ClassInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  if (from.has_create_on_client()) {
    set_create_on_client(from.create_on_client());
  }
}

void CSVCMsg_ClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_ClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_ClassInfo::CopyFrom(const CSVCMsg_ClassInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_ClassInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_ClassInfo::IsInitialized() const {
  return true;
}

void CSVCMsg_ClassInfo::Swap(CSVCMsg_ClassInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_ClassInfo::InternalSwap(CSVCMsg_ClassInfo* other) {
  using std::swap;
  classes_.InternalSwap(&other->classes_);
  swap(create_on_client_, other->create_on_client_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_ClassInfo::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_SendTable_sendprop_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SendTable_sendprop_t::kTypeFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kVarNameFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kFlagsFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kPriorityFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kDtNameFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kNumElementsFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kLowValueFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kHighValueFieldNumber;
const int CSVCMsg_SendTable_sendprop_t::kNumBitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SendTable_sendprop_t::CSVCMsg_SendTable_sendprop_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SendTable_sendprop_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SendTable.sendprop_t)
}
CSVCMsg_SendTable_sendprop_t::CSVCMsg_SendTable_sendprop_t(const CSVCMsg_SendTable_sendprop_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_var_name()) {
    var_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  dt_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dt_name()) {
    dt_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dt_name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bits_) -
    reinterpret_cast<char*>(&type_)) + sizeof(num_bits_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SendTable.sendprop_t)
}

void CSVCMsg_SendTable_sendprop_t::SharedCtor() {
  _cached_size_ = 0;
  var_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bits_) -
      reinterpret_cast<char*>(&type_)) + sizeof(num_bits_));
}

CSVCMsg_SendTable_sendprop_t::~CSVCMsg_SendTable_sendprop_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SendTable.sendprop_t)
  SharedDtor();
}

void CSVCMsg_SendTable_sendprop_t::SharedDtor() {
  var_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dt_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_SendTable_sendprop_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SendTable_sendprop_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_SendTable_sendprop_t& CSVCMsg_SendTable_sendprop_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SendTable_sendprop_t();
  return *internal_default_instance();
}

CSVCMsg_SendTable_sendprop_t* CSVCMsg_SendTable_sendprop_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SendTable_sendprop_t* n = new CSVCMsg_SendTable_sendprop_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SendTable_sendprop_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SendTable.sendprop_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!var_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*var_name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!dt_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dt_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(high_value_));
  }
  num_bits_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SendTable_sendprop_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SendTable.sendprop_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string var_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_var_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->var_name().data(), static_cast<int>(this->var_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.sendprop_t.var_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 priority = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dt_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dt_name().data(), static_cast<int>(this->dt_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.sendprop_t.dt_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_elements = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_num_elements();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_elements_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float low_value = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_low_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &low_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float high_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_high_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &high_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_bits = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_num_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SendTable.sendprop_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SendTable.sendprop_t)
  return false;
#undef DO_
}

void CSVCMsg_SendTable_sendprop_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SendTable.sendprop_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_name().data(), static_cast<int>(this->var_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.var_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->var_name(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  // optional int32 priority = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->priority(), output);
  }

  // optional string dt_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dt_name().data(), static_cast<int>(this->dt_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.dt_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dt_name(), output);
  }

  // optional int32 num_elements = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_elements(), output);
  }

  // optional float low_value = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->low_value(), output);
  }

  // optional float high_value = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->high_value(), output);
  }

  // optional int32 num_bits = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_bits(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SendTable.sendprop_t)
}

::google::protobuf::uint8* CSVCMsg_SendTable_sendprop_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SendTable.sendprop_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->var_name().data(), static_cast<int>(this->var_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.var_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->var_name(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  // optional int32 priority = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->priority(), target);
  }

  // optional string dt_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dt_name().data(), static_cast<int>(this->dt_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.sendprop_t.dt_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dt_name(), target);
  }

  // optional int32 num_elements = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_elements(), target);
  }

  // optional float low_value = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->low_value(), target);
  }

  // optional float high_value = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->high_value(), target);
  }

  // optional int32 num_bits = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_bits(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SendTable.sendprop_t)
  return target;
}

size_t CSVCMsg_SendTable_sendprop_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SendTable.sendprop_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string var_name = 2;
    if (has_var_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->var_name());
    }

    // optional string dt_name = 5;
    if (has_dt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dt_name());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional int32 priority = 4;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }

    // optional int32 num_elements = 6;
    if (has_num_elements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_elements());
    }

    // optional float low_value = 7;
    if (has_low_value()) {
      total_size += 1 + 4;
    }

    // optional float high_value = 8;
    if (has_high_value()) {
      total_size += 1 + 4;
    }

  }
  // optional int32 num_bits = 9;
  if (has_num_bits()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_bits());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SendTable_sendprop_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SendTable.sendprop_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SendTable_sendprop_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SendTable_sendprop_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SendTable.sendprop_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SendTable.sendprop_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_SendTable_sendprop_t::MergeFrom(const CSVCMsg_SendTable_sendprop_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SendTable.sendprop_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_var_name();
      var_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dt_name();
      dt_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dt_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      priority_ = from.priority_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_elements_ = from.num_elements_;
    }
    if (cached_has_bits & 0x00000040u) {
      low_value_ = from.low_value_;
    }
    if (cached_has_bits & 0x00000080u) {
      high_value_ = from.high_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_num_bits(from.num_bits());
  }
}

void CSVCMsg_SendTable_sendprop_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SendTable.sendprop_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SendTable_sendprop_t::CopyFrom(const CSVCMsg_SendTable_sendprop_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SendTable.sendprop_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SendTable_sendprop_t::IsInitialized() const {
  return true;
}

void CSVCMsg_SendTable_sendprop_t::Swap(CSVCMsg_SendTable_sendprop_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SendTable_sendprop_t::InternalSwap(CSVCMsg_SendTable_sendprop_t* other) {
  using std::swap;
  var_name_.Swap(&other->var_name_);
  dt_name_.Swap(&other->dt_name_);
  swap(type_, other->type_);
  swap(flags_, other->flags_);
  swap(priority_, other->priority_);
  swap(num_elements_, other->num_elements_);
  swap(low_value_, other->low_value_);
  swap(high_value_, other->high_value_);
  swap(num_bits_, other->num_bits_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SendTable_sendprop_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_SendTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SendTable::kIsEndFieldNumber;
const int CSVCMsg_SendTable::kNetTableNameFieldNumber;
const int CSVCMsg_SendTable::kNeedsDecoderFieldNumber;
const int CSVCMsg_SendTable::kPropsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SendTable::CSVCMsg_SendTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SendTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SendTable)
}
CSVCMsg_SendTable::CSVCMsg_SendTable(const CSVCMsg_SendTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      props_(from.props_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  net_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_table_name()) {
    net_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_table_name_);
  }
  ::memcpy(&is_end_, &from.is_end_,
    static_cast<size_t>(reinterpret_cast<char*>(&needs_decoder_) -
    reinterpret_cast<char*>(&is_end_)) + sizeof(needs_decoder_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SendTable)
}

void CSVCMsg_SendTable::SharedCtor() {
  _cached_size_ = 0;
  net_table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needs_decoder_) -
      reinterpret_cast<char*>(&is_end_)) + sizeof(needs_decoder_));
}

CSVCMsg_SendTable::~CSVCMsg_SendTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SendTable)
  SharedDtor();
}

void CSVCMsg_SendTable::SharedDtor() {
  net_table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_SendTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SendTable::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_SendTable& CSVCMsg_SendTable::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SendTable();
  return *internal_default_instance();
}

CSVCMsg_SendTable* CSVCMsg_SendTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SendTable* n = new CSVCMsg_SendTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SendTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SendTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  props_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!net_table_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*net_table_name_.UnsafeRawStringPointer())->clear();
  }
  ::memset(&is_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needs_decoder_) -
      reinterpret_cast<char*>(&is_end_)) + sizeof(needs_decoder_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SendTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SendTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_end = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_is_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string net_table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_table_name().data(), static_cast<int>(this->net_table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_SendTable.net_table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_decoder = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_needs_decoder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_decoder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_props()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SendTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SendTable)
  return false;
#undef DO_
}

void CSVCMsg_SendTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SendTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_end = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_end(), output);
  }

  // optional string net_table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_table_name().data(), static_cast<int>(this->net_table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.net_table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_table_name(), output);
  }

  // optional bool needs_decoder = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needs_decoder(), output);
  }

  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->props(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SendTable)
}

::google::protobuf::uint8* CSVCMsg_SendTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SendTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_end = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_end(), target);
  }

  // optional string net_table_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_table_name().data(), static_cast<int>(this->net_table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_SendTable.net_table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_table_name(), target);
  }

  // optional bool needs_decoder = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needs_decoder(), target);
  }

  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->props_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->props(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SendTable)
  return target;
}

size_t CSVCMsg_SendTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SendTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_SendTable.sendprop_t props = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->props_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->props(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string net_table_name = 2;
    if (has_net_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_table_name());
    }

    // optional bool is_end = 1;
    if (has_is_end()) {
      total_size += 1 + 1;
    }

    // optional bool needs_decoder = 3;
    if (has_needs_decoder()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SendTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SendTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SendTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SendTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SendTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SendTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_SendTable::MergeFrom(const CSVCMsg_SendTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SendTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  props_.MergeFrom(from.props_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_net_table_name();
      net_table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_table_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_end_ = from.is_end_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_decoder_ = from.needs_decoder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_SendTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SendTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SendTable::CopyFrom(const CSVCMsg_SendTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SendTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SendTable::IsInitialized() const {
  return true;
}

void CSVCMsg_SendTable::Swap(CSVCMsg_SendTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SendTable::InternalSwap(CSVCMsg_SendTable* other) {
  using std::swap;
  props_.InternalSwap(&other->props_);
  net_table_name_.Swap(&other->net_table_name_);
  swap(is_end_, other->is_end_);
  swap(needs_decoder_, other->needs_decoder_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SendTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Print::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Print::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Print::CSVCMsg_Print()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Print();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Print)
}
CSVCMsg_Print::CSVCMsg_Print(const CSVCMsg_Print& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Print)
}

void CSVCMsg_Print::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_Print::~CSVCMsg_Print() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Print)
  SharedDtor();
}

void CSVCMsg_Print::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Print::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Print::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Print& CSVCMsg_Print::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Print();
  return *internal_default_instance();
}

CSVCMsg_Print* CSVCMsg_Print::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Print* n = new CSVCMsg_Print;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Print::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Print)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Print::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Print)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_Print.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Print)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Print)
  return false;
#undef DO_
}

void CSVCMsg_Print::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Print)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Print.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Print)
}

::google::protobuf::uint8* CSVCMsg_Print::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Print)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Print.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Print)
  return target;
}

size_t CSVCMsg_Print::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Print)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Print::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Print)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Print* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Print>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Print)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Print)
    MergeFrom(*source);
  }
}

void CSVCMsg_Print::MergeFrom(const CSVCMsg_Print& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Print)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CSVCMsg_Print::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Print)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Print::CopyFrom(const CSVCMsg_Print& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Print)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Print::IsInitialized() const {
  return true;
}

void CSVCMsg_Print::Swap(CSVCMsg_Print* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Print::InternalSwap(CSVCMsg_Print* other) {
  using std::swap;
  text_.Swap(&other->text_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Print::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_SetPause::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SetPause::kPausedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SetPause::CSVCMsg_SetPause()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SetPause();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SetPause)
}
CSVCMsg_SetPause::CSVCMsg_SetPause(const CSVCMsg_SetPause& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paused_ = from.paused_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SetPause)
}

void CSVCMsg_SetPause::SharedCtor() {
  _cached_size_ = 0;
  paused_ = false;
}

CSVCMsg_SetPause::~CSVCMsg_SetPause() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SetPause)
  SharedDtor();
}

void CSVCMsg_SetPause::SharedDtor() {
}

void CSVCMsg_SetPause::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SetPause::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_SetPause& CSVCMsg_SetPause::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SetPause();
  return *internal_default_instance();
}

CSVCMsg_SetPause* CSVCMsg_SetPause::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SetPause* n = new CSVCMsg_SetPause;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SetPause::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SetPause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paused_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SetPause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SetPause)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool paused = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SetPause)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SetPause)
  return false;
#undef DO_
}

void CSVCMsg_SetPause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SetPause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool paused = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->paused(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SetPause)
}

::google::protobuf::uint8* CSVCMsg_SetPause::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SetPause)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool paused = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->paused(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SetPause)
  return target;
}

size_t CSVCMsg_SetPause::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SetPause)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bool paused = 1;
  if (has_paused()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SetPause::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SetPause)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SetPause* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SetPause>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SetPause)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SetPause)
    MergeFrom(*source);
  }
}

void CSVCMsg_SetPause::MergeFrom(const CSVCMsg_SetPause& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SetPause)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paused()) {
    set_paused(from.paused());
  }
}

void CSVCMsg_SetPause::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SetPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SetPause::CopyFrom(const CSVCMsg_SetPause& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SetPause)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SetPause::IsInitialized() const {
  return true;
}

void CSVCMsg_SetPause::Swap(CSVCMsg_SetPause* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SetPause::InternalSwap(CSVCMsg_SetPause* other) {
  using std::swap;
  swap(paused_, other->paused_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SetPause::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_SetView::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SetView::kEntityIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SetView::CSVCMsg_SetView()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SetView();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SetView)
}
CSVCMsg_SetView::CSVCMsg_SetView(const CSVCMsg_SetView& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_index_ = from.entity_index_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SetView)
}

void CSVCMsg_SetView::SharedCtor() {
  _cached_size_ = 0;
  entity_index_ = 0;
}

CSVCMsg_SetView::~CSVCMsg_SetView() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SetView)
  SharedDtor();
}

void CSVCMsg_SetView::SharedDtor() {
}

void CSVCMsg_SetView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SetView::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_SetView& CSVCMsg_SetView::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SetView();
  return *internal_default_instance();
}

CSVCMsg_SetView* CSVCMsg_SetView::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SetView* n = new CSVCMsg_SetView;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SetView::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SetView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SetView)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SetView)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SetView)
  return false;
#undef DO_
}

void CSVCMsg_SetView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SetView)
}

::google::protobuf::uint8* CSVCMsg_SetView::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SetView)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SetView)
  return target;
}

size_t CSVCMsg_SetView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SetView)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 entity_index = 1;
  if (has_entity_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->entity_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SetView::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SetView)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SetView* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SetView>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SetView)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SetView)
    MergeFrom(*source);
  }
}

void CSVCMsg_SetView::MergeFrom(const CSVCMsg_SetView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SetView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_entity_index()) {
    set_entity_index(from.entity_index());
  }
}

void CSVCMsg_SetView::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SetView::CopyFrom(const CSVCMsg_SetView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SetView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SetView::IsInitialized() const {
  return true;
}

void CSVCMsg_SetView::Swap(CSVCMsg_SetView* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SetView::InternalSwap(CSVCMsg_SetView* other) {
  using std::swap;
  swap(entity_index_, other->entity_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SetView::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_CreateStringTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CreateStringTable::kNameFieldNumber;
const int CSVCMsg_CreateStringTable::kMaxEntriesFieldNumber;
const int CSVCMsg_CreateStringTable::kNumEntriesFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataFixedSizeFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataSizeFieldNumber;
const int CSVCMsg_CreateStringTable::kUserDataSizeBitsFieldNumber;
const int CSVCMsg_CreateStringTable::kFlagsFieldNumber;
const int CSVCMsg_CreateStringTable::kStringDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CreateStringTable::CSVCMsg_CreateStringTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CreateStringTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CreateStringTable)
}
CSVCMsg_CreateStringTable::CSVCMsg_CreateStringTable(const CSVCMsg_CreateStringTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_data()) {
    string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
  }
  ::memcpy(&max_entries_, &from.max_entries_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&max_entries_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CreateStringTable)
}

void CSVCMsg_CreateStringTable::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&max_entries_)) + sizeof(flags_));
}

CSVCMsg_CreateStringTable::~CSVCMsg_CreateStringTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CreateStringTable)
  SharedDtor();
}

void CSVCMsg_CreateStringTable::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_CreateStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CreateStringTable::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_CreateStringTable& CSVCMsg_CreateStringTable::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CreateStringTable();
  return *internal_default_instance();
}

CSVCMsg_CreateStringTable* CSVCMsg_CreateStringTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CreateStringTable* n = new CSVCMsg_CreateStringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CreateStringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CreateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!string_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*string_data_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&max_entries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&max_entries_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CreateStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CreateStringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_CreateStringTable.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_entries = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_num_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_data_fixed_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_user_data_fixed_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_data_fixed_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_data_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_user_data_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_data_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_data_size_bits = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_user_data_size_bits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_data_size_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes string_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CreateStringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CreateStringTable)
  return false;
#undef DO_
}

void CSVCMsg_CreateStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CreateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_CreateStringTable.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 max_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_entries(), output);
  }

  // optional int32 num_entries = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_entries(), output);
  }

  // optional bool user_data_fixed_size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->user_data_fixed_size(), output);
  }

  // optional int32 user_data_size = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_data_size(), output);
  }

  // optional int32 user_data_size_bits = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->user_data_size_bits(), output);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flags(), output);
  }

  // optional bytes string_data = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->string_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CreateStringTable)
}

::google::protobuf::uint8* CSVCMsg_CreateStringTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CreateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_CreateStringTable.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 max_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_entries(), target);
  }

  // optional int32 num_entries = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_entries(), target);
  }

  // optional bool user_data_fixed_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->user_data_fixed_size(), target);
  }

  // optional int32 user_data_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_data_size(), target);
  }

  // optional int32 user_data_size_bits = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->user_data_size_bits(), target);
  }

  // optional int32 flags = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flags(), target);
  }

  // optional bytes string_data = 8;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->string_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CreateStringTable)
  return target;
}

size_t CSVCMsg_CreateStringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CreateStringTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes string_data = 8;
    if (has_string_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->string_data());
    }

    // optional int32 max_entries = 2;
    if (has_max_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_entries());
    }

    // optional int32 num_entries = 3;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

    // optional bool user_data_fixed_size = 4;
    if (has_user_data_fixed_size()) {
      total_size += 1 + 1;
    }

    // optional int32 user_data_size = 5;
    if (has_user_data_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_data_size());
    }

    // optional int32 user_data_size_bits = 6;
    if (has_user_data_size_bits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_data_size_bits());
    }

    // optional int32 flags = 7;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CreateStringTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CreateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CreateStringTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CreateStringTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CreateStringTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CreateStringTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_CreateStringTable::MergeFrom(const CSVCMsg_CreateStringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CreateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_string_data();
      string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
    }
    if (cached_has_bits & 0x00000004u) {
      max_entries_ = from.max_entries_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_entries_ = from.num_entries_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_data_fixed_size_ = from.user_data_fixed_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      user_data_size_ = from.user_data_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_data_size_bits_ = from.user_data_size_bits_;
    }
    if (cached_has_bits & 0x00000080u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_CreateStringTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CreateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CreateStringTable::CopyFrom(const CSVCMsg_CreateStringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CreateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CreateStringTable::IsInitialized() const {
  return true;
}

void CSVCMsg_CreateStringTable::Swap(CSVCMsg_CreateStringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CreateStringTable::InternalSwap(CSVCMsg_CreateStringTable* other) {
  using std::swap;
  name_.Swap(&other->name_);
  string_data_.Swap(&other->string_data_);
  swap(max_entries_, other->max_entries_);
  swap(num_entries_, other->num_entries_);
  swap(user_data_fixed_size_, other->user_data_fixed_size_);
  swap(user_data_size_, other->user_data_size_);
  swap(user_data_size_bits_, other->user_data_size_bits_);
  swap(flags_, other->flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CreateStringTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_UpdateStringTable::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_UpdateStringTable::kTableIdFieldNumber;
const int CSVCMsg_UpdateStringTable::kNumChangedEntriesFieldNumber;
const int CSVCMsg_UpdateStringTable::kStringDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_UpdateStringTable::CSVCMsg_UpdateStringTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_UpdateStringTable();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_UpdateStringTable)
}
CSVCMsg_UpdateStringTable::CSVCMsg_UpdateStringTable(const CSVCMsg_UpdateStringTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_data()) {
    string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
  }
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_changed_entries_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(num_changed_entries_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UpdateStringTable)
}

void CSVCMsg_UpdateStringTable::SharedCtor() {
  _cached_size_ = 0;
  string_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_changed_entries_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(num_changed_entries_));
}

CSVCMsg_UpdateStringTable::~CSVCMsg_UpdateStringTable() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UpdateStringTable)
  SharedDtor();
}

void CSVCMsg_UpdateStringTable::SharedDtor() {
  string_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_UpdateStringTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UpdateStringTable::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_UpdateStringTable& CSVCMsg_UpdateStringTable::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_UpdateStringTable();
  return *internal_default_instance();
}

CSVCMsg_UpdateStringTable* CSVCMsg_UpdateStringTable::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_UpdateStringTable* n = new CSVCMsg_UpdateStringTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_UpdateStringTable::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_UpdateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!string_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*string_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&table_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_changed_entries_) -
        reinterpret_cast<char*>(&table_id_)) + sizeof(num_changed_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_UpdateStringTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_UpdateStringTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 table_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_changed_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_changed_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_changed_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes string_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_string_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_UpdateStringTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_UpdateStringTable)
  return false;
#undef DO_
}

void CSVCMsg_UpdateStringTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_UpdateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 table_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_id(), output);
  }

  // optional int32 num_changed_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_changed_entries(), output);
  }

  // optional bytes string_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->string_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_UpdateStringTable)
}

::google::protobuf::uint8* CSVCMsg_UpdateStringTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UpdateStringTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 table_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_id(), target);
  }

  // optional int32 num_changed_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_changed_entries(), target);
  }

  // optional bytes string_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->string_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UpdateStringTable)
  return target;
}

size_t CSVCMsg_UpdateStringTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_UpdateStringTable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes string_data = 3;
    if (has_string_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->string_data());
    }

    // optional int32 table_id = 1;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // optional int32 num_changed_entries = 2;
    if (has_num_changed_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_changed_entries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UpdateStringTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_UpdateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_UpdateStringTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_UpdateStringTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_UpdateStringTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_UpdateStringTable)
    MergeFrom(*source);
  }
}

void CSVCMsg_UpdateStringTable::MergeFrom(const CSVCMsg_UpdateStringTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_UpdateStringTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_string_data();
      string_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      table_id_ = from.table_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_changed_entries_ = from.num_changed_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_UpdateStringTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_UpdateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UpdateStringTable::CopyFrom(const CSVCMsg_UpdateStringTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_UpdateStringTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UpdateStringTable::IsInitialized() const {
  return true;
}

void CSVCMsg_UpdateStringTable::Swap(CSVCMsg_UpdateStringTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_UpdateStringTable::InternalSwap(CSVCMsg_UpdateStringTable* other) {
  using std::swap;
  string_data_.Swap(&other->string_data_);
  swap(table_id_, other->table_id_);
  swap(num_changed_entries_, other->num_changed_entries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_UpdateStringTable::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_VoiceInit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_VoiceInit::kQualityFieldNumber;
const int CSVCMsg_VoiceInit::kCodecFieldNumber;
const int CSVCMsg_VoiceInit::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_VoiceInit::CSVCMsg_VoiceInit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_VoiceInit();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_VoiceInit)
}
CSVCMsg_VoiceInit::CSVCMsg_VoiceInit(const CSVCMsg_VoiceInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_codec()) {
    codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_);
  }
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_VoiceInit)
}

void CSVCMsg_VoiceInit::SharedCtor() {
  _cached_size_ = 0;
  codec_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(version_));
}

CSVCMsg_VoiceInit::~CSVCMsg_VoiceInit() {
  // @@protoc_insertion_point(destructor:CSVCMsg_VoiceInit)
  SharedDtor();
}

void CSVCMsg_VoiceInit::SharedDtor() {
  codec_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_VoiceInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_VoiceInit::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_VoiceInit& CSVCMsg_VoiceInit::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_VoiceInit();
  return *internal_default_instance();
}

CSVCMsg_VoiceInit* CSVCMsg_VoiceInit::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_VoiceInit* n = new CSVCMsg_VoiceInit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_VoiceInit::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_VoiceInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!codec_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*codec_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&quality_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&quality_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_VoiceInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_VoiceInit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 quality = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string codec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_codec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->codec().data(), static_cast<int>(this->codec().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_VoiceInit.codec");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_VoiceInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_VoiceInit)
  return false;
#undef DO_
}

void CSVCMsg_VoiceInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_VoiceInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 quality = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quality(), output);
  }

  // optional string codec = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), static_cast<int>(this->codec().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_VoiceInit.codec");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->codec(), output);
  }

  // optional int32 version = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_VoiceInit)
}

::google::protobuf::uint8* CSVCMsg_VoiceInit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_VoiceInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 quality = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quality(), target);
  }

  // optional string codec = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->codec().data(), static_cast<int>(this->codec().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_VoiceInit.codec");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->codec(), target);
  }

  // optional int32 version = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_VoiceInit)
  return target;
}

size_t CSVCMsg_VoiceInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_VoiceInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string codec = 2;
    if (has_codec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->codec());
    }

    // optional int32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 version = 3 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_VoiceInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_VoiceInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_VoiceInit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_VoiceInit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_VoiceInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_VoiceInit)
    MergeFrom(*source);
  }
}

void CSVCMsg_VoiceInit::MergeFrom(const CSVCMsg_VoiceInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_VoiceInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_codec();
      codec_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.codec_);
    }
    if (cached_has_bits & 0x00000002u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_VoiceInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_VoiceInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_VoiceInit::CopyFrom(const CSVCMsg_VoiceInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_VoiceInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_VoiceInit::IsInitialized() const {
  return true;
}

void CSVCMsg_VoiceInit::Swap(CSVCMsg_VoiceInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_VoiceInit::InternalSwap(CSVCMsg_VoiceInit* other) {
  using std::swap;
  codec_.Swap(&other->codec_);
  swap(quality_, other->quality_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_VoiceInit::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_VoiceData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_VoiceData::kClientFieldNumber;
const int CSVCMsg_VoiceData::kProximityFieldNumber;
const int CSVCMsg_VoiceData::kXuidFieldNumber;
const int CSVCMsg_VoiceData::kAudibleMaskFieldNumber;
const int CSVCMsg_VoiceData::kVoiceDataFieldNumber;
const int CSVCMsg_VoiceData::kCasterFieldNumber;
const int CSVCMsg_VoiceData::kFormatFieldNumber;
const int CSVCMsg_VoiceData::kSequenceBytesFieldNumber;
const int CSVCMsg_VoiceData::kSectionNumberFieldNumber;
const int CSVCMsg_VoiceData::kUncompressedSampleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_VoiceData::CSVCMsg_VoiceData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_VoiceData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_VoiceData)
}
CSVCMsg_VoiceData::CSVCMsg_VoiceData(const CSVCMsg_VoiceData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_data()) {
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
  ::memcpy(&client_, &from.client_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&client_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_VoiceData)
}

void CSVCMsg_VoiceData::SharedCtor() {
  _cached_size_ = 0;
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uncompressed_sample_offset_) -
      reinterpret_cast<char*>(&client_)) + sizeof(uncompressed_sample_offset_));
  format_ = 1;
}

CSVCMsg_VoiceData::~CSVCMsg_VoiceData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_VoiceData)
  SharedDtor();
}

void CSVCMsg_VoiceData::SharedDtor() {
  voice_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_VoiceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_VoiceData::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_VoiceData& CSVCMsg_VoiceData::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_VoiceData();
  return *internal_default_instance();
}

CSVCMsg_VoiceData* CSVCMsg_VoiceData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_VoiceData* n = new CSVCMsg_VoiceData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_VoiceData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!voice_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*voice_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&client_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&section_number_) -
        reinterpret_cast<char*>(&client_)) + sizeof(section_number_));
  }
  if (cached_has_bits & 768u) {
    uncompressed_sample_offset_ = 0u;
    format_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_VoiceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_VoiceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 client = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_client();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool proximity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_proximity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &proximity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 xuid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_xuid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &xuid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 audible_mask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_audible_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audible_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes voice_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool caster = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_caster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &caster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VoiceDataFormat_t_IsValid(value)) {
            set_format(static_cast< ::VoiceDataFormat_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_bytes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_sequence_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 section_number = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_section_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 uncompressed_sample_offset = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_uncompressed_sample_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uncompressed_sample_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_VoiceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_VoiceData)
  return false;
#undef DO_
}

void CSVCMsg_VoiceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 client = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->client(), output);
  }

  // optional bool proximity = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->proximity(), output);
  }

  // optional fixed64 xuid = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->xuid(), output);
  }

  // optional int32 audible_mask = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audible_mask(), output);
  }

  // optional bytes voice_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->voice_data(), output);
  }

  // optional bool caster = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->caster(), output);
  }

  // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->format(), output);
  }

  // optional int32 sequence_bytes = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sequence_bytes(), output);
  }

  // optional uint32 section_number = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->section_number(), output);
  }

  // optional uint32 uncompressed_sample_offset = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uncompressed_sample_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_VoiceData)
}

::google::protobuf::uint8* CSVCMsg_VoiceData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_VoiceData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 client = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->client(), target);
  }

  // optional bool proximity = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->proximity(), target);
  }

  // optional fixed64 xuid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->xuid(), target);
  }

  // optional int32 audible_mask = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->audible_mask(), target);
  }

  // optional bytes voice_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->voice_data(), target);
  }

  // optional bool caster = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->caster(), target);
  }

  // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->format(), target);
  }

  // optional int32 sequence_bytes = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sequence_bytes(), target);
  }

  // optional uint32 section_number = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->section_number(), target);
  }

  // optional uint32 uncompressed_sample_offset = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uncompressed_sample_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_VoiceData)
  return target;
}

size_t CSVCMsg_VoiceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_VoiceData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes voice_data = 5;
    if (has_voice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->voice_data());
    }

    // optional int32 client = 1;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client());
    }

    // optional int32 audible_mask = 4;
    if (has_audible_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audible_mask());
    }

    // optional fixed64 xuid = 3;
    if (has_xuid()) {
      total_size += 1 + 8;
    }

    // optional bool proximity = 2;
    if (has_proximity()) {
      total_size += 1 + 1;
    }

    // optional bool caster = 6;
    if (has_caster()) {
      total_size += 1 + 1;
    }

    // optional int32 sequence_bytes = 8;
    if (has_sequence_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_bytes());
    }

    // optional uint32 section_number = 9;
    if (has_section_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->section_number());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 uncompressed_sample_offset = 10;
    if (has_uncompressed_sample_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uncompressed_sample_offset());
    }

    // optional .VoiceDataFormat_t format = 7 [default = VOICEDATA_FORMAT_ENGINE];
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_VoiceData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_VoiceData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_VoiceData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_VoiceData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_VoiceData)
    MergeFrom(*source);
  }
}

void CSVCMsg_VoiceData::MergeFrom(const CSVCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_VoiceData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_voice_data();
      voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_ = from.client_;
    }
    if (cached_has_bits & 0x00000004u) {
      audible_mask_ = from.audible_mask_;
    }
    if (cached_has_bits & 0x00000008u) {
      xuid_ = from.xuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      proximity_ = from.proximity_;
    }
    if (cached_has_bits & 0x00000020u) {
      caster_ = from.caster_;
    }
    if (cached_has_bits & 0x00000040u) {
      sequence_bytes_ = from.sequence_bytes_;
    }
    if (cached_has_bits & 0x00000080u) {
      section_number_ = from.section_number_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      uncompressed_sample_offset_ = from.uncompressed_sample_offset_;
    }
    if (cached_has_bits & 0x00000200u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_VoiceData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_VoiceData::CopyFrom(const CSVCMsg_VoiceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_VoiceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_VoiceData::IsInitialized() const {
  return true;
}

void CSVCMsg_VoiceData::Swap(CSVCMsg_VoiceData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_VoiceData::InternalSwap(CSVCMsg_VoiceData* other) {
  using std::swap;
  voice_data_.Swap(&other->voice_data_);
  swap(client_, other->client_);
  swap(audible_mask_, other->audible_mask_);
  swap(xuid_, other->xuid_);
  swap(proximity_, other->proximity_);
  swap(caster_, other->caster_);
  swap(sequence_bytes_, other->sequence_bytes_);
  swap(section_number_, other->section_number_);
  swap(uncompressed_sample_offset_, other->uncompressed_sample_offset_);
  swap(format_, other->format_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_VoiceData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_FixAngle::InitAsDefaultInstance() {
  ::_CSVCMsg_FixAngle_default_instance_._instance.get_mutable()->angle_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_FixAngle::kRelativeFieldNumber;
const int CSVCMsg_FixAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_FixAngle::CSVCMsg_FixAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_FixAngle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_FixAngle)
}
CSVCMsg_FixAngle::CSVCMsg_FixAngle(const CSVCMsg_FixAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::CMsgQAngle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  relative_ = from.relative_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_FixAngle)
}

void CSVCMsg_FixAngle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(relative_));
}

CSVCMsg_FixAngle::~CSVCMsg_FixAngle() {
  // @@protoc_insertion_point(destructor:CSVCMsg_FixAngle)
  SharedDtor();
}

void CSVCMsg_FixAngle::SharedDtor() {
  if (this != internal_default_instance()) delete angle_;
}

void CSVCMsg_FixAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_FixAngle::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_FixAngle& CSVCMsg_FixAngle::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_FixAngle();
  return *internal_default_instance();
}

CSVCMsg_FixAngle* CSVCMsg_FixAngle::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_FixAngle* n = new CSVCMsg_FixAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_FixAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_FixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->Clear();
  }
  relative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_FixAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_FixAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_relative();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgQAngle angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_FixAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_FixAngle)
  return false;
#undef DO_
}

void CSVCMsg_FixAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_FixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relative(), output);
  }

  // optional .CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_FixAngle)
}

::google::protobuf::uint8* CSVCMsg_FixAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_FixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relative(), target);
  }

  // optional .CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->angle_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_FixAngle)
  return target;
}

size_t CSVCMsg_FixAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_FixAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .CMsgQAngle angle = 2;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->angle_);
    }

    // optional bool relative = 1;
    if (has_relative()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_FixAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_FixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_FixAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_FixAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_FixAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_FixAngle)
    MergeFrom(*source);
  }
}

void CSVCMsg_FixAngle::MergeFrom(const CSVCMsg_FixAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_FixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angle()->::CMsgQAngle::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000002u) {
      relative_ = from.relative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_FixAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_FixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_FixAngle::CopyFrom(const CSVCMsg_FixAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_FixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_FixAngle::IsInitialized() const {
  return true;
}

void CSVCMsg_FixAngle::Swap(CSVCMsg_FixAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_FixAngle::InternalSwap(CSVCMsg_FixAngle* other) {
  using std::swap;
  swap(angle_, other->angle_);
  swap(relative_, other->relative_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_FixAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_CrosshairAngle::InitAsDefaultInstance() {
  ::_CSVCMsg_CrosshairAngle_default_instance_._instance.get_mutable()->angle_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CrosshairAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CrosshairAngle::CSVCMsg_CrosshairAngle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CrosshairAngle();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CrosshairAngle)
}
CSVCMsg_CrosshairAngle::CSVCMsg_CrosshairAngle(const CSVCMsg_CrosshairAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::CMsgQAngle(*from.angle_);
  } else {
    angle_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CrosshairAngle)
}

void CSVCMsg_CrosshairAngle::SharedCtor() {
  _cached_size_ = 0;
  angle_ = NULL;
}

CSVCMsg_CrosshairAngle::~CSVCMsg_CrosshairAngle() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CrosshairAngle)
  SharedDtor();
}

void CSVCMsg_CrosshairAngle::SharedDtor() {
  if (this != internal_default_instance()) delete angle_;
}

void CSVCMsg_CrosshairAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CrosshairAngle::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_CrosshairAngle& CSVCMsg_CrosshairAngle::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CrosshairAngle();
  return *internal_default_instance();
}

CSVCMsg_CrosshairAngle* CSVCMsg_CrosshairAngle::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CrosshairAngle* n = new CSVCMsg_CrosshairAngle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CrosshairAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angle_ != NULL);
    angle_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CrosshairAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CrosshairAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgQAngle angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CrosshairAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CrosshairAngle)
  return false;
#undef DO_
}

void CSVCMsg_CrosshairAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgQAngle angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->angle_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CrosshairAngle)
}

::google::protobuf::uint8* CSVCMsg_CrosshairAngle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgQAngle angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->angle_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CrosshairAngle)
  return target;
}

size_t CSVCMsg_CrosshairAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CrosshairAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .CMsgQAngle angle = 1;
  if (has_angle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->angle_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CrosshairAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CrosshairAngle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CrosshairAngle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CrosshairAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CrosshairAngle)
    MergeFrom(*source);
  }
}

void CSVCMsg_CrosshairAngle::MergeFrom(const CSVCMsg_CrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angle()) {
    mutable_angle()->::CMsgQAngle::MergeFrom(from.angle());
  }
}

void CSVCMsg_CrosshairAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CrosshairAngle::CopyFrom(const CSVCMsg_CrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CrosshairAngle::IsInitialized() const {
  return true;
}

void CSVCMsg_CrosshairAngle::Swap(CSVCMsg_CrosshairAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CrosshairAngle::InternalSwap(CSVCMsg_CrosshairAngle* other) {
  using std::swap;
  swap(angle_, other->angle_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CrosshairAngle::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Prefetch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Prefetch::kSoundIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Prefetch::CSVCMsg_Prefetch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Prefetch();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Prefetch)
}
CSVCMsg_Prefetch::CSVCMsg_Prefetch(const CSVCMsg_Prefetch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sound_index_ = from.sound_index_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Prefetch)
}

void CSVCMsg_Prefetch::SharedCtor() {
  _cached_size_ = 0;
  sound_index_ = 0;
}

CSVCMsg_Prefetch::~CSVCMsg_Prefetch() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Prefetch)
  SharedDtor();
}

void CSVCMsg_Prefetch::SharedDtor() {
}

void CSVCMsg_Prefetch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Prefetch::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Prefetch& CSVCMsg_Prefetch::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Prefetch();
  return *internal_default_instance();
}

CSVCMsg_Prefetch* CSVCMsg_Prefetch::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Prefetch* n = new CSVCMsg_Prefetch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Prefetch::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Prefetch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sound_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Prefetch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Prefetch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sound_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sound_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Prefetch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Prefetch)
  return false;
#undef DO_
}

void CSVCMsg_Prefetch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Prefetch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sound_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sound_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Prefetch)
}

::google::protobuf::uint8* CSVCMsg_Prefetch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Prefetch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sound_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sound_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Prefetch)
  return target;
}

size_t CSVCMsg_Prefetch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Prefetch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional int32 sound_index = 1;
  if (has_sound_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sound_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Prefetch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Prefetch)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Prefetch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Prefetch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Prefetch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Prefetch)
    MergeFrom(*source);
  }
}

void CSVCMsg_Prefetch::MergeFrom(const CSVCMsg_Prefetch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Prefetch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sound_index()) {
    set_sound_index(from.sound_index());
  }
}

void CSVCMsg_Prefetch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Prefetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Prefetch::CopyFrom(const CSVCMsg_Prefetch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Prefetch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Prefetch::IsInitialized() const {
  return true;
}

void CSVCMsg_Prefetch::Swap(CSVCMsg_Prefetch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Prefetch::InternalSwap(CSVCMsg_Prefetch* other) {
  using std::swap;
  swap(sound_index_, other->sound_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Prefetch::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_BSPDecal::InitAsDefaultInstance() {
  ::_CSVCMsg_BSPDecal_default_instance_._instance.get_mutable()->pos_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_BSPDecal::kPosFieldNumber;
const int CSVCMsg_BSPDecal::kDecalTextureIndexFieldNumber;
const int CSVCMsg_BSPDecal::kEntityIndexFieldNumber;
const int CSVCMsg_BSPDecal::kModelIndexFieldNumber;
const int CSVCMsg_BSPDecal::kLowPriorityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_BSPDecal::CSVCMsg_BSPDecal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_BSPDecal();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_BSPDecal)
}
CSVCMsg_BSPDecal::CSVCMsg_BSPDecal(const CSVCMsg_BSPDecal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::CMsgVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  ::memcpy(&decal_texture_index_, &from.decal_texture_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_priority_) -
    reinterpret_cast<char*>(&decal_texture_index_)) + sizeof(low_priority_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_BSPDecal)
}

void CSVCMsg_BSPDecal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(low_priority_));
}

CSVCMsg_BSPDecal::~CSVCMsg_BSPDecal() {
  // @@protoc_insertion_point(destructor:CSVCMsg_BSPDecal)
  SharedDtor();
}

void CSVCMsg_BSPDecal::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void CSVCMsg_BSPDecal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_BSPDecal::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_BSPDecal& CSVCMsg_BSPDecal::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_BSPDecal();
  return *internal_default_instance();
}

CSVCMsg_BSPDecal* CSVCMsg_BSPDecal::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_BSPDecal* n = new CSVCMsg_BSPDecal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_BSPDecal::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_BSPDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != NULL);
    pos_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&decal_texture_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_) -
        reinterpret_cast<char*>(&decal_texture_index_)) + sizeof(low_priority_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_BSPDecal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_BSPDecal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 decal_texture_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_decal_texture_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decal_texture_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 model_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_model_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &model_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_BSPDecal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_BSPDecal)
  return false;
#undef DO_
}

void CSVCMsg_BSPDecal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_BSPDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional int32 decal_texture_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->decal_texture_index(), output);
  }

  // optional int32 entity_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_index(), output);
  }

  // optional int32 model_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->model_index(), output);
  }

  // optional bool low_priority = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->low_priority(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_BSPDecal)
}

::google::protobuf::uint8* CSVCMsg_BSPDecal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_BSPDecal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->pos_, deterministic, target);
  }

  // optional int32 decal_texture_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->decal_texture_index(), target);
  }

  // optional int32 entity_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_index(), target);
  }

  // optional int32 model_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->model_index(), target);
  }

  // optional bool low_priority = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->low_priority(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_BSPDecal)
  return target;
}

size_t CSVCMsg_BSPDecal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_BSPDecal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .CMsgVector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pos_);
    }

    // optional int32 decal_texture_index = 2;
    if (has_decal_texture_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decal_texture_index());
    }

    // optional int32 entity_index = 3;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

    // optional int32 model_index = 4;
    if (has_model_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->model_index());
    }

    // optional bool low_priority = 5;
    if (has_low_priority()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_BSPDecal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_BSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_BSPDecal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_BSPDecal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_BSPDecal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_BSPDecal)
    MergeFrom(*source);
  }
}

void CSVCMsg_BSPDecal::MergeFrom(const CSVCMsg_BSPDecal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_BSPDecal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::CMsgVector::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      decal_texture_index_ = from.decal_texture_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_index_ = from.entity_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      model_index_ = from.model_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_BSPDecal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_BSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_BSPDecal::CopyFrom(const CSVCMsg_BSPDecal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_BSPDecal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_BSPDecal::IsInitialized() const {
  return true;
}

void CSVCMsg_BSPDecal::Swap(CSVCMsg_BSPDecal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_BSPDecal::InternalSwap(CSVCMsg_BSPDecal* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(decal_texture_index_, other->decal_texture_index_);
  swap(entity_index_, other->entity_index_);
  swap(model_index_, other->model_index_);
  swap(low_priority_, other->low_priority_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_BSPDecal::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_SplitScreen::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_SplitScreen::kTypeFieldNumber;
const int CSVCMsg_SplitScreen::kSlotFieldNumber;
const int CSVCMsg_SplitScreen::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_SplitScreen::CSVCMsg_SplitScreen()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SplitScreen();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_SplitScreen)
}
CSVCMsg_SplitScreen::CSVCMsg_SplitScreen(const CSVCMsg_SplitScreen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(player_index_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_SplitScreen)
}

void CSVCMsg_SplitScreen::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(player_index_));
}

CSVCMsg_SplitScreen::~CSVCMsg_SplitScreen() {
  // @@protoc_insertion_point(destructor:CSVCMsg_SplitScreen)
  SharedDtor();
}

void CSVCMsg_SplitScreen::SharedDtor() {
}

void CSVCMsg_SplitScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_SplitScreen::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_SplitScreen& CSVCMsg_SplitScreen::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_SplitScreen();
  return *internal_default_instance();
}

CSVCMsg_SplitScreen* CSVCMsg_SplitScreen::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_SplitScreen* n = new CSVCMsg_SplitScreen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_SplitScreen::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_SplitScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(player_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_SplitScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_SplitScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ESplitScreenMessageType_IsValid(value)) {
            set_type(static_cast< ::ESplitScreenMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_player_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_SplitScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_SplitScreen)
  return false;
#undef DO_
}

void CSVCMsg_SplitScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_SplitScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_SplitScreen)
}

::google::protobuf::uint8* CSVCMsg_SplitScreen::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_SplitScreen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_SplitScreen)
  return target;
}

size_t CSVCMsg_SplitScreen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_SplitScreen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .ESplitScreenMessageType type = 1 [default = MSG_SPLITSCREEN_ADDUSER];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 player_index = 3;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_SplitScreen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_SplitScreen)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_SplitScreen* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_SplitScreen>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_SplitScreen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_SplitScreen)
    MergeFrom(*source);
  }
}

void CSVCMsg_SplitScreen::MergeFrom(const CSVCMsg_SplitScreen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_SplitScreen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_index_ = from.player_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_SplitScreen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_SplitScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_SplitScreen::CopyFrom(const CSVCMsg_SplitScreen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_SplitScreen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_SplitScreen::IsInitialized() const {
  return true;
}

void CSVCMsg_SplitScreen::Swap(CSVCMsg_SplitScreen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_SplitScreen::InternalSwap(CSVCMsg_SplitScreen* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(slot_, other->slot_);
  swap(player_index_, other->player_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_SplitScreen::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GetCvarValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GetCvarValue::kCookieFieldNumber;
const int CSVCMsg_GetCvarValue::kCvarNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GetCvarValue::CSVCMsg_GetCvarValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GetCvarValue();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GetCvarValue)
}
CSVCMsg_GetCvarValue::CSVCMsg_GetCvarValue(const CSVCMsg_GetCvarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cvar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cvar_name()) {
    cvar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cvar_name_);
  }
  cookie_ = from.cookie_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GetCvarValue)
}

void CSVCMsg_GetCvarValue::SharedCtor() {
  _cached_size_ = 0;
  cvar_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cookie_ = 0;
}

CSVCMsg_GetCvarValue::~CSVCMsg_GetCvarValue() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GetCvarValue)
  SharedDtor();
}

void CSVCMsg_GetCvarValue::SharedDtor() {
  cvar_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GetCvarValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GetCvarValue::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GetCvarValue& CSVCMsg_GetCvarValue::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GetCvarValue();
  return *internal_default_instance();
}

CSVCMsg_GetCvarValue* CSVCMsg_GetCvarValue::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GetCvarValue* n = new CSVCMsg_GetCvarValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GetCvarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GetCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!cvar_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cvar_name_.UnsafeRawStringPointer())->clear();
  }
  cookie_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GetCvarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GetCvarValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cookie = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cookie();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string cvar_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cvar_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cvar_name().data(), static_cast<int>(this->cvar_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GetCvarValue.cvar_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GetCvarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GetCvarValue)
  return false;
#undef DO_
}

void CSVCMsg_GetCvarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GetCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cookie(), output);
  }

  // optional string cvar_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cvar_name().data(), static_cast<int>(this->cvar_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GetCvarValue.cvar_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->cvar_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GetCvarValue)
}

::google::protobuf::uint8* CSVCMsg_GetCvarValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GetCvarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cookie = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cookie(), target);
  }

  // optional string cvar_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cvar_name().data(), static_cast<int>(this->cvar_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GetCvarValue.cvar_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cvar_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GetCvarValue)
  return target;
}

size_t CSVCMsg_GetCvarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GetCvarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string cvar_name = 2;
    if (has_cvar_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cvar_name());
    }

    // optional int32 cookie = 1;
    if (has_cookie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GetCvarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GetCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GetCvarValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GetCvarValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GetCvarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GetCvarValue)
    MergeFrom(*source);
  }
}

void CSVCMsg_GetCvarValue::MergeFrom(const CSVCMsg_GetCvarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GetCvarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cvar_name();
      cvar_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cvar_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      cookie_ = from.cookie_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GetCvarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GetCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GetCvarValue::CopyFrom(const CSVCMsg_GetCvarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GetCvarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GetCvarValue::IsInitialized() const {
  return true;
}

void CSVCMsg_GetCvarValue::Swap(CSVCMsg_GetCvarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GetCvarValue::InternalSwap(CSVCMsg_GetCvarValue* other) {
  using std::swap;
  cvar_name_.Swap(&other->cvar_name_);
  swap(cookie_, other->cookie_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GetCvarValue::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Menu::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Menu::kDialogTypeFieldNumber;
const int CSVCMsg_Menu::kMenuKeyValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Menu::CSVCMsg_Menu()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Menu();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Menu)
}
CSVCMsg_Menu::CSVCMsg_Menu(const CSVCMsg_Menu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  menu_key_values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_menu_key_values()) {
    menu_key_values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menu_key_values_);
  }
  dialog_type_ = from.dialog_type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Menu)
}

void CSVCMsg_Menu::SharedCtor() {
  _cached_size_ = 0;
  menu_key_values_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dialog_type_ = 0;
}

CSVCMsg_Menu::~CSVCMsg_Menu() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Menu)
  SharedDtor();
}

void CSVCMsg_Menu::SharedDtor() {
  menu_key_values_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Menu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Menu::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Menu& CSVCMsg_Menu::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Menu();
  return *internal_default_instance();
}

CSVCMsg_Menu* CSVCMsg_Menu::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Menu* n = new CSVCMsg_Menu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Menu::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!menu_key_values_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*menu_key_values_.UnsafeRawStringPointer())->clear();
  }
  dialog_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Menu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Menu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dialog_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_dialog_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dialog_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes menu_key_values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_menu_key_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Menu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Menu)
  return false;
#undef DO_
}

void CSVCMsg_Menu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dialog_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dialog_type(), output);
  }

  // optional bytes menu_key_values = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->menu_key_values(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Menu)
}

::google::protobuf::uint8* CSVCMsg_Menu::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Menu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 dialog_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dialog_type(), target);
  }

  // optional bytes menu_key_values = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->menu_key_values(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Menu)
  return target;
}

size_t CSVCMsg_Menu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Menu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes menu_key_values = 2;
    if (has_menu_key_values()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->menu_key_values());
    }

    // optional int32 dialog_type = 1;
    if (has_dialog_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dialog_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Menu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Menu)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Menu* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Menu>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Menu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Menu)
    MergeFrom(*source);
  }
}

void CSVCMsg_Menu::MergeFrom(const CSVCMsg_Menu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Menu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_menu_key_values();
      menu_key_values_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menu_key_values_);
    }
    if (cached_has_bits & 0x00000002u) {
      dialog_type_ = from.dialog_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_Menu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Menu::CopyFrom(const CSVCMsg_Menu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Menu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Menu::IsInitialized() const {
  return true;
}

void CSVCMsg_Menu::Swap(CSVCMsg_Menu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Menu::InternalSwap(CSVCMsg_Menu* other) {
  using std::swap;
  menu_key_values_.Swap(&other->menu_key_values_);
  swap(dialog_type_, other->dialog_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Menu::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_UserMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_UserMessage::kMsgTypeFieldNumber;
const int CSVCMsg_UserMessage::kMsgDataFieldNumber;
const int CSVCMsg_UserMessage::kPassthroughFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_UserMessage::CSVCMsg_UserMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_UserMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_UserMessage)
}
CSVCMsg_UserMessage::CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_data()) {
    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
  ::memcpy(&msg_type_, &from.msg_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&msg_type_)) + sizeof(passthrough_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_UserMessage)
}

void CSVCMsg_UserMessage::SharedCtor() {
  _cached_size_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&msg_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passthrough_) -
      reinterpret_cast<char*>(&msg_type_)) + sizeof(passthrough_));
}

CSVCMsg_UserMessage::~CSVCMsg_UserMessage() {
  // @@protoc_insertion_point(destructor:CSVCMsg_UserMessage)
  SharedDtor();
}

void CSVCMsg_UserMessage::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_UserMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_UserMessage::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_UserMessage& CSVCMsg_UserMessage::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_UserMessage();
  return *internal_default_instance();
}

CSVCMsg_UserMessage* CSVCMsg_UserMessage::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_UserMessage* n = new CSVCMsg_UserMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!msg_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&msg_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passthrough_) -
        reinterpret_cast<char*>(&msg_type_)) + sizeof(passthrough_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_UserMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_UserMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_msg_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes msg_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passthrough = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_passthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_UserMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_UserMessage)
  return false;
#undef DO_
}

void CSVCMsg_UserMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }

  // optional bytes msg_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg_data(), output);
  }

  // optional int32 passthrough = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->passthrough(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_UserMessage)
}

::google::protobuf::uint8* CSVCMsg_UserMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_UserMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }

  // optional bytes msg_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg_data(), target);
  }

  // optional int32 passthrough = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->passthrough(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_UserMessage)
  return target;
}

size_t CSVCMsg_UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_UserMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes msg_data = 2;
    if (has_msg_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg_data());
    }

    // optional int32 msg_type = 1;
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_type());
    }

    // optional int32 passthrough = 3;
    if (has_passthrough()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthrough());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_UserMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_UserMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_UserMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_UserMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_UserMessage)
    MergeFrom(*source);
  }
}

void CSVCMsg_UserMessage::MergeFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      passthrough_ = from.passthrough_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_UserMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_UserMessage::CopyFrom(const CSVCMsg_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_UserMessage::IsInitialized() const {
  return true;
}

void CSVCMsg_UserMessage::Swap(CSVCMsg_UserMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_UserMessage::InternalSwap(CSVCMsg_UserMessage* other) {
  using std::swap;
  msg_data_.Swap(&other->msg_data_);
  swap(msg_type_, other->msg_type_);
  swap(passthrough_, other->passthrough_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_UserMessage::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_PaintmapData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_PaintmapData::kPaintmapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_PaintmapData::CSVCMsg_PaintmapData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_PaintmapData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_PaintmapData)
}
CSVCMsg_PaintmapData::CSVCMsg_PaintmapData(const CSVCMsg_PaintmapData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paintmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paintmap()) {
    paintmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paintmap_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_PaintmapData)
}

void CSVCMsg_PaintmapData::SharedCtor() {
  _cached_size_ = 0;
  paintmap_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_PaintmapData::~CSVCMsg_PaintmapData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_PaintmapData)
  SharedDtor();
}

void CSVCMsg_PaintmapData::SharedDtor() {
  paintmap_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_PaintmapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_PaintmapData::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_PaintmapData& CSVCMsg_PaintmapData::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_PaintmapData();
  return *internal_default_instance();
}

CSVCMsg_PaintmapData* CSVCMsg_PaintmapData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_PaintmapData* n = new CSVCMsg_PaintmapData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_PaintmapData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_PaintmapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!paintmap_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*paintmap_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_PaintmapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_PaintmapData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes paintmap = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_paintmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_PaintmapData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_PaintmapData)
  return false;
#undef DO_
}

void CSVCMsg_PaintmapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_PaintmapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes paintmap = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->paintmap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_PaintmapData)
}

::google::protobuf::uint8* CSVCMsg_PaintmapData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_PaintmapData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes paintmap = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->paintmap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_PaintmapData)
  return target;
}

size_t CSVCMsg_PaintmapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_PaintmapData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes paintmap = 1;
  if (has_paintmap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->paintmap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_PaintmapData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_PaintmapData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_PaintmapData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_PaintmapData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_PaintmapData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_PaintmapData)
    MergeFrom(*source);
  }
}

void CSVCMsg_PaintmapData::MergeFrom(const CSVCMsg_PaintmapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_PaintmapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paintmap()) {
    set_has_paintmap();
    paintmap_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paintmap_);
  }
}

void CSVCMsg_PaintmapData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_PaintmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_PaintmapData::CopyFrom(const CSVCMsg_PaintmapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_PaintmapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_PaintmapData::IsInitialized() const {
  return true;
}

void CSVCMsg_PaintmapData::Swap(CSVCMsg_PaintmapData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_PaintmapData::InternalSwap(CSVCMsg_PaintmapData* other) {
  using std::swap;
  paintmap_.Swap(&other->paintmap_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_PaintmapData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GameEvent_key_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEvent_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValStringFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValFloatFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValLongFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValShortFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValByteFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValBoolFieldNumber;
const int CSVCMsg_GameEvent_key_t::kValUint64FieldNumber;
const int CSVCMsg_GameEvent_key_t::kValWstringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEvent_key_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent.key_t)
}
CSVCMsg_GameEvent_key_t::CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_string()) {
    val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
  }
  val_wstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_wstring()) {
    val_wstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_wstring_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent.key_t)
}

void CSVCMsg_GameEvent_key_t::SharedCtor() {
  _cached_size_ = 0;
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_wstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_uint64_) -
      reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
}

CSVCMsg_GameEvent_key_t::~CSVCMsg_GameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent.key_t)
  SharedDtor();
}

void CSVCMsg_GameEvent_key_t::SharedDtor() {
  val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_wstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent_key_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent_key_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEvent_key_t();
  return *internal_default_instance();
}

CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent_key_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEvent_key_t* n = new CSVCMsg_GameEvent_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!val_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!val_wstring_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_wstring_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_bool_) -
        reinterpret_cast<char*>(&type_)) + sizeof(val_bool_));
  }
  val_uint64_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEvent_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), static_cast<int>(this->val_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEvent.key_t.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_val_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_long = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_val_long();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_long_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_short = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_val_short();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_short_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_byte = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_val_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool val_bool = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_val_bool();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &val_bool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 val_uint64 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_val_uint64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &val_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes val_wstring = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val_wstring()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent.key_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), static_cast<int>(this->val_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val_string(), output);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_float(), output);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->val_long(), output);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->val_short(), output);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->val_byte(), output);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->val_bool(), output);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->val_uint64(), output);
  }

  // optional bytes val_wstring = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->val_wstring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent.key_t)
}

::google::protobuf::uint8* CSVCMsg_GameEvent_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), static_cast<int>(this->val_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.key_t.val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->val_uint64(), target);
  }

  // optional bytes val_wstring = 9;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->val_wstring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent.key_t)
  return target;
}

size_t CSVCMsg_GameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

    // optional bytes val_wstring = 9;
    if (has_val_wstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val_wstring());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional float val_float = 3;
    if (has_val_float()) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (has_val_long()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_long());
    }

    // optional int32 val_short = 5;
    if (has_val_short()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_short());
    }

    // optional int32 val_byte = 6;
    if (has_val_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_byte());
    }

    // optional bool val_bool = 7;
    if (has_val_bool()) {
      total_size += 1 + 1;
    }

  }
  // optional uint64 val_uint64 = 8;
  if (has_val_uint64()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->val_uint64());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEvent_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent.key_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent_key_t::MergeFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_val_string();
      val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_val_wstring();
      val_wstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_wstring_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_float_ = from.val_float_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_long_ = from.val_long_;
    }
    if (cached_has_bits & 0x00000020u) {
      val_short_ = from.val_short_;
    }
    if (cached_has_bits & 0x00000040u) {
      val_byte_ = from.val_byte_;
    }
    if (cached_has_bits & 0x00000080u) {
      val_bool_ = from.val_bool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_val_uint64(from.val_uint64());
  }
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent_key_t::CopyFrom(const CSVCMsg_GameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent_key_t::Swap(CSVCMsg_GameEvent_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEvent_key_t::InternalSwap(CSVCMsg_GameEvent_key_t* other) {
  using std::swap;
  val_string_.Swap(&other->val_string_);
  val_wstring_.Swap(&other->val_wstring_);
  swap(type_, other->type_);
  swap(val_float_, other->val_float_);
  swap(val_long_, other->val_long_);
  swap(val_short_, other->val_short_);
  swap(val_byte_, other->val_byte_);
  swap(val_bool_, other->val_bool_);
  swap(val_uint64_, other->val_uint64_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEvent_key_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GameEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEvent::kEventNameFieldNumber;
const int CSVCMsg_GameEvent::kEventidFieldNumber;
const int CSVCMsg_GameEvent::kKeysFieldNumber;
const int CSVCMsg_GameEvent::kPassthroughFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEvent::CSVCMsg_GameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEvent)
}
CSVCMsg_GameEvent::CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  ::memcpy(&eventid_, &from.eventid_,
    static_cast<size_t>(reinterpret_cast<char*>(&passthrough_) -
    reinterpret_cast<char*>(&eventid_)) + sizeof(passthrough_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEvent)
}

void CSVCMsg_GameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&eventid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passthrough_) -
      reinterpret_cast<char*>(&eventid_)) + sizeof(passthrough_));
}

CSVCMsg_GameEvent::~CSVCMsg_GameEvent() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEvent)
  SharedDtor();
}

void CSVCMsg_GameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEvent::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GameEvent& CSVCMsg_GameEvent::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEvent();
  return *internal_default_instance();
}

CSVCMsg_GameEvent* CSVCMsg_GameEvent::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEvent* n = new CSVCMsg_GameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*event_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&eventid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&passthrough_) -
        reinterpret_cast<char*>(&eventid_)) + sizeof(passthrough_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eventid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_GameEvent.key_t keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 passthrough = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_passthrough();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passthrough_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEvent)
  return false;
#undef DO_
}

void CSVCMsg_GameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->eventid(), output);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(static_cast<int>(i)), output);
  }

  // optional int32 passthrough = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->passthrough(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEvent)
}

::google::protobuf::uint8* CSVCMsg_GameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->eventid(), target);
  }

  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keys(static_cast<int>(i)), deterministic, target);
  }

  // optional int32 passthrough = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->passthrough(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEvent)
  return target;
}

size_t CSVCMsg_GameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional int32 eventid = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

    // optional int32 passthrough = 4;
    if (has_passthrough()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passthrough());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEvent)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEvent::MergeFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    if (cached_has_bits & 0x00000004u) {
      passthrough_ = from.passthrough_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEvent::CopyFrom(const CSVCMsg_GameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEvent::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEvent::Swap(CSVCMsg_GameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEvent::InternalSwap(CSVCMsg_GameEvent* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  event_name_.Swap(&other->event_name_);
  swap(eventid_, other->eventid_);
  swap(passthrough_, other->passthrough_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEvent::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GameEventList_key_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList_key_t::kTypeFieldNumber;
const int CSVCMsg_GameEventList_key_t::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList_key_t::CSVCMsg_GameEventList_key_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_key_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList.key_t)
}
CSVCMsg_GameEventList_key_t::CSVCMsg_GameEventList_key_t(const CSVCMsg_GameEventList_key_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList.key_t)
}

void CSVCMsg_GameEventList_key_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CSVCMsg_GameEventList_key_t::~CSVCMsg_GameEventList_key_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList.key_t)
  SharedDtor();
}

void CSVCMsg_GameEventList_key_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEventList_key_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList_key_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GameEventList_key_t& CSVCMsg_GameEventList_key_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_key_t();
  return *internal_default_instance();
}

CSVCMsg_GameEventList_key_t* CSVCMsg_GameEventList_key_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList_key_t* n = new CSVCMsg_GameEventList_key_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList_key_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList.key_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEventList.key_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList.key_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList.key_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList_key_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.key_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList.key_t)
}

::google::protobuf::uint8* CSVCMsg_GameEventList_key_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList.key_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.key_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList.key_t)
  return target;
}

size_t CSVCMsg_GameEventList_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList.key_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList_key_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList_key_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList_key_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList.key_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList.key_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList_key_t::MergeFrom(const CSVCMsg_GameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameEventList_key_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList_key_t::CopyFrom(const CSVCMsg_GameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList_key_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList_key_t::Swap(CSVCMsg_GameEventList_key_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList_key_t::InternalSwap(CSVCMsg_GameEventList_key_t* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList_key_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GameEventList_descriptor_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList_descriptor_t::kEventidFieldNumber;
const int CSVCMsg_GameEventList_descriptor_t::kNameFieldNumber;
const int CSVCMsg_GameEventList_descriptor_t::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList_descriptor_t::CSVCMsg_GameEventList_descriptor_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_descriptor_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList.descriptor_t)
}
CSVCMsg_GameEventList_descriptor_t::CSVCMsg_GameEventList_descriptor_t(const CSVCMsg_GameEventList_descriptor_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList.descriptor_t)
}

void CSVCMsg_GameEventList_descriptor_t::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eventid_ = 0;
}

CSVCMsg_GameEventList_descriptor_t::~CSVCMsg_GameEventList_descriptor_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList.descriptor_t)
  SharedDtor();
}

void CSVCMsg_GameEventList_descriptor_t::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_GameEventList_descriptor_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList_descriptor_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GameEventList_descriptor_t& CSVCMsg_GameEventList_descriptor_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList_descriptor_t();
  return *internal_default_instance();
}

CSVCMsg_GameEventList_descriptor_t* CSVCMsg_GameEventList_descriptor_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList_descriptor_t* n = new CSVCMsg_GameEventList_descriptor_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList_descriptor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList.descriptor_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList_descriptor_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList.descriptor_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 eventid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_eventid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_GameEventList.descriptor_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_GameEventList.key_t keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList.descriptor_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList.descriptor_t)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList_descriptor_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList.descriptor_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.descriptor_t.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList.descriptor_t)
}

::google::protobuf::uint8* CSVCMsg_GameEventList_descriptor_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList.descriptor_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_GameEventList.descriptor_t.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keys(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList.descriptor_t)
  return target;
}

size_t CSVCMsg_GameEventList_descriptor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList.descriptor_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_GameEventList.key_t keys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 eventid = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eventid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList_descriptor_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList_descriptor_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList_descriptor_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList.descriptor_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList.descriptor_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList_descriptor_t::MergeFrom(const CSVCMsg_GameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_GameEventList_descriptor_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList_descriptor_t::CopyFrom(const CSVCMsg_GameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList_descriptor_t::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList_descriptor_t::Swap(CSVCMsg_GameEventList_descriptor_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList_descriptor_t::InternalSwap(CSVCMsg_GameEventList_descriptor_t* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  name_.Swap(&other->name_);
  swap(eventid_, other->eventid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList_descriptor_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_GameEventList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_GameEventList::kDescriptorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_GameEventList::CSVCMsg_GameEventList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_GameEventList)
}
CSVCMsg_GameEventList::CSVCMsg_GameEventList(const CSVCMsg_GameEventList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_GameEventList)
}

void CSVCMsg_GameEventList::SharedCtor() {
  _cached_size_ = 0;
}

CSVCMsg_GameEventList::~CSVCMsg_GameEventList() {
  // @@protoc_insertion_point(destructor:CSVCMsg_GameEventList)
  SharedDtor();
}

void CSVCMsg_GameEventList::SharedDtor() {
}

void CSVCMsg_GameEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_GameEventList::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_GameEventList& CSVCMsg_GameEventList::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_GameEventList();
  return *internal_default_instance();
}

CSVCMsg_GameEventList* CSVCMsg_GameEventList::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_GameEventList* n = new CSVCMsg_GameEventList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_GameEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_GameEventList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_GameEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_GameEventList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_descriptors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_GameEventList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_GameEventList)
  return false;
#undef DO_
}

void CSVCMsg_GameEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_GameEventList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descriptors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->descriptors(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_GameEventList)
}

::google::protobuf::uint8* CSVCMsg_GameEventList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_GameEventList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->descriptors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->descriptors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_GameEventList)
  return target;
}

size_t CSVCMsg_GameEventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_GameEventList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_GameEventList.descriptor_t descriptors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->descriptors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->descriptors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_GameEventList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_GameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_GameEventList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_GameEventList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_GameEventList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_GameEventList)
    MergeFrom(*source);
  }
}

void CSVCMsg_GameEventList::MergeFrom(const CSVCMsg_GameEventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_GameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_.MergeFrom(from.descriptors_);
}

void CSVCMsg_GameEventList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_GameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_GameEventList::CopyFrom(const CSVCMsg_GameEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_GameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_GameEventList::IsInitialized() const {
  return true;
}

void CSVCMsg_GameEventList::Swap(CSVCMsg_GameEventList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_GameEventList::InternalSwap(CSVCMsg_GameEventList* other) {
  using std::swap;
  descriptors_.InternalSwap(&other->descriptors_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_GameEventList::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_TempEntities::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_TempEntities::kReliableFieldNumber;
const int CSVCMsg_TempEntities::kNumEntriesFieldNumber;
const int CSVCMsg_TempEntities::kEntityDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_TempEntities::CSVCMsg_TempEntities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_TempEntities();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_TempEntities)
}
CSVCMsg_TempEntities::CSVCMsg_TempEntities(const CSVCMsg_TempEntities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_data()) {
    entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
  }
  ::memcpy(&reliable_, &from.reliable_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_entries_) -
    reinterpret_cast<char*>(&reliable_)) + sizeof(num_entries_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_TempEntities)
}

void CSVCMsg_TempEntities::SharedCtor() {
  _cached_size_ = 0;
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reliable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_entries_) -
      reinterpret_cast<char*>(&reliable_)) + sizeof(num_entries_));
}

CSVCMsg_TempEntities::~CSVCMsg_TempEntities() {
  // @@protoc_insertion_point(destructor:CSVCMsg_TempEntities)
  SharedDtor();
}

void CSVCMsg_TempEntities::SharedDtor() {
  entity_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_TempEntities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_TempEntities::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_TempEntities& CSVCMsg_TempEntities::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_TempEntities();
  return *internal_default_instance();
}

CSVCMsg_TempEntities* CSVCMsg_TempEntities::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_TempEntities* n = new CSVCMsg_TempEntities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_TempEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_TempEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!entity_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*entity_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&reliable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_entries_) -
        reinterpret_cast<char*>(&reliable_)) + sizeof(num_entries_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_TempEntities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_TempEntities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reliable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_num_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes entity_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_TempEntities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_TempEntities)
  return false;
#undef DO_
}

void CSVCMsg_TempEntities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_TempEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable(), output);
  }

  // optional int32 num_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_entries(), output);
  }

  // optional bytes entity_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->entity_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_TempEntities)
}

::google::protobuf::uint8* CSVCMsg_TempEntities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_TempEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable(), target);
  }

  // optional int32 num_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_entries(), target);
  }

  // optional bytes entity_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->entity_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_TempEntities)
  return target;
}

size_t CSVCMsg_TempEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_TempEntities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes entity_data = 3;
    if (has_entity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_data());
    }

    // optional bool reliable = 1;
    if (has_reliable()) {
      total_size += 1 + 1;
    }

    // optional int32 num_entries = 2;
    if (has_num_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_entries());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_TempEntities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_TempEntities)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_TempEntities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_TempEntities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_TempEntities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_TempEntities)
    MergeFrom(*source);
  }
}

void CSVCMsg_TempEntities::MergeFrom(const CSVCMsg_TempEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_TempEntities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_entity_data();
      entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      reliable_ = from.reliable_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_entries_ = from.num_entries_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_TempEntities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_TempEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_TempEntities::CopyFrom(const CSVCMsg_TempEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_TempEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_TempEntities::IsInitialized() const {
  return true;
}

void CSVCMsg_TempEntities::Swap(CSVCMsg_TempEntities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_TempEntities::InternalSwap(CSVCMsg_TempEntities* other) {
  using std::swap;
  entity_data_.Swap(&other->entity_data_);
  swap(reliable_, other->reliable_);
  swap(num_entries_, other->num_entries_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_TempEntities::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_PacketEntities::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_PacketEntities::kMaxEntriesFieldNumber;
const int CSVCMsg_PacketEntities::kUpdatedEntriesFieldNumber;
const int CSVCMsg_PacketEntities::kIsDeltaFieldNumber;
const int CSVCMsg_PacketEntities::kUpdateBaselineFieldNumber;
const int CSVCMsg_PacketEntities::kBaselineFieldNumber;
const int CSVCMsg_PacketEntities::kDeltaFromFieldNumber;
const int CSVCMsg_PacketEntities::kEntityDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_PacketEntities::CSVCMsg_PacketEntities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_PacketEntities();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_PacketEntities)
}
CSVCMsg_PacketEntities::CSVCMsg_PacketEntities(const CSVCMsg_PacketEntities& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_data()) {
    entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
  }
  ::memcpy(&max_entries_, &from.max_entries_,
    static_cast<size_t>(reinterpret_cast<char*>(&delta_from_) -
    reinterpret_cast<char*>(&max_entries_)) + sizeof(delta_from_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_PacketEntities)
}

void CSVCMsg_PacketEntities::SharedCtor() {
  _cached_size_ = 0;
  entity_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_entries_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delta_from_) -
      reinterpret_cast<char*>(&max_entries_)) + sizeof(delta_from_));
}

CSVCMsg_PacketEntities::~CSVCMsg_PacketEntities() {
  // @@protoc_insertion_point(destructor:CSVCMsg_PacketEntities)
  SharedDtor();
}

void CSVCMsg_PacketEntities::SharedDtor() {
  entity_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_PacketEntities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_PacketEntities::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_PacketEntities& CSVCMsg_PacketEntities::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_PacketEntities();
  return *internal_default_instance();
}

CSVCMsg_PacketEntities* CSVCMsg_PacketEntities::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_PacketEntities* n = new CSVCMsg_PacketEntities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_PacketEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_PacketEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!entity_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*entity_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&max_entries_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delta_from_) -
        reinterpret_cast<char*>(&max_entries_)) + sizeof(delta_from_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_PacketEntities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_PacketEntities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_max_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 updated_entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_updated_entries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updated_entries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_delta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_delta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_delta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool update_baseline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_update_baseline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &update_baseline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 baseline = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_baseline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baseline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 delta_from = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_delta_from();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delta_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes entity_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_PacketEntities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_PacketEntities)
  return false;
#undef DO_
}

void CSVCMsg_PacketEntities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_PacketEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_entries = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_entries(), output);
  }

  // optional int32 updated_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updated_entries(), output);
  }

  // optional bool is_delta = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_delta(), output);
  }

  // optional bool update_baseline = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->update_baseline(), output);
  }

  // optional int32 baseline = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->baseline(), output);
  }

  // optional int32 delta_from = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delta_from(), output);
  }

  // optional bytes entity_data = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->entity_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_PacketEntities)
}

::google::protobuf::uint8* CSVCMsg_PacketEntities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_PacketEntities)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_entries = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_entries(), target);
  }

  // optional int32 updated_entries = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->updated_entries(), target);
  }

  // optional bool is_delta = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_delta(), target);
  }

  // optional bool update_baseline = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->update_baseline(), target);
  }

  // optional int32 baseline = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->baseline(), target);
  }

  // optional int32 delta_from = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delta_from(), target);
  }

  // optional bytes entity_data = 7;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->entity_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_PacketEntities)
  return target;
}

size_t CSVCMsg_PacketEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_PacketEntities)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes entity_data = 7;
    if (has_entity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_data());
    }

    // optional int32 max_entries = 1;
    if (has_max_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_entries());
    }

    // optional int32 updated_entries = 2;
    if (has_updated_entries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updated_entries());
    }

    // optional bool is_delta = 3;
    if (has_is_delta()) {
      total_size += 1 + 1;
    }

    // optional bool update_baseline = 4;
    if (has_update_baseline()) {
      total_size += 1 + 1;
    }

    // optional int32 baseline = 5;
    if (has_baseline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baseline());
    }

    // optional int32 delta_from = 6;
    if (has_delta_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delta_from());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_PacketEntities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_PacketEntities)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_PacketEntities* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_PacketEntities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_PacketEntities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_PacketEntities)
    MergeFrom(*source);
  }
}

void CSVCMsg_PacketEntities::MergeFrom(const CSVCMsg_PacketEntities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_PacketEntities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_entity_data();
      entity_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      max_entries_ = from.max_entries_;
    }
    if (cached_has_bits & 0x00000004u) {
      updated_entries_ = from.updated_entries_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_delta_ = from.is_delta_;
    }
    if (cached_has_bits & 0x00000010u) {
      update_baseline_ = from.update_baseline_;
    }
    if (cached_has_bits & 0x00000020u) {
      baseline_ = from.baseline_;
    }
    if (cached_has_bits & 0x00000040u) {
      delta_from_ = from.delta_from_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_PacketEntities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_PacketEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_PacketEntities::CopyFrom(const CSVCMsg_PacketEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_PacketEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_PacketEntities::IsInitialized() const {
  return true;
}

void CSVCMsg_PacketEntities::Swap(CSVCMsg_PacketEntities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_PacketEntities::InternalSwap(CSVCMsg_PacketEntities* other) {
  using std::swap;
  entity_data_.Swap(&other->entity_data_);
  swap(max_entries_, other->max_entries_);
  swap(updated_entries_, other->updated_entries_);
  swap(is_delta_, other->is_delta_);
  swap(update_baseline_, other->update_baseline_);
  swap(baseline_, other->baseline_);
  swap(delta_from_, other->delta_from_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_PacketEntities::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Sounds_sounddata_t::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Sounds_sounddata_t::kOriginXFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kOriginYFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kOriginZFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kVolumeFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kDelayValueFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSequenceNumberFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kEntityIndexFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kChannelFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kPitchFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kFlagsFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundNumFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundNumHandleFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSpeakerEntityFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kRandomSeedFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kSoundLevelFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kIsSentenceFieldNumber;
const int CSVCMsg_Sounds_sounddata_t::kIsAmbientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Sounds_sounddata_t::CSVCMsg_Sounds_sounddata_t()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Sounds_sounddata_t();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Sounds.sounddata_t)
}
CSVCMsg_Sounds_sounddata_t::CSVCMsg_Sounds_sounddata_t(const CSVCMsg_Sounds_sounddata_t& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_x_, &from.origin_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ambient_) -
    reinterpret_cast<char*>(&origin_x_)) + sizeof(is_ambient_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Sounds.sounddata_t)
}

void CSVCMsg_Sounds_sounddata_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&origin_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ambient_) -
      reinterpret_cast<char*>(&origin_x_)) + sizeof(is_ambient_));
}

CSVCMsg_Sounds_sounddata_t::~CSVCMsg_Sounds_sounddata_t() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Sounds.sounddata_t)
  SharedDtor();
}

void CSVCMsg_Sounds_sounddata_t::SharedDtor() {
}

void CSVCMsg_Sounds_sounddata_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Sounds_sounddata_t::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Sounds_sounddata_t& CSVCMsg_Sounds_sounddata_t::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Sounds_sounddata_t();
  return *internal_default_instance();
}

CSVCMsg_Sounds_sounddata_t* CSVCMsg_Sounds_sounddata_t::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Sounds_sounddata_t* n = new CSVCMsg_Sounds_sounddata_t;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Sounds_sounddata_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Sounds.sounddata_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&origin_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&origin_x_)) + sizeof(channel_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&pitch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_sentence_) -
        reinterpret_cast<char*>(&pitch_)) + sizeof(is_sentence_));
  }
  is_ambient_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Sounds_sounddata_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Sounds.sounddata_t)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 origin_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_origin_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 origin_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_origin_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 origin_z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_origin_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &origin_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 volume = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_volume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delay_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_delay_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sequence_number = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_entity_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pitch = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_pitch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sound_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_sound_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sound_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 sound_num_handle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_sound_num_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &sound_num_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 speaker_entity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_speaker_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speaker_entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 random_seed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_random_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sound_level = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_sound_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_sentence = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_is_sentence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sentence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ambient = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u /* 136 & 0xFF */)) {
          set_has_is_ambient();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ambient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Sounds.sounddata_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Sounds.sounddata_t)
  return false;
#undef DO_
}

void CSVCMsg_Sounds_sounddata_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Sounds.sounddata_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 origin_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->origin_x(), output);
  }

  // optional sint32 origin_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->origin_y(), output);
  }

  // optional sint32 origin_z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->origin_z(), output);
  }

  // optional uint32 volume = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->volume(), output);
  }

  // optional float delay_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->delay_value(), output);
  }

  // optional int32 sequence_number = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sequence_number(), output);
  }

  // optional int32 entity_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->entity_index(), output);
  }

  // optional int32 channel = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->channel(), output);
  }

  // optional int32 pitch = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pitch(), output);
  }

  // optional int32 flags = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->flags(), output);
  }

  // optional uint32 sound_num = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sound_num(), output);
  }

  // optional fixed32 sound_num_handle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->sound_num_handle(), output);
  }

  // optional int32 speaker_entity = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->speaker_entity(), output);
  }

  // optional int32 random_seed = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->random_seed(), output);
  }

  // optional int32 sound_level = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sound_level(), output);
  }

  // optional bool is_sentence = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->is_sentence(), output);
  }

  // optional bool is_ambient = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_ambient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Sounds.sounddata_t)
}

::google::protobuf::uint8* CSVCMsg_Sounds_sounddata_t::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Sounds.sounddata_t)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional sint32 origin_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->origin_x(), target);
  }

  // optional sint32 origin_y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->origin_y(), target);
  }

  // optional sint32 origin_z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->origin_z(), target);
  }

  // optional uint32 volume = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->volume(), target);
  }

  // optional float delay_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->delay_value(), target);
  }

  // optional int32 sequence_number = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sequence_number(), target);
  }

  // optional int32 entity_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->entity_index(), target);
  }

  // optional int32 channel = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->channel(), target);
  }

  // optional int32 pitch = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pitch(), target);
  }

  // optional int32 flags = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->flags(), target);
  }

  // optional uint32 sound_num = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sound_num(), target);
  }

  // optional fixed32 sound_num_handle = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->sound_num_handle(), target);
  }

  // optional int32 speaker_entity = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->speaker_entity(), target);
  }

  // optional int32 random_seed = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->random_seed(), target);
  }

  // optional int32 sound_level = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sound_level(), target);
  }

  // optional bool is_sentence = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->is_sentence(), target);
  }

  // optional bool is_ambient = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_ambient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Sounds.sounddata_t)
  return target;
}

size_t CSVCMsg_Sounds_sounddata_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Sounds.sounddata_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional sint32 origin_x = 1;
    if (has_origin_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_x());
    }

    // optional sint32 origin_y = 2;
    if (has_origin_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_y());
    }

    // optional sint32 origin_z = 3;
    if (has_origin_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->origin_z());
    }

    // optional uint32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->volume());
    }

    // optional float delay_value = 5;
    if (has_delay_value()) {
      total_size += 1 + 4;
    }

    // optional int32 sequence_number = 6;
    if (has_sequence_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_number());
    }

    // optional int32 entity_index = 7;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

    // optional int32 channel = 8;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 pitch = 9;
    if (has_pitch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pitch());
    }

    // optional int32 flags = 10;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

    // optional uint32 sound_num = 11;
    if (has_sound_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sound_num());
    }

    // optional fixed32 sound_num_handle = 12;
    if (has_sound_num_handle()) {
      total_size += 1 + 4;
    }

    // optional int32 speaker_entity = 13;
    if (has_speaker_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speaker_entity());
    }

    // optional int32 random_seed = 14;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_seed());
    }

    // optional int32 sound_level = 15;
    if (has_sound_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_level());
    }

    // optional bool is_sentence = 16;
    if (has_is_sentence()) {
      total_size += 2 + 1;
    }

  }
  // optional bool is_ambient = 17;
  if (has_is_ambient()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Sounds_sounddata_t::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Sounds.sounddata_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Sounds_sounddata_t* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Sounds_sounddata_t>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Sounds.sounddata_t)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Sounds.sounddata_t)
    MergeFrom(*source);
  }
}

void CSVCMsg_Sounds_sounddata_t::MergeFrom(const CSVCMsg_Sounds_sounddata_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Sounds.sounddata_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      origin_x_ = from.origin_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      origin_z_ = from.origin_z_;
    }
    if (cached_has_bits & 0x00000008u) {
      volume_ = from.volume_;
    }
    if (cached_has_bits & 0x00000010u) {
      delay_value_ = from.delay_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      entity_index_ = from.entity_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      pitch_ = from.pitch_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      sound_num_ = from.sound_num_;
    }
    if (cached_has_bits & 0x00000800u) {
      sound_num_handle_ = from.sound_num_handle_;
    }
    if (cached_has_bits & 0x00001000u) {
      speaker_entity_ = from.speaker_entity_;
    }
    if (cached_has_bits & 0x00002000u) {
      random_seed_ = from.random_seed_;
    }
    if (cached_has_bits & 0x00004000u) {
      sound_level_ = from.sound_level_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_sentence_ = from.is_sentence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_is_ambient(from.is_ambient());
  }
}

void CSVCMsg_Sounds_sounddata_t::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Sounds.sounddata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Sounds_sounddata_t::CopyFrom(const CSVCMsg_Sounds_sounddata_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Sounds.sounddata_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Sounds_sounddata_t::IsInitialized() const {
  return true;
}

void CSVCMsg_Sounds_sounddata_t::Swap(CSVCMsg_Sounds_sounddata_t* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Sounds_sounddata_t::InternalSwap(CSVCMsg_Sounds_sounddata_t* other) {
  using std::swap;
  swap(origin_x_, other->origin_x_);
  swap(origin_y_, other->origin_y_);
  swap(origin_z_, other->origin_z_);
  swap(volume_, other->volume_);
  swap(delay_value_, other->delay_value_);
  swap(sequence_number_, other->sequence_number_);
  swap(entity_index_, other->entity_index_);
  swap(channel_, other->channel_);
  swap(pitch_, other->pitch_);
  swap(flags_, other->flags_);
  swap(sound_num_, other->sound_num_);
  swap(sound_num_handle_, other->sound_num_handle_);
  swap(speaker_entity_, other->speaker_entity_);
  swap(random_seed_, other->random_seed_);
  swap(sound_level_, other->sound_level_);
  swap(is_sentence_, other->is_sentence_);
  swap(is_ambient_, other->is_ambient_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Sounds_sounddata_t::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Sounds::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Sounds::kReliableSoundFieldNumber;
const int CSVCMsg_Sounds::kSoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Sounds::CSVCMsg_Sounds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Sounds();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Sounds)
}
CSVCMsg_Sounds::CSVCMsg_Sounds(const CSVCMsg_Sounds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      sounds_(from.sounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reliable_sound_ = from.reliable_sound_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Sounds)
}

void CSVCMsg_Sounds::SharedCtor() {
  _cached_size_ = 0;
  reliable_sound_ = false;
}

CSVCMsg_Sounds::~CSVCMsg_Sounds() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Sounds)
  SharedDtor();
}

void CSVCMsg_Sounds::SharedDtor() {
}

void CSVCMsg_Sounds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Sounds::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Sounds& CSVCMsg_Sounds::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Sounds();
  return *internal_default_instance();
}

CSVCMsg_Sounds* CSVCMsg_Sounds::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Sounds* n = new CSVCMsg_Sounds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Sounds::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Sounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sounds_.Clear();
  reliable_sound_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Sounds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Sounds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reliable_sound = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_reliable_sound();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reliable_sound_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Sounds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Sounds)
  return false;
#undef DO_
}

void CSVCMsg_Sounds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Sounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_sound = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reliable_sound(), output);
  }

  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sounds_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sounds(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Sounds)
}

::google::protobuf::uint8* CSVCMsg_Sounds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Sounds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool reliable_sound = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reliable_sound(), target);
  }

  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sounds_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sounds(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Sounds)
  return target;
}

size_t CSVCMsg_Sounds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Sounds)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .CSVCMsg_Sounds.sounddata_t sounds = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sounds_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sounds(static_cast<int>(i)));
    }
  }

  // optional bool reliable_sound = 1;
  if (has_reliable_sound()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Sounds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Sounds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Sounds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Sounds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Sounds)
    MergeFrom(*source);
  }
}

void CSVCMsg_Sounds::MergeFrom(const CSVCMsg_Sounds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Sounds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sounds_.MergeFrom(from.sounds_);
  if (from.has_reliable_sound()) {
    set_reliable_sound(from.reliable_sound());
  }
}

void CSVCMsg_Sounds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Sounds::CopyFrom(const CSVCMsg_Sounds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Sounds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Sounds::IsInitialized() const {
  return true;
}

void CSVCMsg_Sounds::Swap(CSVCMsg_Sounds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Sounds::InternalSwap(CSVCMsg_Sounds* other) {
  using std::swap;
  sounds_.InternalSwap(&other->sounds_);
  swap(reliable_sound_, other->reliable_sound_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Sounds::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_EntityMsg::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_EntityMsg::kEntIndexFieldNumber;
const int CSVCMsg_EntityMsg::kClassIdFieldNumber;
const int CSVCMsg_EntityMsg::kEntDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_EntityMsg::CSVCMsg_EntityMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_EntityMsg();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_EntityMsg)
}
CSVCMsg_EntityMsg::CSVCMsg_EntityMsg(const CSVCMsg_EntityMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ent_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ent_data()) {
    ent_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ent_data_);
  }
  ::memcpy(&ent_index_, &from.ent_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&class_id_) -
    reinterpret_cast<char*>(&ent_index_)) + sizeof(class_id_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_EntityMsg)
}

void CSVCMsg_EntityMsg::SharedCtor() {
  _cached_size_ = 0;
  ent_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ent_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class_id_) -
      reinterpret_cast<char*>(&ent_index_)) + sizeof(class_id_));
}

CSVCMsg_EntityMsg::~CSVCMsg_EntityMsg() {
  // @@protoc_insertion_point(destructor:CSVCMsg_EntityMsg)
  SharedDtor();
}

void CSVCMsg_EntityMsg::SharedDtor() {
  ent_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_EntityMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_EntityMsg::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_EntityMsg& CSVCMsg_EntityMsg::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_EntityMsg();
  return *internal_default_instance();
}

CSVCMsg_EntityMsg* CSVCMsg_EntityMsg::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_EntityMsg* n = new CSVCMsg_EntityMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_EntityMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_EntityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!ent_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*ent_data_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ent_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&class_id_) -
        reinterpret_cast<char*>(&ent_index_)) + sizeof(class_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_EntityMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_EntityMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ent_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ent_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_EntityMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_EntityMsg)
  return false;
#undef DO_
}

void CSVCMsg_EntityMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_EntityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ent_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_index(), output);
  }

  // optional int32 class_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->class_id(), output);
  }

  // optional bytes ent_data = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->ent_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_EntityMsg)
}

::google::protobuf::uint8* CSVCMsg_EntityMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_EntityMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ent_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_index(), target);
  }

  // optional int32 class_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->class_id(), target);
  }

  // optional bytes ent_data = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ent_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_EntityMsg)
  return target;
}

size_t CSVCMsg_EntityMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_EntityMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes ent_data = 3;
    if (has_ent_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ent_data());
    }

    // optional int32 ent_index = 1;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

    // optional int32 class_id = 2;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_EntityMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_EntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_EntityMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_EntityMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_EntityMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_EntityMsg)
    MergeFrom(*source);
  }
}

void CSVCMsg_EntityMsg::MergeFrom(const CSVCMsg_EntityMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_EntityMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ent_data();
      ent_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ent_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      ent_index_ = from.ent_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      class_id_ = from.class_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_EntityMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_EntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_EntityMsg::CopyFrom(const CSVCMsg_EntityMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_EntityMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_EntityMsg::IsInitialized() const {
  return true;
}

void CSVCMsg_EntityMsg::Swap(CSVCMsg_EntityMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_EntityMsg::InternalSwap(CSVCMsg_EntityMsg* other) {
  using std::swap;
  ent_data_.Swap(&other->ent_data_);
  swap(ent_index_, other->ent_index_);
  swap(class_id_, other->class_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_EntityMsg::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_CmdKeyValues::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_CmdKeyValues::kKeyvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_CmdKeyValues::CSVCMsg_CmdKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CmdKeyValues();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_CmdKeyValues)
}
CSVCMsg_CmdKeyValues::CSVCMsg_CmdKeyValues(const CSVCMsg_CmdKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyvalues()) {
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_CmdKeyValues)
}

void CSVCMsg_CmdKeyValues::SharedCtor() {
  _cached_size_ = 0;
  keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_CmdKeyValues::~CSVCMsg_CmdKeyValues() {
  // @@protoc_insertion_point(destructor:CSVCMsg_CmdKeyValues)
  SharedDtor();
}

void CSVCMsg_CmdKeyValues::SharedDtor() {
  keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_CmdKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_CmdKeyValues::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_CmdKeyValues& CSVCMsg_CmdKeyValues::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_CmdKeyValues();
  return *internal_default_instance();
}

CSVCMsg_CmdKeyValues* CSVCMsg_CmdKeyValues::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_CmdKeyValues* n = new CSVCMsg_CmdKeyValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_CmdKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!keyvalues_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*keyvalues_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_CmdKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_CmdKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes keyvalues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_CmdKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_CmdKeyValues)
  return false;
#undef DO_
}

void CSVCMsg_CmdKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->keyvalues(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_CmdKeyValues)
}

::google::protobuf::uint8* CSVCMsg_CmdKeyValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_CmdKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->keyvalues(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_CmdKeyValues)
  return target;
}

size_t CSVCMsg_CmdKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_CmdKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional bytes keyvalues = 1;
  if (has_keyvalues()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->keyvalues());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_CmdKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_CmdKeyValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_CmdKeyValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_CmdKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_CmdKeyValues)
    MergeFrom(*source);
  }
}

void CSVCMsg_CmdKeyValues::MergeFrom(const CSVCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_CmdKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keyvalues()) {
    set_has_keyvalues();
    keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyvalues_);
  }
}

void CSVCMsg_CmdKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_CmdKeyValues::CopyFrom(const CSVCMsg_CmdKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_CmdKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_CmdKeyValues::IsInitialized() const {
  return true;
}

void CSVCMsg_CmdKeyValues::Swap(CSVCMsg_CmdKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_CmdKeyValues::InternalSwap(CSVCMsg_CmdKeyValues* other) {
  using std::swap;
  keyvalues_.Swap(&other->keyvalues_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_CmdKeyValues::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_EncryptedData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_EncryptedData::kEncryptedFieldNumber;
const int CSVCMsg_EncryptedData::kKeyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_EncryptedData::CSVCMsg_EncryptedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_EncryptedData();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_EncryptedData)
}
CSVCMsg_EncryptedData::CSVCMsg_EncryptedData(const CSVCMsg_EncryptedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_encrypted()) {
    encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_);
  }
  key_type_ = from.key_type_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_EncryptedData)
}

void CSVCMsg_EncryptedData::SharedCtor() {
  _cached_size_ = 0;
  encrypted_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_type_ = 0;
}

CSVCMsg_EncryptedData::~CSVCMsg_EncryptedData() {
  // @@protoc_insertion_point(destructor:CSVCMsg_EncryptedData)
  SharedDtor();
}

void CSVCMsg_EncryptedData::SharedDtor() {
  encrypted_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_EncryptedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_EncryptedData::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_EncryptedData& CSVCMsg_EncryptedData::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_EncryptedData();
  return *internal_default_instance();
}

CSVCMsg_EncryptedData* CSVCMsg_EncryptedData::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_EncryptedData* n = new CSVCMsg_EncryptedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_EncryptedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_EncryptedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!encrypted_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*encrypted_.UnsafeRawStringPointer())->clear();
  }
  key_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_EncryptedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_EncryptedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes encrypted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_encrypted()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 key_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_key_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_EncryptedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_EncryptedData)
  return false;
#undef DO_
}

void CSVCMsg_EncryptedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_EncryptedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->encrypted(), output);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_EncryptedData)
}

::google::protobuf::uint8* CSVCMsg_EncryptedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_EncryptedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encrypted = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->encrypted(), target);
  }

  // optional int32 key_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_EncryptedData)
  return target;
}

size_t CSVCMsg_EncryptedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_EncryptedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes encrypted = 1;
    if (has_encrypted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->encrypted());
    }

    // optional int32 key_type = 2;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_EncryptedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_EncryptedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_EncryptedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_EncryptedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_EncryptedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_EncryptedData)
    MergeFrom(*source);
  }
}

void CSVCMsg_EncryptedData::MergeFrom(const CSVCMsg_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_EncryptedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_encrypted();
      encrypted_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.encrypted_);
    }
    if (cached_has_bits & 0x00000002u) {
      key_type_ = from.key_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_EncryptedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_EncryptedData::CopyFrom(const CSVCMsg_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_EncryptedData::IsInitialized() const {
  return true;
}

void CSVCMsg_EncryptedData::Swap(CSVCMsg_EncryptedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_EncryptedData::InternalSwap(CSVCMsg_EncryptedData* other) {
  using std::swap;
  encrypted_.Swap(&other->encrypted_);
  swap(key_type_, other->key_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_EncryptedData::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_HltvReplay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_HltvReplay::kDelayFieldNumber;
const int CSVCMsg_HltvReplay::kPrimaryTargetFieldNumber;
const int CSVCMsg_HltvReplay::kReplayStopAtFieldNumber;
const int CSVCMsg_HltvReplay::kReplayStartAtFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownBeginFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownEndFieldNumber;
const int CSVCMsg_HltvReplay::kReplaySlowdownRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_HltvReplay::CSVCMsg_HltvReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_HltvReplay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_HltvReplay)
}
CSVCMsg_HltvReplay::CSVCMsg_HltvReplay(const CSVCMsg_HltvReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delay_, &from.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&replay_slowdown_rate_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(replay_slowdown_rate_));
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_HltvReplay)
}

void CSVCMsg_HltvReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&replay_slowdown_rate_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(replay_slowdown_rate_));
}

CSVCMsg_HltvReplay::~CSVCMsg_HltvReplay() {
  // @@protoc_insertion_point(destructor:CSVCMsg_HltvReplay)
  SharedDtor();
}

void CSVCMsg_HltvReplay::SharedDtor() {
}

void CSVCMsg_HltvReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_HltvReplay::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_HltvReplay& CSVCMsg_HltvReplay::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_HltvReplay();
  return *internal_default_instance();
}

CSVCMsg_HltvReplay* CSVCMsg_HltvReplay::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_HltvReplay* n = new CSVCMsg_HltvReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_HltvReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    ::memset(&delay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&replay_slowdown_rate_) -
        reinterpret_cast<char*>(&delay_)) + sizeof(replay_slowdown_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_HltvReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_HltvReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 delay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_primary_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_stop_at = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_replay_stop_at();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_stop_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_start_at = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_replay_start_at();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_start_at_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_slowdown_begin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_replay_slowdown_begin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_slowdown_begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 replay_slowdown_end = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_replay_slowdown_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_slowdown_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float replay_slowdown_rate = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_replay_slowdown_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &replay_slowdown_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_HltvReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_HltvReplay)
  return false;
#undef DO_
}

void CSVCMsg_HltvReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->delay(), output);
  }

  // optional int32 primary_target = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->primary_target(), output);
  }

  // optional int32 replay_stop_at = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->replay_stop_at(), output);
  }

  // optional int32 replay_start_at = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replay_start_at(), output);
  }

  // optional int32 replay_slowdown_begin = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->replay_slowdown_begin(), output);
  }

  // optional int32 replay_slowdown_end = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->replay_slowdown_end(), output);
  }

  // optional float replay_slowdown_rate = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->replay_slowdown_rate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_HltvReplay)
}

::google::protobuf::uint8* CSVCMsg_HltvReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 delay = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->delay(), target);
  }

  // optional int32 primary_target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->primary_target(), target);
  }

  // optional int32 replay_stop_at = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->replay_stop_at(), target);
  }

  // optional int32 replay_start_at = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replay_start_at(), target);
  }

  // optional int32 replay_slowdown_begin = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->replay_slowdown_begin(), target);
  }

  // optional int32 replay_slowdown_end = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->replay_slowdown_end(), target);
  }

  // optional float replay_slowdown_rate = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->replay_slowdown_rate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_HltvReplay)
  return target;
}

size_t CSVCMsg_HltvReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_HltvReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 delay = 1;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay());
    }

    // optional int32 primary_target = 2;
    if (has_primary_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_target());
    }

    // optional int32 replay_stop_at = 3;
    if (has_replay_stop_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_stop_at());
    }

    // optional int32 replay_start_at = 4;
    if (has_replay_start_at()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_start_at());
    }

    // optional int32 replay_slowdown_begin = 5;
    if (has_replay_slowdown_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_slowdown_begin());
    }

    // optional int32 replay_slowdown_end = 6;
    if (has_replay_slowdown_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_slowdown_end());
    }

    // optional float replay_slowdown_rate = 7;
    if (has_replay_slowdown_rate()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_HltvReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_HltvReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_HltvReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_HltvReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_HltvReplay)
    MergeFrom(*source);
  }
}

void CSVCMsg_HltvReplay::MergeFrom(const CSVCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000002u) {
      primary_target_ = from.primary_target_;
    }
    if (cached_has_bits & 0x00000004u) {
      replay_stop_at_ = from.replay_stop_at_;
    }
    if (cached_has_bits & 0x00000008u) {
      replay_start_at_ = from.replay_start_at_;
    }
    if (cached_has_bits & 0x00000010u) {
      replay_slowdown_begin_ = from.replay_slowdown_begin_;
    }
    if (cached_has_bits & 0x00000020u) {
      replay_slowdown_end_ = from.replay_slowdown_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      replay_slowdown_rate_ = from.replay_slowdown_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_HltvReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_HltvReplay::CopyFrom(const CSVCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_HltvReplay::IsInitialized() const {
  return true;
}

void CSVCMsg_HltvReplay::Swap(CSVCMsg_HltvReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_HltvReplay::InternalSwap(CSVCMsg_HltvReplay* other) {
  using std::swap;
  swap(delay_, other->delay_);
  swap(primary_target_, other->primary_target_);
  swap(replay_stop_at_, other->replay_stop_at_);
  swap(replay_start_at_, other->replay_start_at_);
  swap(replay_slowdown_begin_, other->replay_slowdown_begin_);
  swap(replay_slowdown_end_, other->replay_slowdown_end_);
  swap(replay_slowdown_rate_, other->replay_slowdown_rate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_HltvReplay::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_HltvReplay::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_HltvReplay::kRequestFieldNumber;
const int CCLCMsg_HltvReplay::kSlowdownLengthFieldNumber;
const int CCLCMsg_HltvReplay::kSlowdownRateFieldNumber;
const int CCLCMsg_HltvReplay::kPrimaryTargetEntIndexFieldNumber;
const int CCLCMsg_HltvReplay::kEventTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_HltvReplay::CCLCMsg_HltvReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_HltvReplay();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_HltvReplay)
}
CCLCMsg_HltvReplay::CCLCMsg_HltvReplay(const CCLCMsg_HltvReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&request_, &from.request_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_time_) -
    reinterpret_cast<char*>(&request_)) + sizeof(event_time_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_HltvReplay)
}

void CCLCMsg_HltvReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_time_) -
      reinterpret_cast<char*>(&request_)) + sizeof(event_time_));
}

CCLCMsg_HltvReplay::~CCLCMsg_HltvReplay() {
  // @@protoc_insertion_point(destructor:CCLCMsg_HltvReplay)
  SharedDtor();
}

void CCLCMsg_HltvReplay::SharedDtor() {
}

void CCLCMsg_HltvReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_HltvReplay::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_HltvReplay& CCLCMsg_HltvReplay::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_HltvReplay();
  return *internal_default_instance();
}

CCLCMsg_HltvReplay* CCLCMsg_HltvReplay::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_HltvReplay* n = new CCLCMsg_HltvReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_HltvReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&request_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_time_) -
        reinterpret_cast<char*>(&request_)) + sizeof(event_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_HltvReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_HltvReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_request();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slowdown_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_slowdown_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slowdown_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slowdown_rate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_slowdown_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slowdown_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 primary_target_ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_primary_target_ent_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primary_target_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float event_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_event_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &event_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_HltvReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_HltvReplay)
  return false;
#undef DO_
}

void CCLCMsg_HltvReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->request(), output);
  }

  // optional float slowdown_length = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->slowdown_length(), output);
  }

  // optional float slowdown_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->slowdown_rate(), output);
  }

  // optional int32 primary_target_ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->primary_target_ent_index(), output);
  }

  // optional float event_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->event_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_HltvReplay)
}

::google::protobuf::uint8* CCLCMsg_HltvReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_HltvReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->request(), target);
  }

  // optional float slowdown_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->slowdown_length(), target);
  }

  // optional float slowdown_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->slowdown_rate(), target);
  }

  // optional int32 primary_target_ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->primary_target_ent_index(), target);
  }

  // optional float event_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->event_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_HltvReplay)
  return target;
}

size_t CCLCMsg_HltvReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_HltvReplay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request());
    }

    // optional float slowdown_length = 2;
    if (has_slowdown_length()) {
      total_size += 1 + 4;
    }

    // optional float slowdown_rate = 3;
    if (has_slowdown_rate()) {
      total_size += 1 + 4;
    }

    // optional int32 primary_target_ent_index = 4;
    if (has_primary_target_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primary_target_ent_index());
    }

    // optional float event_time = 5;
    if (has_event_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_HltvReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_HltvReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_HltvReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_HltvReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_HltvReplay)
    MergeFrom(*source);
  }
}

void CCLCMsg_HltvReplay::MergeFrom(const CCLCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_HltvReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      request_ = from.request_;
    }
    if (cached_has_bits & 0x00000002u) {
      slowdown_length_ = from.slowdown_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      slowdown_rate_ = from.slowdown_rate_;
    }
    if (cached_has_bits & 0x00000008u) {
      primary_target_ent_index_ = from.primary_target_ent_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_time_ = from.event_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_HltvReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_HltvReplay::CopyFrom(const CCLCMsg_HltvReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_HltvReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_HltvReplay::IsInitialized() const {
  return true;
}

void CCLCMsg_HltvReplay::Swap(CCLCMsg_HltvReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_HltvReplay::InternalSwap(CCLCMsg_HltvReplay* other) {
  using std::swap;
  swap(request_, other->request_);
  swap(slowdown_length_, other->slowdown_length_);
  swap(slowdown_rate_, other->slowdown_rate_);
  swap(primary_target_ent_index_, other->primary_target_ent_index_);
  swap(event_time_, other->event_time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_HltvReplay::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_Broadcast_Command::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_Broadcast_Command::kCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_Broadcast_Command::CSVCMsg_Broadcast_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Broadcast_Command();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_Broadcast_Command)
}
CSVCMsg_Broadcast_Command::CSVCMsg_Broadcast_Command(const CSVCMsg_Broadcast_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cmd()) {
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_Broadcast_Command)
}

void CSVCMsg_Broadcast_Command::SharedCtor() {
  _cached_size_ = 0;
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSVCMsg_Broadcast_Command::~CSVCMsg_Broadcast_Command() {
  // @@protoc_insertion_point(destructor:CSVCMsg_Broadcast_Command)
  SharedDtor();
}

void CSVCMsg_Broadcast_Command::SharedDtor() {
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_Broadcast_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_Broadcast_Command::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_Broadcast_Command& CSVCMsg_Broadcast_Command::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_Broadcast_Command();
  return *internal_default_instance();
}

CSVCMsg_Broadcast_Command* CSVCMsg_Broadcast_Command::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_Broadcast_Command* n = new CSVCMsg_Broadcast_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_Broadcast_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_Broadcast_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!cmd_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*cmd_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_Broadcast_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_Broadcast_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmd = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), static_cast<int>(this->cmd().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_Broadcast_Command.cmd");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_Broadcast_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_Broadcast_Command)
  return false;
#undef DO_
}

void CSVCMsg_Broadcast_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_Broadcast_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Broadcast_Command.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cmd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_Broadcast_Command)
}

::google::protobuf::uint8* CSVCMsg_Broadcast_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_Broadcast_Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), static_cast<int>(this->cmd().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_Broadcast_Command.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_Broadcast_Command)
  return target;
}

size_t CSVCMsg_Broadcast_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_Broadcast_Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string cmd = 1;
  if (has_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_Broadcast_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_Broadcast_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_Broadcast_Command* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_Broadcast_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_Broadcast_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_Broadcast_Command)
    MergeFrom(*source);
  }
}

void CSVCMsg_Broadcast_Command::MergeFrom(const CSVCMsg_Broadcast_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_Broadcast_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd()) {
    set_has_cmd();
    cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
  }
}

void CSVCMsg_Broadcast_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_Broadcast_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_Broadcast_Command::CopyFrom(const CSVCMsg_Broadcast_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_Broadcast_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_Broadcast_Command::IsInitialized() const {
  return true;
}

void CSVCMsg_Broadcast_Command::Swap(CSVCMsg_Broadcast_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_Broadcast_Command::InternalSwap(CSVCMsg_Broadcast_Command* other) {
  using std::swap;
  cmd_.Swap(&other->cmd_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_Broadcast_Command::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CCLCMsg_HltvFixupOperatorTick::InitAsDefaultInstance() {
  ::_CCLCMsg_HltvFixupOperatorTick_default_instance_._instance.get_mutable()->origin_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
  ::_CCLCMsg_HltvFixupOperatorTick_default_instance_._instance.get_mutable()->eye_angles_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
  ::_CCLCMsg_HltvFixupOperatorTick_default_instance_._instance.get_mutable()->view_offset_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCLCMsg_HltvFixupOperatorTick::kTickFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kPropsDataFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kOriginFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kEyeAnglesFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kObserverModeFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kCameramanScoreboardFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kObserverTargetFieldNumber;
const int CCLCMsg_HltvFixupOperatorTick::kViewOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCLCMsg_HltvFixupOperatorTick::CCLCMsg_HltvFixupOperatorTick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_HltvFixupOperatorTick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CCLCMsg_HltvFixupOperatorTick)
}
CCLCMsg_HltvFixupOperatorTick::CCLCMsg_HltvFixupOperatorTick(const CCLCMsg_HltvFixupOperatorTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  props_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_props_data()) {
    props_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.props_data_);
  }
  if (from.has_origin()) {
    origin_ = new ::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_eye_angles()) {
    eye_angles_ = new ::CMsgQAngle(*from.eye_angles_);
  } else {
    eye_angles_ = NULL;
  }
  if (from.has_view_offset()) {
    view_offset_ = new ::CMsgVector(*from.view_offset_);
  } else {
    view_offset_ = NULL;
  }
  ::memcpy(&tick_, &from.tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&observer_target_) -
    reinterpret_cast<char*>(&tick_)) + sizeof(observer_target_));
  // @@protoc_insertion_point(copy_constructor:CCLCMsg_HltvFixupOperatorTick)
}

void CCLCMsg_HltvFixupOperatorTick::SharedCtor() {
  _cached_size_ = 0;
  props_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&observer_target_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(observer_target_));
}

CCLCMsg_HltvFixupOperatorTick::~CCLCMsg_HltvFixupOperatorTick() {
  // @@protoc_insertion_point(destructor:CCLCMsg_HltvFixupOperatorTick)
  SharedDtor();
}

void CCLCMsg_HltvFixupOperatorTick::SharedDtor() {
  props_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete eye_angles_;
  if (this != internal_default_instance()) delete view_offset_;
}

void CCLCMsg_HltvFixupOperatorTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCLCMsg_HltvFixupOperatorTick::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCLCMsg_HltvFixupOperatorTick& CCLCMsg_HltvFixupOperatorTick::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCCLCMsg_HltvFixupOperatorTick();
  return *internal_default_instance();
}

CCLCMsg_HltvFixupOperatorTick* CCLCMsg_HltvFixupOperatorTick::New(::google::protobuf::Arena* arena) const {
  CCLCMsg_HltvFixupOperatorTick* n = new CCLCMsg_HltvFixupOperatorTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCLCMsg_HltvFixupOperatorTick::Clear() {
// @@protoc_insertion_point(message_clear_start:CCLCMsg_HltvFixupOperatorTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!props_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*props_data_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(eye_angles_ != NULL);
      eye_angles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(view_offset_ != NULL);
      view_offset_->Clear();
    }
  }
  if (cached_has_bits & 240u) {
    ::memset(&tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&observer_target_) -
        reinterpret_cast<char*>(&tick_)) + sizeof(observer_target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCLCMsg_HltvFixupOperatorTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CCLCMsg_HltvFixupOperatorTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes props_data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_props_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgVector origin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgQAngle eye_angles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eye_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 observer_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_observer_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observer_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cameraman_scoreboard = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_cameraman_scoreboard();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_scoreboard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 observer_target = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_observer_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observer_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgVector view_offset = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_view_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CCLCMsg_HltvFixupOperatorTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CCLCMsg_HltvFixupOperatorTick)
  return false;
#undef DO_
}

void CCLCMsg_HltvFixupOperatorTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CCLCMsg_HltvFixupOperatorTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }

  // optional bytes props_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->props_data(), output);
  }

  // optional .CMsgVector origin = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->origin_, output);
  }

  // optional .CMsgQAngle eye_angles = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->eye_angles_, output);
  }

  // optional int32 observer_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->observer_mode(), output);
  }

  // optional bool cameraman_scoreboard = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cameraman_scoreboard(), output);
  }

  // optional int32 observer_target = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->observer_target(), output);
  }

  // optional .CMsgVector view_offset = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->view_offset_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CCLCMsg_HltvFixupOperatorTick)
}

::google::protobuf::uint8* CCLCMsg_HltvFixupOperatorTick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CCLCMsg_HltvFixupOperatorTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }

  // optional bytes props_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->props_data(), target);
  }

  // optional .CMsgVector origin = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->origin_, deterministic, target);
  }

  // optional .CMsgQAngle eye_angles = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->eye_angles_, deterministic, target);
  }

  // optional int32 observer_mode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->observer_mode(), target);
  }

  // optional bool cameraman_scoreboard = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cameraman_scoreboard(), target);
  }

  // optional int32 observer_target = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->observer_target(), target);
  }

  // optional .CMsgVector view_offset = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->view_offset_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCLCMsg_HltvFixupOperatorTick)
  return target;
}

size_t CCLCMsg_HltvFixupOperatorTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCLCMsg_HltvFixupOperatorTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes props_data = 2;
    if (has_props_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->props_data());
    }

    // optional .CMsgVector origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->origin_);
    }

    // optional .CMsgQAngle eye_angles = 4;
    if (has_eye_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->eye_angles_);
    }

    // optional .CMsgVector view_offset = 8;
    if (has_view_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->view_offset_);
    }

    // optional int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }

    // optional int32 observer_mode = 5;
    if (has_observer_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observer_mode());
    }

    // optional bool cameraman_scoreboard = 6;
    if (has_cameraman_scoreboard()) {
      total_size += 1 + 1;
    }

    // optional int32 observer_target = 7;
    if (has_observer_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observer_target());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCLCMsg_HltvFixupOperatorTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCLCMsg_HltvFixupOperatorTick)
  GOOGLE_DCHECK_NE(&from, this);
  const CCLCMsg_HltvFixupOperatorTick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCLCMsg_HltvFixupOperatorTick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCLCMsg_HltvFixupOperatorTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCLCMsg_HltvFixupOperatorTick)
    MergeFrom(*source);
  }
}

void CCLCMsg_HltvFixupOperatorTick::MergeFrom(const CCLCMsg_HltvFixupOperatorTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCLCMsg_HltvFixupOperatorTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_props_data();
      props_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.props_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_eye_angles()->::CMsgQAngle::MergeFrom(from.eye_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_view_offset()->::CMsgVector::MergeFrom(from.view_offset());
    }
    if (cached_has_bits & 0x00000010u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000020u) {
      observer_mode_ = from.observer_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      cameraman_scoreboard_ = from.cameraman_scoreboard_;
    }
    if (cached_has_bits & 0x00000080u) {
      observer_target_ = from.observer_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCLCMsg_HltvFixupOperatorTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCLCMsg_HltvFixupOperatorTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCLCMsg_HltvFixupOperatorTick::CopyFrom(const CCLCMsg_HltvFixupOperatorTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCLCMsg_HltvFixupOperatorTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCLCMsg_HltvFixupOperatorTick::IsInitialized() const {
  return true;
}

void CCLCMsg_HltvFixupOperatorTick::Swap(CCLCMsg_HltvFixupOperatorTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCLCMsg_HltvFixupOperatorTick::InternalSwap(CCLCMsg_HltvFixupOperatorTick* other) {
  using std::swap;
  props_data_.Swap(&other->props_data_);
  swap(origin_, other->origin_);
  swap(eye_angles_, other->eye_angles_);
  swap(view_offset_, other->view_offset_);
  swap(tick_, other->tick_);
  swap(observer_mode_, other->observer_mode_);
  swap(cameraman_scoreboard_, other->cameraman_scoreboard_);
  swap(observer_target_, other->observer_target_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCLCMsg_HltvFixupOperatorTick::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CSVCMsg_HltvFixupOperatorStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSVCMsg_HltvFixupOperatorStatus::kModeFieldNumber;
const int CSVCMsg_HltvFixupOperatorStatus::kOverrideOperatorNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSVCMsg_HltvFixupOperatorStatus::CSVCMsg_HltvFixupOperatorStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_HltvFixupOperatorStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSVCMsg_HltvFixupOperatorStatus)
}
CSVCMsg_HltvFixupOperatorStatus::CSVCMsg_HltvFixupOperatorStatus(const CSVCMsg_HltvFixupOperatorStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  override_operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_override_operator_name()) {
    override_operator_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.override_operator_name_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:CSVCMsg_HltvFixupOperatorStatus)
}

void CSVCMsg_HltvFixupOperatorStatus::SharedCtor() {
  _cached_size_ = 0;
  override_operator_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0u;
}

CSVCMsg_HltvFixupOperatorStatus::~CSVCMsg_HltvFixupOperatorStatus() {
  // @@protoc_insertion_point(destructor:CSVCMsg_HltvFixupOperatorStatus)
  SharedDtor();
}

void CSVCMsg_HltvFixupOperatorStatus::SharedDtor() {
  override_operator_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSVCMsg_HltvFixupOperatorStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSVCMsg_HltvFixupOperatorStatus::descriptor() {
  ::protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSVCMsg_HltvFixupOperatorStatus& CSVCMsg_HltvFixupOperatorStatus::default_instance() {
  ::protobuf_netmessages_2eproto::InitDefaultsCSVCMsg_HltvFixupOperatorStatus();
  return *internal_default_instance();
}

CSVCMsg_HltvFixupOperatorStatus* CSVCMsg_HltvFixupOperatorStatus::New(::google::protobuf::Arena* arena) const {
  CSVCMsg_HltvFixupOperatorStatus* n = new CSVCMsg_HltvFixupOperatorStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSVCMsg_HltvFixupOperatorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:CSVCMsg_HltvFixupOperatorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!override_operator_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*override_operator_name_.UnsafeRawStringPointer())->clear();
  }
  mode_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSVCMsg_HltvFixupOperatorStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSVCMsg_HltvFixupOperatorStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string override_operator_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_override_operator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->override_operator_name().data(), static_cast<int>(this->override_operator_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CSVCMsg_HltvFixupOperatorStatus.override_operator_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSVCMsg_HltvFixupOperatorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSVCMsg_HltvFixupOperatorStatus)
  return false;
#undef DO_
}

void CSVCMsg_HltvFixupOperatorStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSVCMsg_HltvFixupOperatorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode(), output);
  }

  // optional string override_operator_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->override_operator_name().data(), static_cast<int>(this->override_operator_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_HltvFixupOperatorStatus.override_operator_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->override_operator_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSVCMsg_HltvFixupOperatorStatus)
}

::google::protobuf::uint8* CSVCMsg_HltvFixupOperatorStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSVCMsg_HltvFixupOperatorStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode(), target);
  }

  // optional string override_operator_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->override_operator_name().data(), static_cast<int>(this->override_operator_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CSVCMsg_HltvFixupOperatorStatus.override_operator_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->override_operator_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSVCMsg_HltvFixupOperatorStatus)
  return target;
}

size_t CSVCMsg_HltvFixupOperatorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSVCMsg_HltvFixupOperatorStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string override_operator_name = 2;
    if (has_override_operator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->override_operator_name());
    }

    // optional uint32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVCMsg_HltvFixupOperatorStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSVCMsg_HltvFixupOperatorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSVCMsg_HltvFixupOperatorStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSVCMsg_HltvFixupOperatorStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSVCMsg_HltvFixupOperatorStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSVCMsg_HltvFixupOperatorStatus)
    MergeFrom(*source);
  }
}

void CSVCMsg_HltvFixupOperatorStatus::MergeFrom(const CSVCMsg_HltvFixupOperatorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSVCMsg_HltvFixupOperatorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_override_operator_name();
      override_operator_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.override_operator_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mode_ = from.mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSVCMsg_HltvFixupOperatorStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSVCMsg_HltvFixupOperatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSVCMsg_HltvFixupOperatorStatus::CopyFrom(const CSVCMsg_HltvFixupOperatorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSVCMsg_HltvFixupOperatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVCMsg_HltvFixupOperatorStatus::IsInitialized() const {
  return true;
}

void CSVCMsg_HltvFixupOperatorStatus::Swap(CSVCMsg_HltvFixupOperatorStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSVCMsg_HltvFixupOperatorStatus::InternalSwap(CSVCMsg_HltvFixupOperatorStatus* other) {
  using std::swap;
  override_operator_name_.Swap(&other->override_operator_name_);
  swap(mode_, other->mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSVCMsg_HltvFixupOperatorStatus::GetMetadata() const {
  protobuf_netmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_netmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
