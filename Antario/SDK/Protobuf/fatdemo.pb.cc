// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fatdemo.proto

#include "fatdemo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class MLDictDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLDict>
      _instance;
} _MLDict_default_instance_;
class MLEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLEvent>
      _instance;
} _MLEvent_default_instance_;
class MLMatchStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLMatchState>
      _instance;
} _MLMatchState_default_instance_;
class MLRoundStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLRoundState>
      _instance;
} _MLRoundState_default_instance_;
class MLWeaponStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLWeaponState>
      _instance;
} _MLWeaponState_default_instance_;
class MLPlayerStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLPlayerState>
      _instance;
} _MLPlayerState_default_instance_;
class MLGameStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLGameState>
      _instance;
} _MLGameState_default_instance_;
class MLDemoHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLDemoHeader>
      _instance;
} _MLDemoHeader_default_instance_;
class MLTickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MLTick>
      _instance;
} _MLTick_default_instance_;
namespace protobuf_fatdemo_2eproto {
void InitDefaultsMLDictImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MLDict_default_instance_;
    new (ptr) ::MLDict();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLDict::InitAsDefaultInstance();
}

void InitDefaultsMLDict() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLDictImpl);
}

void InitDefaultsMLEventImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fatdemo_2eproto::InitDefaultsMLDict();
  {
    void* ptr = &::_MLEvent_default_instance_;
    new (ptr) ::MLEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLEvent::InitAsDefaultInstance();
}

void InitDefaultsMLEvent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLEventImpl);
}

void InitDefaultsMLMatchStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MLMatchState_default_instance_;
    new (ptr) ::MLMatchState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLMatchState::InitAsDefaultInstance();
}

void InitDefaultsMLMatchState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLMatchStateImpl);
}

void InitDefaultsMLRoundStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MLRoundState_default_instance_;
    new (ptr) ::MLRoundState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLRoundState::InitAsDefaultInstance();
}

void InitDefaultsMLRoundState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLRoundStateImpl);
}

void InitDefaultsMLWeaponStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MLWeaponState_default_instance_;
    new (ptr) ::MLWeaponState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLWeaponState::InitAsDefaultInstance();
}

void InitDefaultsMLWeaponState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLWeaponStateImpl);
}

void InitDefaultsMLPlayerStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_netmessages_2eproto::InitDefaultsCMsgVector();
  protobuf_netmessages_2eproto::InitDefaultsCMsgQAngle();
  protobuf_fatdemo_2eproto::InitDefaultsMLWeaponState();
  {
    void* ptr = &::_MLPlayerState_default_instance_;
    new (ptr) ::MLPlayerState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLPlayerState::InitAsDefaultInstance();
}

void InitDefaultsMLPlayerState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLPlayerStateImpl);
}

void InitDefaultsMLGameStateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fatdemo_2eproto::InitDefaultsMLMatchState();
  protobuf_fatdemo_2eproto::InitDefaultsMLRoundState();
  protobuf_fatdemo_2eproto::InitDefaultsMLPlayerState();
  {
    void* ptr = &::_MLGameState_default_instance_;
    new (ptr) ::MLGameState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLGameState::InitAsDefaultInstance();
}

void InitDefaultsMLGameState() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLGameStateImpl);
}

void InitDefaultsMLDemoHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_MLDemoHeader_default_instance_;
    new (ptr) ::MLDemoHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLDemoHeader::InitAsDefaultInstance();
}

void InitDefaultsMLDemoHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLDemoHeaderImpl);
}

void InitDefaultsMLTickImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_fatdemo_2eproto::InitDefaultsMLGameState();
  protobuf_fatdemo_2eproto::InitDefaultsMLEvent();
  {
    void* ptr = &::_MLTick_default_instance_;
    new (ptr) ::MLTick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MLTick::InitAsDefaultInstance();
}

void InitDefaultsMLTick() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMLTickImpl);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, val_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, val_int_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDict, val_float_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLEvent, data_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, score_ct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLMatchState, score_t_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLRoundState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLRoundState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLRoundState, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLRoundState, win_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLRoundState, bomb_state_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, ammo_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, ammo_clip_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, ammo_reserve_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLWeaponState, recoil_index_),
  2,
  0,
  3,
  4,
  5,
  6,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, entindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, clan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, abspos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, eyeangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, eyeangle_fwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, flashed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, smoked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, money_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, round_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, round_killhs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, burning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, helmet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, defuse_kit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLPlayerState, weapons_),
  5,
  6,
  7,
  0,
  1,
  8,
  2,
  3,
  4,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLGameState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLGameState, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLGameState, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLGameState, players_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, tick_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLDemoHeader, steam_universe_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLTick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLTick, tick_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLTick, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MLTick, events_),
  1,
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::MLDict)},
  { 13, 20, sizeof(::MLEvent)},
  { 22, 32, sizeof(::MLMatchState)},
  { 37, 45, sizeof(::MLRoundState)},
  { 48, 61, sizeof(::MLWeaponState)},
  { 69, 94, sizeof(::MLPlayerState)},
  { 114, 122, sizeof(::MLGameState)},
  { 125, 134, sizeof(::MLDemoHeader)},
  { 138, 146, sizeof(::MLTick)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLDict_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLMatchState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLRoundState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLWeaponState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLPlayerState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLGameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLDemoHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MLTick_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fatdemo.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfatdemo.proto\032\021netmessages.proto\"M\n\006ML"
      "Dict\022\013\n\003key\030\001 \001(\t\022\022\n\nval_string\030\002 \001(\t\022\017\n"
      "\007val_int\030\003 \001(\005\022\021\n\tval_float\030\004 \001(\002\"4\n\007MLE"
      "vent\022\022\n\nevent_name\030\001 \001(\t\022\025\n\004data\030\002 \003(\0132\007"
      ".MLDict\"b\n\014MLMatchState\022\021\n\tgame_mode\030\001 \001"
      "(\t\022\r\n\005phase\030\002 \001(\t\022\r\n\005round\030\003 \001(\005\022\020\n\010scor"
      "e_ct\030\004 \001(\005\022\017\n\007score_t\030\005 \001(\005\"W\n\014MLRoundSt"
      "ate\022\r\n\005phase\030\001 \001(\t\022$\n\010win_team\030\002 \001(\0162\006.E"
      "Team:\nET_Unknown\022\022\n\nbomb_state\030\003 \001(\t\"\270\001\n"
      "\rMLWeaponState\022\r\n\005index\030\001 \001(\005\022\014\n\004name\030\002 "
      "\001(\t\022%\n\004type\030\003 \001(\0162\014.EWeaponType:\tEWT_Kni"
      "fe\022\021\n\tammo_clip\030\004 \001(\005\022\025\n\rammo_clip_max\030\005"
      " \001(\005\022\024\n\014ammo_reserve\030\006 \001(\005\022\r\n\005state\030\007 \001("
      "\t\022\024\n\014recoil_index\030\010 \001(\002\"\263\003\n\rMLPlayerStat"
      "e\022\022\n\naccount_id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\020"
      "\n\010entindex\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\014\n\004clan\030\005"
      " \001(\t\022 \n\004team\030\006 \001(\0162\006.ETeam:\nET_Unknown\022\033"
      "\n\006abspos\030\007 \001(\0132\013.CMsgVector\022\035\n\010eyeangle\030"
      "\010 \001(\0132\013.CMsgQAngle\022!\n\014eyeangle_fwd\030\t \001(\013"
      "2\013.CMsgVector\022\016\n\006health\030\n \001(\005\022\r\n\005armor\030\013"
      " \001(\005\022\017\n\007flashed\030\014 \001(\002\022\016\n\006smoked\030\r \001(\002\022\r\n"
      "\005money\030\016 \001(\005\022\023\n\013round_kills\030\017 \001(\005\022\024\n\014rou"
      "nd_killhs\030\020 \001(\005\022\017\n\007burning\030\021 \001(\002\022\016\n\006helm"
      "et\030\022 \001(\010\022\022\n\ndefuse_kit\030\023 \001(\010\022\037\n\007weapons\030"
      "\024 \003(\0132\016.MLWeaponState\"j\n\013MLGameState\022\034\n\005"
      "match\030\001 \001(\0132\r.MLMatchState\022\034\n\005round\030\002 \001("
      "\0132\r.MLRoundState\022\037\n\007players\030\003 \003(\0132\016.MLPl"
      "ayerState\"\\\n\014MLDemoHeader\022\020\n\010map_name\030\001 "
      "\001(\t\022\021\n\ttick_rate\030\002 \001(\005\022\017\n\007version\030\003 \001(\r\022"
      "\026\n\016steam_universe\030\004 \001(\r\"S\n\006MLTick\022\022\n\ntic"
      "k_count\030\001 \001(\005\022\033\n\005state\030\002 \001(\0132\014.MLGameSta"
      "te\022\030\n\006events\030\003 \003(\0132\010.MLEvent*\254\001\n\tEHitGro"
      "up\022\017\n\013EHG_Generic\020\000\022\014\n\010EHG_Head\020\001\022\r\n\tEHG"
      "_Chest\020\002\022\017\n\013EHG_Stomach\020\003\022\017\n\013EHG_LeftArm"
      "\020\004\022\020\n\014EHG_RightArm\020\005\022\017\n\013EHG_LeftLeg\020\006\022\020\n"
      "\014EHG_RightLeg\020\007\022\014\n\010EHG_Gear\020\010\022\014\n\010EHG_Mis"
      "s\020\t*F\n\005ETeam\022\016\n\nET_Unknown\020\000\022\020\n\014ET_Spect"
      "ator\020\001\022\020\n\014ET_Terrorist\020\002\022\t\n\005ET_CT\020\003*\344\001\n\013"
      "EWeaponType\022\r\n\tEWT_Knife\020\000\022\016\n\nEWT_Pistol"
      "\020\001\022\025\n\021EWT_SubMachineGun\020\002\022\r\n\tEWT_Rifle\020\003"
      "\022\017\n\013EWT_Shotgun\020\004\022\023\n\017EWT_SniperRifle\020\005\022\022"
      "\n\016EWT_MachineGun\020\006\022\n\n\006EWT_C4\020\007\022\017\n\013EWT_Gr"
      "enade\020\010\022\021\n\rEWT_Equipment\020\t\022\025\n\021EWT_Stacka"
      "bleItem\020\n\022\017\n\013EWT_Unknown\020\013"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1746);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fatdemo.proto", &protobuf_RegisterTypes);
  ::protobuf_netmessages_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fatdemo_2eproto
const ::google::protobuf::EnumDescriptor* EHitGroup_descriptor() {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fatdemo_2eproto::file_level_enum_descriptors[0];
}
bool EHitGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeam_descriptor() {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fatdemo_2eproto::file_level_enum_descriptors[1];
}
bool ETeam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EWeaponType_descriptor() {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fatdemo_2eproto::file_level_enum_descriptors[2];
}
bool EWeaponType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MLDict::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLDict::kKeyFieldNumber;
const int MLDict::kValStringFieldNumber;
const int MLDict::kValIntFieldNumber;
const int MLDict::kValFloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLDict::MLDict()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLDict();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLDict)
}
MLDict::MLDict(const MLDict& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_val_string()) {
    val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
  }
  ::memcpy(&val_int_, &from.val_int_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_float_) -
    reinterpret_cast<char*>(&val_int_)) + sizeof(val_float_));
  // @@protoc_insertion_point(copy_constructor:MLDict)
}

void MLDict::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&val_int_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&val_float_) -
      reinterpret_cast<char*>(&val_int_)) + sizeof(val_float_));
}

MLDict::~MLDict() {
  // @@protoc_insertion_point(destructor:MLDict)
  SharedDtor();
}

void MLDict::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  val_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLDict::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLDict::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLDict& MLDict::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLDict();
  return *internal_default_instance();
}

MLDict* MLDict::New(::google::protobuf::Arena* arena) const {
  MLDict* n = new MLDict;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLDict::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!val_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*val_string_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&val_int_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_float_) -
        reinterpret_cast<char*>(&val_int_)) + sizeof(val_float_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLDict::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLDict)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLDict.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string val_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->val_string().data(), static_cast<int>(this->val_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLDict.val_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 val_int = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_val_int();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_int_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float val_float = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_val_float();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_float_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLDict)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLDict)
  return false;
#undef DO_
}

void MLDict::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLDict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDict.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), static_cast<int>(this->val_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDict.val_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->val_string(), output);
  }

  // optional int32 val_int = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->val_int(), output);
  }

  // optional float val_float = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->val_float(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLDict)
}

::google::protobuf::uint8* MLDict::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLDict)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDict.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->val_string().data(), static_cast<int>(this->val_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDict.val_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->val_string(), target);
  }

  // optional int32 val_int = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->val_int(), target);
  }

  // optional float val_float = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->val_float(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDict)
  return target;
}

size_t MLDict::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLDict)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string val_string = 2;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }

    // optional int32 val_int = 3;
    if (has_val_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val_int());
    }

    // optional float val_float = 4;
    if (has_val_float()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLDict::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLDict)
  GOOGLE_DCHECK_NE(&from, this);
  const MLDict* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLDict>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLDict)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLDict)
    MergeFrom(*source);
  }
}

void MLDict::MergeFrom(const MLDict& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLDict)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_val_string();
      val_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.val_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      val_int_ = from.val_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_float_ = from.val_float_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLDict::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLDict::CopyFrom(const MLDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLDict::IsInitialized() const {
  return true;
}

void MLDict::Swap(MLDict* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLDict::InternalSwap(MLDict* other) {
  using std::swap;
  key_.Swap(&other->key_);
  val_string_.Swap(&other->val_string_);
  swap(val_int_, other->val_int_);
  swap(val_float_, other->val_float_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLDict::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLEvent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLEvent::kEventNameFieldNumber;
const int MLEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLEvent::MLEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLEvent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLEvent)
}
MLEvent::MLEvent(const MLEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  // @@protoc_insertion_point(copy_constructor:MLEvent)
}

void MLEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MLEvent::~MLEvent() {
  // @@protoc_insertion_point(destructor:MLEvent)
  SharedDtor();
}

void MLEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLEvent::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLEvent& MLEvent::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLEvent();
  return *internal_default_instance();
}

MLEvent* MLEvent::New(::google::protobuf::Arena* arena) const {
  MLEvent* n = new MLEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:MLEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*event_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MLDict data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLEvent)
  return false;
#undef DO_
}

void MLEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // repeated .MLDict data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLEvent)
}

::google::protobuf::uint8* MLEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // repeated .MLDict data = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->data(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLEvent)
  return target;
}

size_t MLEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MLDict data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  // optional string event_name = 1;
  if (has_event_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MLEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLEvent)
    MergeFrom(*source);
  }
}

void MLEvent::MergeFrom(const MLEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_event_name()) {
    set_has_event_name();
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
}

void MLEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLEvent::CopyFrom(const MLEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLEvent::IsInitialized() const {
  return true;
}

void MLEvent::Swap(MLEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLEvent::InternalSwap(MLEvent* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  event_name_.Swap(&other->event_name_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLEvent::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLMatchState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLMatchState::kGameModeFieldNumber;
const int MLMatchState::kPhaseFieldNumber;
const int MLMatchState::kRoundFieldNumber;
const int MLMatchState::kScoreCtFieldNumber;
const int MLMatchState::kScoreTFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLMatchState::MLMatchState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLMatchState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLMatchState)
}
MLMatchState::MLMatchState(const MLMatchState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mode()) {
    game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
  }
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phase()) {
    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  ::memcpy(&round_, &from.round_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_t_) -
    reinterpret_cast<char*>(&round_)) + sizeof(score_t_));
  // @@protoc_insertion_point(copy_constructor:MLMatchState)
}

void MLMatchState::SharedCtor() {
  _cached_size_ = 0;
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&round_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_t_) -
      reinterpret_cast<char*>(&round_)) + sizeof(score_t_));
}

MLMatchState::~MLMatchState() {
  // @@protoc_insertion_point(destructor:MLMatchState)
  SharedDtor();
}

void MLMatchState::SharedDtor() {
  game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLMatchState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLMatchState::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLMatchState& MLMatchState::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLMatchState();
  return *internal_default_instance();
}

MLMatchState* MLMatchState::New(::google::protobuf::Arena* arena) const {
  MLMatchState* n = new MLMatchState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!phase_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phase_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&round_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&score_t_) -
        reinterpret_cast<char*>(&round_)) + sizeof(score_t_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLMatchState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLMatchState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), static_cast<int>(this->game_mode().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLMatchState.game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phase = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phase().data(), static_cast<int>(this->phase().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLMatchState.phase");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 round = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_ct = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_score_ct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_ct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 score_t = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_score_t();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLMatchState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLMatchState)
  return false;
#undef DO_
}

void MLMatchState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string game_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLMatchState.game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_mode(), output);
  }

  // optional string phase = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLMatchState.phase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phase(), output);
  }

  // optional int32 round = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->round(), output);
  }

  // optional int32 score_ct = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score_ct(), output);
  }

  // optional int32 score_t = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score_t(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLMatchState)
}

::google::protobuf::uint8* MLMatchState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLMatchState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string game_mode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), static_cast<int>(this->game_mode().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLMatchState.game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_mode(), target);
  }

  // optional string phase = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLMatchState.phase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phase(), target);
  }

  // optional int32 round = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->round(), target);
  }

  // optional int32 score_ct = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score_ct(), target);
  }

  // optional int32 score_t = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score_t(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLMatchState)
  return target;
}

size_t MLMatchState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLMatchState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string game_mode = 1;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string phase = 2;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phase());
    }

    // optional int32 round = 3;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round());
    }

    // optional int32 score_ct = 4;
    if (has_score_ct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_ct());
    }

    // optional int32 score_t = 5;
    if (has_score_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_t());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLMatchState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  const MLMatchState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLMatchState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLMatchState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLMatchState)
    MergeFrom(*source);
  }
}

void MLMatchState::MergeFrom(const MLMatchState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLMatchState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_mode();
      game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_phase();
      phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
    }
    if (cached_has_bits & 0x00000004u) {
      round_ = from.round_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ct_ = from.score_ct_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_t_ = from.score_t_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLMatchState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLMatchState::CopyFrom(const MLMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLMatchState::IsInitialized() const {
  return true;
}

void MLMatchState::Swap(MLMatchState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLMatchState::InternalSwap(MLMatchState* other) {
  using std::swap;
  game_mode_.Swap(&other->game_mode_);
  phase_.Swap(&other->phase_);
  swap(round_, other->round_);
  swap(score_ct_, other->score_ct_);
  swap(score_t_, other->score_t_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLMatchState::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLRoundState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLRoundState::kPhaseFieldNumber;
const int MLRoundState::kWinTeamFieldNumber;
const int MLRoundState::kBombStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLRoundState::MLRoundState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLRoundState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLRoundState)
}
MLRoundState::MLRoundState(const MLRoundState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phase()) {
    phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
  }
  bomb_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bomb_state()) {
    bomb_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bomb_state_);
  }
  win_team_ = from.win_team_;
  // @@protoc_insertion_point(copy_constructor:MLRoundState)
}

void MLRoundState::SharedCtor() {
  _cached_size_ = 0;
  phase_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bomb_state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  win_team_ = 0;
}

MLRoundState::~MLRoundState() {
  // @@protoc_insertion_point(destructor:MLRoundState)
  SharedDtor();
}

void MLRoundState::SharedDtor() {
  phase_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bomb_state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLRoundState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLRoundState::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLRoundState& MLRoundState::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLRoundState();
  return *internal_default_instance();
}

MLRoundState* MLRoundState::New(::google::protobuf::Arena* arena) const {
  MLRoundState* n = new MLRoundState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLRoundState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLRoundState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!phase_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*phase_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!bomb_state_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bomb_state_.UnsafeRawStringPointer())->clear();
    }
  }
  win_team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLRoundState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLRoundState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string phase = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phase().data(), static_cast<int>(this->phase().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLRoundState.phase");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ETeam win_team = 2 [default = ET_Unknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeam_IsValid(value)) {
            set_win_team(static_cast< ::ETeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bomb_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bomb_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bomb_state().data(), static_cast<int>(this->bomb_state().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLRoundState.bomb_state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLRoundState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLRoundState)
  return false;
#undef DO_
}

void MLRoundState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLRoundState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLRoundState.phase");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->phase(), output);
  }

  // optional .ETeam win_team = 2 [default = ET_Unknown];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->win_team(), output);
  }

  // optional string bomb_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bomb_state().data(), static_cast<int>(this->bomb_state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLRoundState.bomb_state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bomb_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLRoundState)
}

::google::protobuf::uint8* MLRoundState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLRoundState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string phase = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase().data(), static_cast<int>(this->phase().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLRoundState.phase");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phase(), target);
  }

  // optional .ETeam win_team = 2 [default = ET_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->win_team(), target);
  }

  // optional string bomb_state = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bomb_state().data(), static_cast<int>(this->bomb_state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLRoundState.bomb_state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bomb_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLRoundState)
  return target;
}

size_t MLRoundState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLRoundState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phase());
    }

    // optional string bomb_state = 3;
    if (has_bomb_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bomb_state());
    }

    // optional .ETeam win_team = 2 [default = ET_Unknown];
    if (has_win_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->win_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLRoundState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLRoundState)
  GOOGLE_DCHECK_NE(&from, this);
  const MLRoundState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLRoundState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLRoundState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLRoundState)
    MergeFrom(*source);
  }
}

void MLRoundState::MergeFrom(const MLRoundState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLRoundState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_phase();
      phase_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_bomb_state();
      bomb_state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bomb_state_);
    }
    if (cached_has_bits & 0x00000004u) {
      win_team_ = from.win_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLRoundState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLRoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLRoundState::CopyFrom(const MLRoundState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLRoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLRoundState::IsInitialized() const {
  return true;
}

void MLRoundState::Swap(MLRoundState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLRoundState::InternalSwap(MLRoundState* other) {
  using std::swap;
  phase_.Swap(&other->phase_);
  bomb_state_.Swap(&other->bomb_state_);
  swap(win_team_, other->win_team_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLRoundState::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLWeaponState::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLWeaponState::kIndexFieldNumber;
const int MLWeaponState::kNameFieldNumber;
const int MLWeaponState::kTypeFieldNumber;
const int MLWeaponState::kAmmoClipFieldNumber;
const int MLWeaponState::kAmmoClipMaxFieldNumber;
const int MLWeaponState::kAmmoReserveFieldNumber;
const int MLWeaponState::kStateFieldNumber;
const int MLWeaponState::kRecoilIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLWeaponState::MLWeaponState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLWeaponState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLWeaponState)
}
MLWeaponState::MLWeaponState(const MLWeaponState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_state()) {
    state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&recoil_index_) -
    reinterpret_cast<char*>(&index_)) + sizeof(recoil_index_));
  // @@protoc_insertion_point(copy_constructor:MLWeaponState)
}

void MLWeaponState::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recoil_index_) -
      reinterpret_cast<char*>(&index_)) + sizeof(recoil_index_));
}

MLWeaponState::~MLWeaponState() {
  // @@protoc_insertion_point(destructor:MLWeaponState)
  SharedDtor();
}

void MLWeaponState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLWeaponState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLWeaponState::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLWeaponState& MLWeaponState::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLWeaponState();
  return *internal_default_instance();
}

MLWeaponState* MLWeaponState::New(::google::protobuf::Arena* arena) const {
  MLWeaponState* n = new MLWeaponState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLWeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLWeaponState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!state_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*state_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recoil_index_) -
        reinterpret_cast<char*>(&index_)) + sizeof(recoil_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLWeaponState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLWeaponState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLWeaponState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .EWeaponType type = 3 [default = EWT_Knife];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EWeaponType_IsValid(value)) {
            set_type(static_cast< ::EWeaponType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ammo_clip = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ammo_clip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammo_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ammo_clip_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ammo_clip_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammo_clip_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ammo_reserve = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ammo_reserve();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ammo_reserve_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state().data(), static_cast<int>(this->state().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLWeaponState.state");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float recoil_index = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_recoil_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &recoil_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLWeaponState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLWeaponState)
  return false;
#undef DO_
}

void MLWeaponState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLWeaponState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLWeaponState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .EWeaponType type = 3 [default = EWT_Knife];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 ammo_clip = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ammo_clip(), output);
  }

  // optional int32 ammo_clip_max = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ammo_clip_max(), output);
  }

  // optional int32 ammo_reserve = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ammo_reserve(), output);
  }

  // optional string state = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLWeaponState.state");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->state(), output);
  }

  // optional float recoil_index = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->recoil_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLWeaponState)
}

::google::protobuf::uint8* MLWeaponState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLWeaponState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLWeaponState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .EWeaponType type = 3 [default = EWT_Knife];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 ammo_clip = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ammo_clip(), target);
  }

  // optional int32 ammo_clip_max = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ammo_clip_max(), target);
  }

  // optional int32 ammo_reserve = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ammo_reserve(), target);
  }

  // optional string state = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state().data(), static_cast<int>(this->state().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLWeaponState.state");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->state(), target);
  }

  // optional float recoil_index = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->recoil_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLWeaponState)
  return target;
}

size_t MLWeaponState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLWeaponState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state());
    }

    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .EWeaponType type = 3 [default = EWT_Knife];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 ammo_clip = 4;
    if (has_ammo_clip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammo_clip());
    }

    // optional int32 ammo_clip_max = 5;
    if (has_ammo_clip_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammo_clip_max());
    }

    // optional int32 ammo_reserve = 6;
    if (has_ammo_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammo_reserve());
    }

    // optional float recoil_index = 8;
    if (has_recoil_index()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLWeaponState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  const MLWeaponState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLWeaponState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLWeaponState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLWeaponState)
    MergeFrom(*source);
  }
}

void MLWeaponState::MergeFrom(const MLWeaponState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLWeaponState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_state();
      state_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.state_);
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      ammo_clip_ = from.ammo_clip_;
    }
    if (cached_has_bits & 0x00000020u) {
      ammo_clip_max_ = from.ammo_clip_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      ammo_reserve_ = from.ammo_reserve_;
    }
    if (cached_has_bits & 0x00000080u) {
      recoil_index_ = from.recoil_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLWeaponState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLWeaponState::CopyFrom(const MLWeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLWeaponState::IsInitialized() const {
  return true;
}

void MLWeaponState::Swap(MLWeaponState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLWeaponState::InternalSwap(MLWeaponState* other) {
  using std::swap;
  name_.Swap(&other->name_);
  state_.Swap(&other->state_);
  swap(index_, other->index_);
  swap(type_, other->type_);
  swap(ammo_clip_, other->ammo_clip_);
  swap(ammo_clip_max_, other->ammo_clip_max_);
  swap(ammo_reserve_, other->ammo_reserve_);
  swap(recoil_index_, other->recoil_index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLWeaponState::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLPlayerState::InitAsDefaultInstance() {
  ::_MLPlayerState_default_instance_._instance.get_mutable()->abspos_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
  ::_MLPlayerState_default_instance_._instance.get_mutable()->eyeangle_ = const_cast< ::CMsgQAngle*>(
      ::CMsgQAngle::internal_default_instance());
  ::_MLPlayerState_default_instance_._instance.get_mutable()->eyeangle_fwd_ = const_cast< ::CMsgVector*>(
      ::CMsgVector::internal_default_instance());
}
void MLPlayerState::clear_abspos() {
  if (abspos_ != NULL) abspos_->Clear();
  clear_has_abspos();
}
void MLPlayerState::clear_eyeangle() {
  if (eyeangle_ != NULL) eyeangle_->Clear();
  clear_has_eyeangle();
}
void MLPlayerState::clear_eyeangle_fwd() {
  if (eyeangle_fwd_ != NULL) eyeangle_fwd_->Clear();
  clear_has_eyeangle_fwd();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLPlayerState::kAccountIdFieldNumber;
const int MLPlayerState::kUserIdFieldNumber;
const int MLPlayerState::kEntindexFieldNumber;
const int MLPlayerState::kNameFieldNumber;
const int MLPlayerState::kClanFieldNumber;
const int MLPlayerState::kTeamFieldNumber;
const int MLPlayerState::kAbsposFieldNumber;
const int MLPlayerState::kEyeangleFieldNumber;
const int MLPlayerState::kEyeangleFwdFieldNumber;
const int MLPlayerState::kHealthFieldNumber;
const int MLPlayerState::kArmorFieldNumber;
const int MLPlayerState::kFlashedFieldNumber;
const int MLPlayerState::kSmokedFieldNumber;
const int MLPlayerState::kMoneyFieldNumber;
const int MLPlayerState::kRoundKillsFieldNumber;
const int MLPlayerState::kRoundKillhsFieldNumber;
const int MLPlayerState::kBurningFieldNumber;
const int MLPlayerState::kHelmetFieldNumber;
const int MLPlayerState::kDefuseKitFieldNumber;
const int MLPlayerState::kWeaponsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLPlayerState::MLPlayerState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLPlayerState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLPlayerState)
}
MLPlayerState::MLPlayerState(const MLPlayerState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      weapons_(from.weapons_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  clan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clan()) {
    clan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_);
  }
  if (from.has_abspos()) {
    abspos_ = new ::CMsgVector(*from.abspos_);
  } else {
    abspos_ = NULL;
  }
  if (from.has_eyeangle()) {
    eyeangle_ = new ::CMsgQAngle(*from.eyeangle_);
  } else {
    eyeangle_ = NULL;
  }
  if (from.has_eyeangle_fwd()) {
    eyeangle_fwd_ = new ::CMsgVector(*from.eyeangle_fwd_);
  } else {
    eyeangle_fwd_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&defuse_kit_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(defuse_kit_));
  // @@protoc_insertion_point(copy_constructor:MLPlayerState)
}

void MLPlayerState::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&abspos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&defuse_kit_) -
      reinterpret_cast<char*>(&abspos_)) + sizeof(defuse_kit_));
}

MLPlayerState::~MLPlayerState() {
  // @@protoc_insertion_point(destructor:MLPlayerState)
  SharedDtor();
}

void MLPlayerState::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete abspos_;
  if (this != internal_default_instance()) delete eyeangle_;
  if (this != internal_default_instance()) delete eyeangle_fwd_;
}

void MLPlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLPlayerState::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLPlayerState& MLPlayerState::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLPlayerState();
  return *internal_default_instance();
}

MLPlayerState* MLPlayerState::New(::google::protobuf::Arena* arena) const {
  MLPlayerState* n = new MLPlayerState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLPlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weapons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!clan_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*clan_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(abspos_ != NULL);
      abspos_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(eyeangle_ != NULL);
      eyeangle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(eyeangle_fwd_ != NULL);
      eyeangle_fwd_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entindex_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(entindex_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&round_killhs_) -
        reinterpret_cast<char*>(&team_)) + sizeof(round_killhs_));
  }
  if (cached_has_bits & 458752u) {
    ::memset(&burning_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&defuse_kit_) -
        reinterpret_cast<char*>(&burning_)) + sizeof(defuse_kit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLPlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLPlayerState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entindex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_entindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLPlayerState.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string clan = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clan().data(), static_cast<int>(this->clan().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLPlayerState.clan");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .ETeam team = 6 [default = ET_Unknown];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ETeam_IsValid(value)) {
            set_team(static_cast< ::ETeam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgVector abspos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_abspos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgQAngle eyeangle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eyeangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgVector eyeangle_fwd = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_eyeangle_fwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 health = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 armor = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_armor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float flashed = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_flashed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flashed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float smoked = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_smoked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &smoked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 money = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_money();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 round_kills = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_round_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 round_killhs = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u /* 128 & 0xFF */)) {
          set_has_round_killhs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_killhs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float burning = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_burning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &burning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool helmet = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u /* 144 & 0xFF */)) {
          set_has_helmet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helmet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool defuse_kit = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u /* 152 & 0xFF */)) {
          set_has_defuse_kit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &defuse_kit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MLWeaponState weapons = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_weapons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLPlayerState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLPlayerState)
  return false;
#undef DO_
}

void MLPlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->account_id(), output);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entindex(), output);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLPlayerState.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string clan = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan().data(), static_cast<int>(this->clan().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLPlayerState.clan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->clan(), output);
  }

  // optional .ETeam team = 6 [default = ET_Unknown];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->team(), output);
  }

  // optional .CMsgVector abspos = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->abspos_, output);
  }

  // optional .CMsgQAngle eyeangle = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->eyeangle_, output);
  }

  // optional .CMsgVector eyeangle_fwd = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->eyeangle_fwd_, output);
  }

  // optional int32 health = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->health(), output);
  }

  // optional int32 armor = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->armor(), output);
  }

  // optional float flashed = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->flashed(), output);
  }

  // optional float smoked = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->smoked(), output);
  }

  // optional int32 money = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->money(), output);
  }

  // optional int32 round_kills = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->round_kills(), output);
  }

  // optional int32 round_killhs = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->round_killhs(), output);
  }

  // optional float burning = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->burning(), output);
  }

  // optional bool helmet = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->helmet(), output);
  }

  // optional bool defuse_kit = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->defuse_kit(), output);
  }

  // repeated .MLWeaponState weapons = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapons_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->weapons(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLPlayerState)
}

::google::protobuf::uint8* MLPlayerState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLPlayerState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 account_id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 user_id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }

  // optional int32 entindex = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entindex(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLPlayerState.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string clan = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clan().data(), static_cast<int>(this->clan().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLPlayerState.clan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->clan(), target);
  }

  // optional .ETeam team = 6 [default = ET_Unknown];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->team(), target);
  }

  // optional .CMsgVector abspos = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->abspos_, deterministic, target);
  }

  // optional .CMsgQAngle eyeangle = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->eyeangle_, deterministic, target);
  }

  // optional .CMsgVector eyeangle_fwd = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->eyeangle_fwd_, deterministic, target);
  }

  // optional int32 health = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->health(), target);
  }

  // optional int32 armor = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->armor(), target);
  }

  // optional float flashed = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->flashed(), target);
  }

  // optional float smoked = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->smoked(), target);
  }

  // optional int32 money = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->money(), target);
  }

  // optional int32 round_kills = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->round_kills(), target);
  }

  // optional int32 round_killhs = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->round_killhs(), target);
  }

  // optional float burning = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->burning(), target);
  }

  // optional bool helmet = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->helmet(), target);
  }

  // optional bool defuse_kit = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->defuse_kit(), target);
  }

  // repeated .MLWeaponState weapons = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->weapons_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->weapons(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLPlayerState)
  return target;
}

size_t MLPlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLPlayerState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MLWeaponState weapons = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->weapons_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->weapons(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string clan = 5;
    if (has_clan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan());
    }

    // optional .CMsgVector abspos = 7;
    if (has_abspos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->abspos_);
    }

    // optional .CMsgQAngle eyeangle = 8;
    if (has_eyeangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->eyeangle_);
    }

    // optional .CMsgVector eyeangle_fwd = 9;
    if (has_eyeangle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->eyeangle_fwd_);
    }

    // optional int32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional int32 entindex = 3;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .ETeam team = 6 [default = ET_Unknown];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional int32 health = 10;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 armor = 11;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional float flashed = 12;
    if (has_flashed()) {
      total_size += 1 + 4;
    }

    // optional float smoked = 13;
    if (has_smoked()) {
      total_size += 1 + 4;
    }

    // optional int32 money = 14;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 round_kills = 15;
    if (has_round_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_kills());
    }

    // optional int32 round_killhs = 16;
    if (has_round_killhs()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->round_killhs());
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional float burning = 17;
    if (has_burning()) {
      total_size += 2 + 4;
    }

    // optional bool helmet = 18;
    if (has_helmet()) {
      total_size += 2 + 1;
    }

    // optional bool defuse_kit = 19;
    if (has_defuse_kit()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLPlayerState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  const MLPlayerState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLPlayerState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLPlayerState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLPlayerState)
    MergeFrom(*source);
  }
}

void MLPlayerState::MergeFrom(const MLPlayerState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLPlayerState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weapons_.MergeFrom(from.weapons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_clan();
      clan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clan_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_abspos()->::CMsgVector::MergeFrom(from.abspos());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_eyeangle()->::CMsgQAngle::MergeFrom(from.eyeangle());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_eyeangle_fwd()->::CMsgVector::MergeFrom(from.eyeangle_fwd());
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      user_id_ = from.user_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      entindex_ = from.entindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000200u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000400u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00000800u) {
      flashed_ = from.flashed_;
    }
    if (cached_has_bits & 0x00001000u) {
      smoked_ = from.smoked_;
    }
    if (cached_has_bits & 0x00002000u) {
      money_ = from.money_;
    }
    if (cached_has_bits & 0x00004000u) {
      round_kills_ = from.round_kills_;
    }
    if (cached_has_bits & 0x00008000u) {
      round_killhs_ = from.round_killhs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      burning_ = from.burning_;
    }
    if (cached_has_bits & 0x00020000u) {
      helmet_ = from.helmet_;
    }
    if (cached_has_bits & 0x00040000u) {
      defuse_kit_ = from.defuse_kit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLPlayerState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLPlayerState::CopyFrom(const MLPlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLPlayerState::IsInitialized() const {
  return true;
}

void MLPlayerState::Swap(MLPlayerState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLPlayerState::InternalSwap(MLPlayerState* other) {
  using std::swap;
  weapons_.InternalSwap(&other->weapons_);
  name_.Swap(&other->name_);
  clan_.Swap(&other->clan_);
  swap(abspos_, other->abspos_);
  swap(eyeangle_, other->eyeangle_);
  swap(eyeangle_fwd_, other->eyeangle_fwd_);
  swap(account_id_, other->account_id_);
  swap(user_id_, other->user_id_);
  swap(entindex_, other->entindex_);
  swap(team_, other->team_);
  swap(health_, other->health_);
  swap(armor_, other->armor_);
  swap(flashed_, other->flashed_);
  swap(smoked_, other->smoked_);
  swap(money_, other->money_);
  swap(round_kills_, other->round_kills_);
  swap(round_killhs_, other->round_killhs_);
  swap(burning_, other->burning_);
  swap(helmet_, other->helmet_);
  swap(defuse_kit_, other->defuse_kit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLPlayerState::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLGameState::InitAsDefaultInstance() {
  ::_MLGameState_default_instance_._instance.get_mutable()->match_ = const_cast< ::MLMatchState*>(
      ::MLMatchState::internal_default_instance());
  ::_MLGameState_default_instance_._instance.get_mutable()->round_ = const_cast< ::MLRoundState*>(
      ::MLRoundState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLGameState::kMatchFieldNumber;
const int MLGameState::kRoundFieldNumber;
const int MLGameState::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLGameState::MLGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLGameState();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLGameState)
}
MLGameState::MLGameState(const MLGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::MLMatchState(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_round()) {
    round_ = new ::MLRoundState(*from.round_);
  } else {
    round_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:MLGameState)
}

void MLGameState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&round_) -
      reinterpret_cast<char*>(&match_)) + sizeof(round_));
}

MLGameState::~MLGameState() {
  // @@protoc_insertion_point(destructor:MLGameState)
  SharedDtor();
}

void MLGameState::SharedDtor() {
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete round_;
}

void MLGameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLGameState::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLGameState& MLGameState::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLGameState();
  return *internal_default_instance();
}

MLGameState* MLGameState::New(::google::protobuf::Arena* arena) const {
  MLGameState* n = new MLGameState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != NULL);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(round_ != NULL);
      round_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLGameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MLMatchState match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MLRoundState round = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_round()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MLPlayerState players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLGameState)
  return false;
#undef DO_
}

void MLGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MLMatchState match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // optional .MLRoundState round = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->round_, output);
  }

  // repeated .MLPlayerState players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLGameState)
}

::google::protobuf::uint8* MLGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLGameState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .MLMatchState match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->match_, deterministic, target);
  }

  // optional .MLRoundState round = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->round_, deterministic, target);
  }

  // repeated .MLPlayerState players = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->players(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLGameState)
  return target;
}

size_t MLGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLGameState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MLPlayerState players = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .MLMatchState match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->match_);
    }

    // optional .MLRoundState round = 2;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->round_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const MLGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLGameState)
    MergeFrom(*source);
  }
}

void MLGameState::MergeFrom(const MLGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::MLMatchState::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_round()->::MLRoundState::MergeFrom(from.round());
    }
  }
}

void MLGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLGameState::CopyFrom(const MLGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLGameState::IsInitialized() const {
  return true;
}

void MLGameState::Swap(MLGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLGameState::InternalSwap(MLGameState* other) {
  using std::swap;
  players_.InternalSwap(&other->players_);
  swap(match_, other->match_);
  swap(round_, other->round_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLGameState::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLDemoHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLDemoHeader::kMapNameFieldNumber;
const int MLDemoHeader::kTickRateFieldNumber;
const int MLDemoHeader::kVersionFieldNumber;
const int MLDemoHeader::kSteamUniverseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLDemoHeader::MLDemoHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLDemoHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLDemoHeader)
}
MLDemoHeader::MLDemoHeader(const MLDemoHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  ::memcpy(&tick_rate_, &from.tick_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&steam_universe_) -
    reinterpret_cast<char*>(&tick_rate_)) + sizeof(steam_universe_));
  // @@protoc_insertion_point(copy_constructor:MLDemoHeader)
}

void MLDemoHeader::SharedCtor() {
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tick_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steam_universe_) -
      reinterpret_cast<char*>(&tick_rate_)) + sizeof(steam_universe_));
}

MLDemoHeader::~MLDemoHeader() {
  // @@protoc_insertion_point(destructor:MLDemoHeader)
  SharedDtor();
}

void MLDemoHeader::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MLDemoHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLDemoHeader::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLDemoHeader& MLDemoHeader::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLDemoHeader();
  return *internal_default_instance();
}

MLDemoHeader* MLDemoHeader::New(::google::protobuf::Arena* arena) const {
  MLDemoHeader* n = new MLDemoHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLDemoHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDemoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*map_name_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 14u) {
    ::memset(&tick_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steam_universe_) -
        reinterpret_cast<char*>(&tick_rate_)) + sizeof(steam_universe_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLDemoHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLDemoHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), static_cast<int>(this->map_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MLDemoHeader.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tick_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tick_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_universe = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_steam_universe();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_universe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLDemoHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLDemoHeader)
  return false;
#undef DO_
}

void MLDemoHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLDemoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDemoHeader.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional int32 tick_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick_rate(), output);
  }

  // optional uint32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->version(), output);
  }

  // optional uint32 steam_universe = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->steam_universe(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLDemoHeader)
}

::google::protobuf::uint8* MLDemoHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLDemoHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string map_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), static_cast<int>(this->map_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MLDemoHeader.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional int32 tick_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick_rate(), target);
  }

  // optional uint32 version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->version(), target);
  }

  // optional uint32 steam_universe = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->steam_universe(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDemoHeader)
  return target;
}

size_t MLDemoHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLDemoHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional int32 tick_rate = 2;
    if (has_tick_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_rate());
    }

    // optional uint32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 steam_universe = 4;
    if (has_steam_universe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_universe());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLDemoHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLDemoHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MLDemoHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLDemoHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLDemoHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLDemoHeader)
    MergeFrom(*source);
  }
}

void MLDemoHeader::MergeFrom(const MLDemoHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLDemoHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      tick_rate_ = from.tick_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      steam_universe_ = from.steam_universe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLDemoHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLDemoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLDemoHeader::CopyFrom(const MLDemoHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDemoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLDemoHeader::IsInitialized() const {
  return true;
}

void MLDemoHeader::Swap(MLDemoHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLDemoHeader::InternalSwap(MLDemoHeader* other) {
  using std::swap;
  map_name_.Swap(&other->map_name_);
  swap(tick_rate_, other->tick_rate_);
  swap(version_, other->version_);
  swap(steam_universe_, other->steam_universe_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLDemoHeader::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MLTick::InitAsDefaultInstance() {
  ::_MLTick_default_instance_._instance.get_mutable()->state_ = const_cast< ::MLGameState*>(
      ::MLGameState::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MLTick::kTickCountFieldNumber;
const int MLTick::kStateFieldNumber;
const int MLTick::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MLTick::MLTick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_fatdemo_2eproto::InitDefaultsMLTick();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MLTick)
}
MLTick::MLTick(const MLTick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_state()) {
    state_ = new ::MLGameState(*from.state_);
  } else {
    state_ = NULL;
  }
  tick_count_ = from.tick_count_;
  // @@protoc_insertion_point(copy_constructor:MLTick)
}

void MLTick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tick_count_) -
      reinterpret_cast<char*>(&state_)) + sizeof(tick_count_));
}

MLTick::~MLTick() {
  // @@protoc_insertion_point(destructor:MLTick)
  SharedDtor();
}

void MLTick::SharedDtor() {
  if (this != internal_default_instance()) delete state_;
}

void MLTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLTick::descriptor() {
  ::protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MLTick& MLTick::default_instance() {
  ::protobuf_fatdemo_2eproto::InitDefaultsMLTick();
  return *internal_default_instance();
}

MLTick* MLTick::New(::google::protobuf::Arena* arena) const {
  MLTick* n = new MLTick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MLTick::Clear() {
// @@protoc_insertion_point(message_clear_start:MLTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(state_ != NULL);
    state_->Clear();
  }
  tick_count_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MLTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MLTick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tick_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tick_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MLGameState state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .MLEvent events = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MLTick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MLTick)
  return false;
#undef DO_
}

void MLTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MLTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick_count = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick_count(), output);
  }

  // optional .MLGameState state = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->state_, output);
  }

  // repeated .MLEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MLTick)
}

::google::protobuf::uint8* MLTick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MLTick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tick_count = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick_count(), target);
  }

  // optional .MLGameState state = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->state_, deterministic, target);
  }

  // repeated .MLEvent events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->events(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLTick)
  return target;
}

size_t MLTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MLTick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .MLEvent events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .MLGameState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->state_);
    }

    // optional int32 tick_count = 1;
    if (has_tick_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLTick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MLTick)
  GOOGLE_DCHECK_NE(&from, this);
  const MLTick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MLTick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MLTick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MLTick)
    MergeFrom(*source);
  }
}

void MLTick::MergeFrom(const MLTick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MLTick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_state()->::MLGameState::MergeFrom(from.state());
    }
    if (cached_has_bits & 0x00000002u) {
      tick_count_ = from.tick_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MLTick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MLTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLTick::CopyFrom(const MLTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLTick::IsInitialized() const {
  return true;
}

void MLTick::Swap(MLTick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MLTick::InternalSwap(MLTick* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  swap(state_, other->state_);
  swap(tick_count_, other->tick_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MLTick::GetMetadata() const {
  protobuf_fatdemo_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fatdemo_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
